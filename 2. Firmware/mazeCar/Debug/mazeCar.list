
mazeCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a970  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800aa80  0800aa80  0001aa80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af30  0800af30  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  0800af30  0800af30  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af30  0800af30  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af30  0800af30  0001af30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af34  0800af34  0001af34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800af38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000250  0800b184  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800b184  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ede  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6a  00000000  00000000  00033196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00035c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e32  00000000  00000000  00036e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a154  00000000  00000000  00037c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b4f  00000000  00000000  00051d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094bb8  00000000  00000000  000678dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006374  00000000  00000000  000fc498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010280c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa68 	.word	0x0800aa68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	0800aa68 	.word	0x0800aa68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <forwardGPIO>:
extern TIM_HandleTypeDef htim4;

extern void angle(int goc);


void forwardGPIO(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <forwardGPIO+0x40>)
 800118a:	f002 f867 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2101      	movs	r1, #1
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <forwardGPIO+0x44>)
 8001194:	f002 f862 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2102      	movs	r1, #2
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <forwardGPIO+0x44>)
 800119e:	f002 f85d 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <forwardGPIO+0x44>)
 80011aa:	f002 f857 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <forwardGPIO+0x44>)
 80011b6:	f002 f851 	bl	800325c <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	f107 030f 	add.w	r3, r7, #15
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2275      	movs	r2, #117	; 0x75
 80011e2:	21d0      	movs	r1, #208	; 0xd0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f002 fa8f 	bl	8003708 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b68      	cmp	r3, #104	; 0x68
 80011ee:	d13d      	bne.n	800126c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80011f4:	2364      	movs	r3, #100	; 0x64
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f107 030e 	add.w	r3, r7, #14
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	226b      	movs	r2, #107	; 0x6b
 8001206:	21d0      	movs	r1, #208	; 0xd0
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f002 f983 	bl	8003514 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800120e:	2307      	movs	r3, #7
 8001210:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001212:	2364      	movs	r3, #100	; 0x64
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 030e 	add.w	r3, r7, #14
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2219      	movs	r2, #25
 8001224:	21d0      	movs	r1, #208	; 0xd0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f002 f974 	bl	8003514 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	f107 030e 	add.w	r3, r7, #14
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	221c      	movs	r2, #28
 8001242:	21d0      	movs	r1, #208	; 0xd0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f002 f965 	bl	8003514 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800124a:	2300      	movs	r3, #0
 800124c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f107 030e 	add.w	r3, r7, #14
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	221b      	movs	r2, #27
 8001260:	21d0      	movs	r1, #208	; 0xd0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f002 f956 	bl	8003514 <HAL_I2C_Mem_Write>
        return 0;
 8001268:	2300      	movs	r3, #0
 800126a:	e000      	b.n	800126e <MPU6050_Init+0xa6>
    }
    return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af04      	add	r7, sp, #16
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001282:	2364      	movs	r3, #100	; 0x64
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2306      	movs	r3, #6
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	2243      	movs	r2, #67	; 0x43
 8001294:	21d0      	movs	r1, #208	; 0xd0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f002 fa36 	bl	8003708 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7a7b      	ldrb	r3, [r7, #9]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80012ae:	7abb      	ldrb	r3, [r7, #10]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80012c0:	7b3b      	ldrb	r3, [r7, #12]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7b7b      	ldrb	r3, [r7, #13]
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f893 	bl	8000404 <__aeabi_i2d>
 80012de:	a318      	add	r3, pc, #96	; (adr r3, 8001340 <MPU6050_Read_Gyro+0xc8>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff fa22 	bl	800072c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f883 	bl	8000404 <__aeabi_i2d>
 80012fe:	a310      	add	r3, pc, #64	; (adr r3, 8001340 <MPU6050_Read_Gyro+0xc8>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff fa12 	bl	800072c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f873 	bl	8000404 <__aeabi_i2d>
 800131e:	a308      	add	r3, pc, #32	; (adr r3, 8001340 <MPU6050_Read_Gyro+0xc8>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff fa02 	bl	800072c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	00000000 	.word	0x00000000
 8001344:	40606000 	.word	0x40606000

08001348 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError = 0.0f;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator = 0.0f;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.012f;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a03      	ldr	r2, [pc, #12]	; (8001380 <PIDController_Init+0x38>)
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	3c449ba6 	.word	0x3c449ba6

08001384 <PIDController_Update>:

double PIDController_Update(PIDController *pid, double setpoint, double measurement)
{
 8001384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001388:	b088      	sub	sp, #32
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	e9c7 2300 	strd	r2, r3, [r7]

	/*
	 * Error signal
	 */
	double error = setpoint - measurement;
 8001392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800139a:	f7fe fee5 	bl	8000168 <__aeabi_dsub>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	/*
	 * Proportional
	 */
	double proportional = pid->Kp * error;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f83c 	bl	8000428 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013b8:	f7ff f88e 	bl	80004d8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	/*
	 * Integral
	 */
	pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f82d 	bl	8000428 <__aeabi_f2d>
 80013ce:	4680      	mov	r8, r0
 80013d0:	4689      	mov	r9, r1
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fcd2 	bl	8000d84 <__aeabi_fmul>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f7ff fcca 	bl	8000d84 <__aeabi_fmul>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f818 	bl	8000428 <__aeabi_f2d>
 80013f8:	4682      	mov	sl, r0
 80013fa:	468b      	mov	fp, r1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f811 	bl	8000428 <__aeabi_f2d>
 8001406:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140a:	f7fe feaf 	bl	800016c <__adddf3>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4650      	mov	r0, sl
 8001414:	4659      	mov	r1, fp
 8001416:	f7ff f85f 	bl	80004d8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4640      	mov	r0, r8
 8001420:	4649      	mov	r1, r9
 8001422:	f7fe fea3 	bl	800016c <__adddf3>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fb4b 	bl	8000ac8 <__aeabi_d2f>
 8001432:	4602      	mov	r2, r0
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
	if (pid->integrator > pid->limMaxInt)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	4619      	mov	r1, r3
 8001442:	4610      	mov	r0, r2
 8001444:	f7ff fe5a 	bl	80010fc <__aeabi_fcmpgt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <PIDController_Update+0xd4>
	{

		pid->integrator = pid->limMaxInt;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	69da      	ldr	r2, [r3, #28]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
 8001456:	e00e      	b.n	8001476 <PIDController_Update+0xf2>
	}
	else if (pid->integrator < pid->limMinInt)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff fe2c 	bl	80010c0 <__aeabi_fcmplt>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <PIDController_Update+0xf2>
	{

		pid->integrator = pid->limMinInt;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	 * Derivative (band-limited differentiator)
	 */

	pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4619      	mov	r1, r3
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fb79 	bl	8000b74 <__addsf3>
 8001482:	4603      	mov	r3, r0
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ffcf 	bl	8000428 <__aeabi_f2d>
 800148a:	4680      	mov	r8, r0
 800148c:	4689      	mov	r9, r1
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ffc8 	bl	8000428 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80014a0:	f7fe fe62 	bl	8000168 <__aeabi_dsub>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4640      	mov	r0, r8
 80014aa:	4649      	mov	r1, r9
 80014ac:	f7ff f814 	bl	80004d8 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4690      	mov	r8, r2
 80014b6:	4699      	mov	r9, r3
							+ (2.0f * pid->tau - pid->T) * pid->differentiator) /
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4619      	mov	r1, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb58 	bl	8000b74 <__addsf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4610      	mov	r0, r2
 80014d0:	f7ff fb4e 	bl	8000b70 <__aeabi_fsub>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f7ff fc50 	bl	8000d84 <__aeabi_fmul>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff9e 	bl	8000428 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4640      	mov	r0, r8
 80014f2:	4649      	mov	r1, r9
 80014f4:	f7fe fe3a 	bl	800016c <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
	pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 80014fc:	4614      	mov	r4, r2
 80014fe:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
						  (2.0f * pid->tau + pid->T);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	4619      	mov	r1, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fb33 	bl	8000b74 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4619      	mov	r1, r3
 8001518:	4610      	mov	r0, r2
 800151a:	f7ff fb2b 	bl	8000b74 <__addsf3>
 800151e:	4603      	mov	r3, r0
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
							+ (2.0f * pid->tau - pid->T) * pid->differentiator) /
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f8fd 	bl	800072c <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fac5 	bl	8000ac8 <__aeabi_d2f>
 800153e:	4602      	mov	r2, r0
	pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) /* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c

	/*
	 * Compute output and apply limits
	 */
	pid->out = proportional + pid->integrator + pid->differentiator;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ff6d 	bl	8000428 <__aeabi_f2d>
 800154e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001552:	f7fe fe0b 	bl	800016c <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4614      	mov	r4, r2
 800155c:	461d      	mov	r5, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ff60 	bl	8000428 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7fe fdfc 	bl	800016c <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff faa4 	bl	8000ac8 <__aeabi_d2f>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	635a      	str	r2, [r3, #52]	; 0x34

	if (pid->out > pid->limMax)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4619      	mov	r1, r3
 8001590:	4610      	mov	r0, r2
 8001592:	f7ff fdb3 	bl	80010fc <__aeabi_fcmpgt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <PIDController_Update+0x222>
	{

		pid->out = pid->limMax;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
 80015a4:	e00e      	b.n	80015c4 <PIDController_Update+0x240>
	}
	else if (pid->out < pid->limMin)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f7ff fd85 	bl	80010c0 <__aeabi_fcmplt>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <PIDController_Update+0x240>
	{

		pid->out = pid->limMin;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Store error and measurement for later use */
	pid->prevError = error;
 80015c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015c8:	f7ff fa7e 	bl	8000ac8 <__aeabi_d2f>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
	pid->prevMeasurement = measurement;
 80015d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80015d6:	f7ff fa77 	bl	8000ac8 <__aeabi_d2f>
 80015da:	4602      	mov	r2, r0
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
	return pid->out;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
}
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080015fa <init_encoder>:
extern TIM_HandleTypeDef htim4;

static float calculate_speed(int32_t count, int32_t interval);

uint8_t init_encoder(encoder_t *enc, wheel_t wheel)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
	enc->wheel = wheel;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	701a      	strb	r2, [r3, #0]
    enc->speed = 0;
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	e9c1 2302 	strd	r2, r3, [r1, #8]
    enc->position = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
    enc->previous_millis = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
    return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
	...

08001634 <HAL_TIM_IC_CaptureCallback>:
    // Calculate speed in units per minute
    double speed = (count / (double)ENCODER_COUNT) * (60000.0 / interval);
    return speed;
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001634:	b4b0      	push	{r4, r5, r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	6809      	ldr	r1, [r1, #0]
 8001640:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001644:	d109      	bne.n	800165a <HAL_TIM_IC_CaptureCallback+0x26>
    {
        counterTim2 = __HAL_TIM_GET_COUNTER(htim);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	2200      	movs	r2, #0
 800164e:	461c      	mov	r4, r3
 8001650:	4615      	mov	r5, r2
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001654:	e9c3 4500 	strd	r4, r5, [r3]
    }
    else if (htim->Instance == TIM3)
    {
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
    }
}
 8001658:	e00d      	b.n	8001676 <HAL_TIM_IC_CaptureCallback+0x42>
    else if (htim->Instance == TIM3)
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	6809      	ldr	r1, [r1, #0]
 800165e:	4809      	ldr	r0, [pc, #36]	; (8001684 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001660:	4281      	cmp	r1, r0
 8001662:	d108      	bne.n	8001676 <HAL_TIM_IC_CaptureCallback+0x42>
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	6809      	ldr	r1, [r1, #0]
 8001668:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800166a:	2000      	movs	r0, #0
 800166c:	460a      	mov	r2, r1
 800166e:	4603      	mov	r3, r0
 8001670:	4905      	ldr	r1, [pc, #20]	; (8001688 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001672:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bcb0      	pop	{r4, r5, r7}
 800167e:	4770      	bx	lr
 8001680:	20000270 	.word	0x20000270
 8001684:	40000400 	.word	0x40000400
 8001688:	20000278 	.word	0x20000278

0800168c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <_write+0x28>)
 80016a4:	f004 fc17 	bl	8005ed6 <HAL_UART_Transmit>
    return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000454 	.word	0x20000454

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 80016be:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f001 f888 	bl	80027d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f916 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 fbea 	bl	8001ea0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80016cc:	f000 f96e 	bl	80019ac <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016d0:	f000 fbbc 	bl	8001e4c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80016d4:	f000 f9d0 	bl	8001a78 <MX_I2C1_Init>
  MX_TIM2_Init();
 80016d8:	f000 fa9a 	bl	8001c10 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016dc:	f000 f9fa 	bl	8001ad4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016e0:	f000 faea 	bl	8001cb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016e4:	f000 fb3c 	bl	8001d60 <MX_TIM4_Init>
  MX_ADC2_Init();
 80016e8:	f000 f988 	bl	80019fc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80016ec:	213c      	movs	r1, #60	; 0x3c
 80016ee:	486b      	ldr	r0, [pc, #428]	; (800189c <main+0x1e4>)
 80016f0:	f003 fcd8 	bl	80050a4 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80016f4:	213c      	movs	r1, #60	; 0x3c
 80016f6:	486a      	ldr	r0, [pc, #424]	; (80018a0 <main+0x1e8>)
 80016f8:	f003 fcd4 	bl	80050a4 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80016fc:	210c      	movs	r1, #12
 80016fe:	4869      	ldr	r0, [pc, #420]	; (80018a4 <main+0x1ec>)
 8001700:	f003 fb8c 	bl	8004e1c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001704:	2108      	movs	r1, #8
 8001706:	4868      	ldr	r0, [pc, #416]	; (80018a8 <main+0x1f0>)
 8001708:	f003 fb88 	bl	8004e1c <HAL_TIM_PWM_Start>
    forwardGPIO();
 800170c:	f7ff fd38 	bl	8001180 <forwardGPIO>
	PIDController_Init(&leftWheelPID);
 8001710:	4866      	ldr	r0, [pc, #408]	; (80018ac <main+0x1f4>)
 8001712:	f7ff fe19 	bl	8001348 <PIDController_Init>
	PIDController_Init(&forwardPID);
 8001716:	4866      	ldr	r0, [pc, #408]	; (80018b0 <main+0x1f8>)
 8001718:	f7ff fe16 	bl	8001348 <PIDController_Init>
	init_encoder(&enc_Left, LEFT_WHEEL);
 800171c:	2101      	movs	r1, #1
 800171e:	4865      	ldr	r0, [pc, #404]	; (80018b4 <main+0x1fc>)
 8001720:	f7ff ff6b 	bl	80015fa <init_encoder>
	init_encoder(&enc_Right, RIGHT_WHEEL);
 8001724:	2102      	movs	r1, #2
 8001726:	4864      	ldr	r0, [pc, #400]	; (80018b8 <main+0x200>)
 8001728:	f7ff ff67 	bl	80015fa <init_encoder>
//    	distance_left = distanceLeft();
//    	distance_right = distanceRight();
//    	distance_straight =  distanceStraight() ;
//    }
//    PIDController_Init(&WheelPID);
	uint8_t timeout = 10;
 800172c:	230a      	movs	r3, #10
 800172e:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
	while (MPU6050_Init(&hi2c1) == 1){
 8001732:	e00a      	b.n	800174a <main+0x92>
		timeout--;
 8001734:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001738:	3b01      	subs	r3, #1
 800173a:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
		if(timeout == 0){
 800173e:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <main+0x92>
			HAL_NVIC_SystemReset();
 8001746:	f001 fbf4 	bl	8002f32 <HAL_NVIC_SystemReset>
	while (MPU6050_Init(&hi2c1) == 1){
 800174a:	485c      	ldr	r0, [pc, #368]	; (80018bc <main+0x204>)
 800174c:	f7ff fd3c 	bl	80011c8 <MPU6050_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d0ee      	beq.n	8001734 <main+0x7c>
		}
	}

	filter_gyro();
 8001756:	f000 fc33 	bl	8001fc0 <filter_gyro>
//	roll = 0;
//	pitch = 0;
//	yaw = 0;
//	forwardGPIO();
	while(1){
		previousTime = HAL_GetTick();
 800175a:	f001 f893 	bl	8002884 <HAL_GetTick>
 800175e:	4603      	mov	r3, r0
 8001760:	4a57      	ldr	r2, [pc, #348]	; (80018c0 <main+0x208>)
 8001762:	6013      	str	r3, [r2, #0]
		MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8001764:	4957      	ldr	r1, [pc, #348]	; (80018c4 <main+0x20c>)
 8001766:	4855      	ldr	r0, [pc, #340]	; (80018bc <main+0x204>)
 8001768:	f7ff fd86 	bl	8001278 <MPU6050_Read_Gyro>
		roll += (MPU6050.Gx - froll) *dt;
 800176c:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <main+0x20c>)
 800176e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001772:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <main+0x210>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe fcf6 	bl	8000168 <__aeabi_dsub>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	4b51      	ldr	r3, [pc, #324]	; (80018cc <main+0x214>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fea5 	bl	80004d8 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <main+0x218>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7fe fce6 	bl	800016c <__adddf3>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	494a      	ldr	r1, [pc, #296]	; (80018d0 <main+0x218>)
 80017a6:	e9c1 2300 	strd	r2, r3, [r1]
		pitch += (MPU6050.Gy - fpitch) *dt;
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <main+0x20c>)
 80017ac:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80017b0:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <main+0x21c>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe fcd7 	bl	8000168 <__aeabi_dsub>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <main+0x214>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fe86 	bl	80004d8 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <main+0x220>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe fcc7 	bl	800016c <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	493d      	ldr	r1, [pc, #244]	; (80018d8 <main+0x220>)
 80017e4:	e9c1 2300 	strd	r2, r3, [r1]
		yaw += (MPU6050.Gz - fyaw) *dt;
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <main+0x20c>)
 80017ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <main+0x224>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe fcb8 	bl	8000168 <__aeabi_dsub>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <main+0x214>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fe67 	bl	80004d8 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <main+0x228>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fca8 	bl	800016c <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	492f      	ldr	r1, [pc, #188]	; (80018e0 <main+0x228>)
 8001822:	e9c1 2300 	strd	r2, r3, [r1]

		forwardPWM = PIDController_Update(&forwardPID, 0, abs(yaw));
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <main+0x228>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f902 	bl	8000a38 <__aeabi_d2iz>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	bfb8      	it	lt
 800183a:	425b      	neglt	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fde1 	bl	8000404 <__aeabi_i2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9cd 2300 	strd	r2, r3, [sp]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	4817      	ldr	r0, [pc, #92]	; (80018b0 <main+0x1f8>)
 8001854:	f7ff fd96 	bl	8001384 <PIDController_Update>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4921      	ldr	r1, [pc, #132]	; (80018e4 <main+0x22c>)
 800185e:	e9c1 2300 	strd	r2, r3, [r1]


//		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,(uint16_t)abs(leftPWM));
//		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,(uint16_t)abs(rightPWM));
		currentTime = HAL_GetTick();
 8001862:	f001 f80f 	bl	8002884 <HAL_GetTick>
 8001866:	4603      	mov	r3, r0
 8001868:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <main+0x230>)
 800186a:	6013      	str	r3, [r2, #0]
		elapsedTime = currentTime - previousTime;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <main+0x230>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <main+0x208>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <main+0x234>)
 8001878:	6013      	str	r3, [r2, #0]
		dt = ((double) elapsedTime) / 1000;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <main+0x234>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdb0 	bl	80003e4 <__aeabi_ui2d>
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <main+0x238>)
 800188a:	f7fe ff4f 	bl	800072c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	490e      	ldr	r1, [pc, #56]	; (80018cc <main+0x214>)
 8001894:	e9c1 2300 	strd	r2, r3, [r1]
		previousTime = HAL_GetTick();
 8001898:	e75f      	b.n	800175a <main+0xa2>
 800189a:	bf00      	nop
 800189c:	2000037c 	.word	0x2000037c
 80018a0:	200003c4 	.word	0x200003c4
 80018a4:	20000334 	.word	0x20000334
 80018a8:	2000040c 	.word	0x2000040c
 80018ac:	20000040 	.word	0x20000040
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000550 	.word	0x20000550
 80018b8:	20000538 	.word	0x20000538
 80018bc:	200002e0 	.word	0x200002e0
 80018c0:	20000530 	.word	0x20000530
 80018c4:	200004a0 	.word	0x200004a0
 80018c8:	20000510 	.word	0x20000510
 80018cc:	20000000 	.word	0x20000000
 80018d0:	200004f8 	.word	0x200004f8
 80018d4:	20000518 	.word	0x20000518
 80018d8:	20000500 	.word	0x20000500
 80018dc:	20000520 	.word	0x20000520
 80018e0:	20000508 	.word	0x20000508
 80018e4:	20000568 	.word	0x20000568
 80018e8:	2000052c 	.word	0x2000052c
 80018ec:	20000528 	.word	0x20000528
 80018f0:	408f4000 	.word	0x408f4000

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	; 0x50
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	2228      	movs	r2, #40	; 0x28
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fcf0 	bl	80072e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001924:	2301      	movs	r3, #1
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001932:	2301      	movs	r3, #1
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001936:	2302      	movs	r3, #2
 8001938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800193a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001940:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fcf8 	bl	8004340 <HAL_RCC_OscConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001956:	f000 fbd9 	bl	800210c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195a:	230f      	movs	r3, #15
 800195c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001966:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800196a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2102      	movs	r1, #2
 8001976:	4618      	mov	r0, r3
 8001978:	f002 ff64 	bl	8004844 <HAL_RCC_ClockConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001982:	f000 fbc3 	bl	800210c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001986:	2302      	movs	r3, #2
 8001988:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800198a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800198e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f003 f8e4 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800199e:	f000 fbb5 	bl	800210c <Error_Handler>
  }
}
 80019a2:	bf00      	nop
 80019a4:	3750      	adds	r7, #80	; 0x50
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <MX_ADC1_Init+0x48>)
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <MX_ADC1_Init+0x4c>)
 80019b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_ADC1_Init+0x48>)
 80019b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <MX_ADC1_Init+0x48>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <MX_ADC1_Init+0x48>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_ADC1_Init+0x48>)
 80019cc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <MX_ADC1_Init+0x48>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_ADC1_Init+0x48>)
 80019da:	2201      	movs	r2, #1
 80019dc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_ADC1_Init+0x48>)
 80019e0:	f000 ff7e 	bl	80028e0 <HAL_ADC_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80019ea:	f000 fb8f 	bl	800210c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000280 	.word	0x20000280
 80019f8:	40012400 	.word	0x40012400

080019fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <MX_ADC2_Init+0x78>)
 8001a10:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a26:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a2a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a3a:	f000 ff51 	bl	80028e0 <HAL_ADC_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001a44:	f000 fb62 	bl	800210c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a50:	2307      	movs	r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_ADC2_Init+0x74>)
 8001a5a:	f001 f819 	bl	8002a90 <HAL_ADC_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001a64:	f000 fb52 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200002b0 	.word	0x200002b0
 8001a74:	40012800 	.word	0x40012800

08001a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <MX_I2C1_Init+0x54>)
 8001a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_I2C1_Init+0x58>)
 8001a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_I2C1_Init+0x50>)
 8001ab6:	f001 fbe9 	bl	800328c <HAL_I2C_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ac0:	f000 fb24 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200002e0 	.word	0x200002e0
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	000186a0 	.word	0x000186a0

08001ad4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b096      	sub	sp, #88	; 0x58
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	615a      	str	r2, [r3, #20]
 8001b04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2220      	movs	r2, #32
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f005 fbeb 	bl	80072e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b14:	4a3d      	ldr	r2, [pc, #244]	; (8001c0c <MX_TIM1_Init+0x138>)
 8001b16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8001b18:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b1a:	2211      	movs	r2, #17
 8001b1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b26:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b3e:	4832      	ldr	r0, [pc, #200]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b40:	f003 f8c4 	bl	8004ccc <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b4a:	f000 fadf 	bl	800210c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b58:	4619      	mov	r1, r3
 8001b5a:	482b      	ldr	r0, [pc, #172]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b5c:	f003 fd1a 	bl	8005594 <HAL_TIM_ConfigClockSource>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b66:	f000 fad1 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b6a:	4827      	ldr	r0, [pc, #156]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b6c:	f003 f8fd 	bl	8004d6a <HAL_TIM_PWM_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b76:	f000 fac9 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b86:	4619      	mov	r1, r3
 8001b88:	481f      	ldr	r0, [pc, #124]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001b8a:	f004 f893 	bl	8005cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b94:	f000 faba 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b98:	2360      	movs	r3, #96	; 0x60
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001bba:	f003 fc29 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001bc4:	f000 faa2 	bl	800210c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4807      	ldr	r0, [pc, #28]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001bec:	f004 f8c0 	bl	8005d70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001bf6:	f000 fa89 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bfa:	4803      	ldr	r0, [pc, #12]	; (8001c08 <MX_TIM1_Init+0x134>)
 8001bfc:	f000 fc3c 	bl	8002478 <HAL_TIM_MspPostInit>

}
 8001c00:	bf00      	nop
 8001c02:	3758      	adds	r7, #88	; 0x58
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000334 	.word	0x20000334
 8001c0c:	40012c00 	.word	0x40012c00

08001c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	; 0x30
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 fb62 	bl	80072e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <MX_TIM2_Init+0xa4>)
 8001c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_TIM2_Init+0xa4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_TIM2_Init+0xa4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_TIM2_Init+0xa4>)
 8001c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM2_Init+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_TIM2_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_TIM2_Init+0xa4>)
 8001c80:	f003 f96e 	bl	8004f60 <HAL_TIM_Encoder_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c8a:	f000 fa3f 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <MX_TIM2_Init+0xa4>)
 8001c9c:	f004 f80a 	bl	8005cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ca6:	f000 fa31 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	3730      	adds	r7, #48	; 0x30
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000037c 	.word	0x2000037c

08001cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	; 0x30
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 fb0e 	bl	80072e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001cd6:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <MX_TIM3_Init+0xa4>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d02:	2301      	movs	r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d12:	2301      	movs	r3, #1
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	4619      	mov	r1, r3
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001d26:	f003 f91b 	bl	8004f60 <HAL_TIM_Encoder_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d30:	f000 f9ec 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_TIM3_Init+0xa0>)
 8001d42:	f003 ffb7 	bl	8005cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d4c:	f000 f9de 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	3730      	adds	r7, #48	; 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200003c4 	.word	0x200003c4
 8001d5c:	40000400 	.word	0x40000400

08001d60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08e      	sub	sp, #56	; 0x38
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001d92:	4a2d      	ldr	r2, [pc, #180]	; (8001e48 <MX_TIM4_Init+0xe8>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 8001d96:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001d98:	2211      	movs	r2, #17
 8001d9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001da4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001da8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001db6:	4823      	ldr	r0, [pc, #140]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001db8:	f002 ff88 	bl	8004ccc <HAL_TIM_Base_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001dc2:	f000 f9a3 	bl	800210c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	481c      	ldr	r0, [pc, #112]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001dd4:	f003 fbde 	bl	8005594 <HAL_TIM_ConfigClockSource>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001dde:	f000 f995 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001de2:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001de4:	f002 ffc1 	bl	8004d6a <HAL_TIM_PWM_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001dee:	f000 f98d 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4810      	ldr	r0, [pc, #64]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001e02:	f003 ff57 	bl	8005cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e0c:	f000 f97e 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e10:	2360      	movs	r3, #96	; 0x60
 8001e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2208      	movs	r2, #8
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001e28:	f003 faf2 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e32:	f000 f96b 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM4_Init+0xe4>)
 8001e38:	f000 fb1e 	bl	8002478 <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3738      	adds	r7, #56	; 0x38
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000040c 	.word	0x2000040c
 8001e48:	40000800 	.word	0x40000800

08001e4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <MX_USART1_UART_Init+0x50>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f003 ffd7 	bl	8005e36 <HAL_UART_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e8e:	f000 f93d 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000454 	.word	0x20000454
 8001e9c:	40013800 	.word	0x40013800

08001ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb4:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001eba:	f043 0310 	orr.w	r3, r3, #16
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ecc:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a37      	ldr	r2, [pc, #220]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001ed2:	f043 0320 	orr.w	r3, r3, #32
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a31      	ldr	r2, [pc, #196]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001f02:	f043 0308 	orr.w	r3, r3, #8
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <MX_GPIO_Init+0x110>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MCU_GPIO_Port, LED_MCU_Pin, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1a:	4826      	ldr	r0, [pc, #152]	; (8001fb4 <MX_GPIO_Init+0x114>)
 8001f1c:	f001 f99e 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2138      	movs	r1, #56	; 0x38
 8001f24:	4824      	ldr	r0, [pc, #144]	; (8001fb8 <MX_GPIO_Init+0x118>)
 8001f26:	f001 f999 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f64c 4133 	movw	r1, #52275	; 0xcc33
 8001f30:	4822      	ldr	r0, [pc, #136]	; (8001fbc <MX_GPIO_Init+0x11c>)
 8001f32:	f001 f993 	bl	800325c <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_MCU_Pin */
  GPIO_InitStruct.Pin = LED_MCU_Pin;
 8001f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_MCU_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4819      	ldr	r0, [pc, #100]	; (8001fb4 <MX_GPIO_Init+0x114>)
 8001f50:	f001 f800 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|STBY_Pin;
 8001f54:	2338      	movs	r3, #56	; 0x38
 8001f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <MX_GPIO_Init+0x118>)
 8001f6c:	f000 fff2 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : AI2_Pin AI1_Pin BI1_Pin BI2_Pin
                           LED5_Pin LED6_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 8001f70:	f64c 4333 	movw	r3, #52275	; 0xcc33
 8001f74:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f76:	2301      	movs	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	4619      	mov	r1, r3
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <MX_GPIO_Init+0x11c>)
 8001f8a:	f000 ffe3 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8001f8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4806      	ldr	r0, [pc, #24]	; (8001fbc <MX_GPIO_Init+0x11c>)
 8001fa4:	f000 ffd6 	bl	8002f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40011000 	.word	0x40011000
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	40010c00 	.word	0x40010c00

08001fc0 <filter_gyro>:

/* USER CODE BEGIN 4 */
void filter_gyro(){
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af04      	add	r7, sp, #16
	printf("Start probe filter\r\n");
 8001fc6:	4847      	ldr	r0, [pc, #284]	; (80020e4 <filter_gyro+0x124>)
 8001fc8:	f005 f88e 	bl	80070e8 <puts>
	HAL_Delay(500);
 8001fcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd0:	f000 fc62 	bl	8002898 <HAL_Delay>
	for(uint8_t x = 0; x < 10; x++){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	e008      	b.n	8001fec <filter_gyro+0x2c>
		printf("*");
 8001fda:	202a      	movs	r0, #42	; 0x2a
 8001fdc:	f005 f828 	bl	8007030 <putchar>
	    HAL_Delay(100);
 8001fe0:	2064      	movs	r0, #100	; 0x64
 8001fe2:	f000 fc59 	bl	8002898 <HAL_Delay>
	for(uint8_t x = 0; x < 10; x++){
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	71fb      	strb	r3, [r7, #7]
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	2b09      	cmp	r3, #9
 8001ff0:	d9f3      	bls.n	8001fda <filter_gyro+0x1a>
	}
	printf("*\r\n");
 8001ff2:	483d      	ldr	r0, [pc, #244]	; (80020e8 <filter_gyro+0x128>)
 8001ff4:	f005 f878 	bl	80070e8 <puts>
	for(int x = 0; x < 1000; x++){
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	e02d      	b.n	800205a <filter_gyro+0x9a>
		MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8001ffe:	493b      	ldr	r1, [pc, #236]	; (80020ec <filter_gyro+0x12c>)
 8002000:	483b      	ldr	r0, [pc, #236]	; (80020f0 <filter_gyro+0x130>)
 8002002:	f7ff f939 	bl	8001278 <MPU6050_Read_Gyro>
		froll += MPU6050.Gx;
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <filter_gyro+0x12c>)
 8002008:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <filter_gyro+0x134>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	f7fe f8ab 	bl	800016c <__adddf3>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4936      	ldr	r1, [pc, #216]	; (80020f4 <filter_gyro+0x134>)
 800201c:	e9c1 2300 	strd	r2, r3, [r1]
		fpitch += MPU6050.Gy;
 8002020:	4b32      	ldr	r3, [pc, #200]	; (80020ec <filter_gyro+0x12c>)
 8002022:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <filter_gyro+0x138>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe f89e 	bl	800016c <__adddf3>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4930      	ldr	r1, [pc, #192]	; (80020f8 <filter_gyro+0x138>)
 8002036:	e9c1 2300 	strd	r2, r3, [r1]
		fyaw += MPU6050.Gz;
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <filter_gyro+0x12c>)
 800203c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <filter_gyro+0x13c>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe f891 	bl	800016c <__adddf3>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	492b      	ldr	r1, [pc, #172]	; (80020fc <filter_gyro+0x13c>)
 8002050:	e9c1 2300 	strd	r2, r3, [r1]
	for(int x = 0; x < 1000; x++){
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002060:	dbcd      	blt.n	8001ffe <filter_gyro+0x3e>
	}
	froll = froll / 1000;
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <filter_gyro+0x134>)
 8002064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <filter_gyro+0x140>)
 800206e:	f7fe fb5d 	bl	800072c <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	491f      	ldr	r1, [pc, #124]	; (80020f4 <filter_gyro+0x134>)
 8002078:	e9c1 2300 	strd	r2, r3, [r1]
	fpitch = fpitch /1000;
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <filter_gyro+0x138>)
 800207e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <filter_gyro+0x140>)
 8002088:	f7fe fb50 	bl	800072c <__aeabi_ddiv>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4919      	ldr	r1, [pc, #100]	; (80020f8 <filter_gyro+0x138>)
 8002092:	e9c1 2300 	strd	r2, r3, [r1]
	fyaw = fyaw/1000;
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <filter_gyro+0x13c>)
 8002098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <filter_gyro+0x140>)
 80020a2:	f7fe fb43 	bl	800072c <__aeabi_ddiv>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4914      	ldr	r1, [pc, #80]	; (80020fc <filter_gyro+0x13c>)
 80020ac:	e9c1 2300 	strd	r2, r3, [r1]
	printf("froll: %.2f fpitch: %.2f fyaw: %.2f\r\n",froll, fpitch, fyaw);
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <filter_gyro+0x134>)
 80020b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <filter_gyro+0x138>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	490f      	ldr	r1, [pc, #60]	; (80020fc <filter_gyro+0x13c>)
 80020be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020c6:	e9cd 2300 	strd	r2, r3, [sp]
 80020ca:	4622      	mov	r2, r4
 80020cc:	462b      	mov	r3, r5
 80020ce:	480d      	ldr	r0, [pc, #52]	; (8002104 <filter_gyro+0x144>)
 80020d0:	f004 ff9c 	bl	800700c <iprintf>
	printf("Prove filter done!\r\n");
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <filter_gyro+0x148>)
 80020d6:	f005 f807 	bl	80070e8 <puts>

}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdb0      	pop	{r4, r5, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	0800aa84 	.word	0x0800aa84
 80020e8:	0800aa98 	.word	0x0800aa98
 80020ec:	200004a0 	.word	0x200004a0
 80020f0:	200002e0 	.word	0x200002e0
 80020f4:	20000510 	.word	0x20000510
 80020f8:	20000518 	.word	0x20000518
 80020fc:	20000520 	.word	0x20000520
 8002100:	408f4000 	.word	0x408f4000
 8002104:	0800aa9c 	.word	0x0800aa9c
 8002108:	0800aac4 	.word	0x0800aac4

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002114:	e7fe      	b.n	8002114 <Error_Handler+0x8>
	...

08002118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_MspInit+0x5c>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	4a14      	ldr	r2, [pc, #80]	; (8002174 <HAL_MspInit+0x5c>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6193      	str	r3, [r2, #24]
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_MspInit+0x5c>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_MspInit+0x5c>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_MspInit+0x5c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_MspInit+0x5c>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_MspInit+0x60>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_MspInit+0x60>)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000

0800217c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0318 	add.w	r3, r7, #24
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_ADC_MspInit+0xbc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d122      	bne.n	80021e2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_ADC_MspInit+0xc0>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <HAL_ADC_MspInit+0xc0>)
 80021a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_ADC_MspInit+0xc0>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_ADC_MspInit+0xc0>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_ADC_MspInit+0xc0>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_ADC_MspInit+0xc0>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_CB2_Pin|ADC_CB3_Pin;
 80021cc:	2306      	movs	r3, #6
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d0:	2303      	movs	r3, #3
 80021d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	4619      	mov	r1, r3
 80021da:	4819      	ldr	r0, [pc, #100]	; (8002240 <HAL_ADC_MspInit+0xc4>)
 80021dc:	f000 feba 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021e0:	e026      	b.n	8002230 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_ADC_MspInit+0xc8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d121      	bne.n	8002230 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_ADC_MspInit+0xc0>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_ADC_MspInit+0xc0>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_ADC_MspInit+0xc0>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_ADC_MspInit+0xc0>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a0c      	ldr	r2, [pc, #48]	; (800223c <HAL_ADC_MspInit+0xc0>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_ADC_MspInit+0xc0>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800221c:	2301      	movs	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002220:	2303      	movs	r3, #3
 8002222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	4619      	mov	r1, r3
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <HAL_ADC_MspInit+0xc4>)
 800222c:	f000 fe92 	bl	8002f54 <HAL_GPIO_Init>
}
 8002230:	bf00      	nop
 8002232:	3728      	adds	r7, #40	; 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40012400 	.word	0x40012400
 800223c:	40021000 	.word	0x40021000
 8002240:	40010800 	.word	0x40010800
 8002244:	40012800 	.word	0x40012800

08002248 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <HAL_I2C_MspInit+0x70>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d123      	bne.n	80022b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_I2C_MspInit+0x74>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a13      	ldr	r2, [pc, #76]	; (80022bc <HAL_I2C_MspInit+0x74>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_I2C_MspInit+0x74>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002280:	23c0      	movs	r3, #192	; 0xc0
 8002282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002284:	2312      	movs	r3, #18
 8002286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	4619      	mov	r1, r3
 8002292:	480b      	ldr	r0, [pc, #44]	; (80022c0 <HAL_I2C_MspInit+0x78>)
 8002294:	f000 fe5e 	bl	8002f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_I2C_MspInit+0x74>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_I2C_MspInit+0x74>)
 800229e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a2:	61d3      	str	r3, [r2, #28]
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_I2C_MspInit+0x74>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022b0:	bf00      	nop
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40005400 	.word	0x40005400
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010c00 	.word	0x40010c00

080022c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a12      	ldr	r2, [pc, #72]	; (800231c <HAL_TIM_Base_MspInit+0x58>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10c      	bne.n	80022f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_TIM_Base_MspInit+0x5c>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_TIM_Base_MspInit+0x5c>)
 80022dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022e0:	6193      	str	r3, [r2, #24]
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_TIM_Base_MspInit+0x5c>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022ee:	e010      	b.n	8002312 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_TIM_Base_MspInit+0x60>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10b      	bne.n	8002312 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_TIM_Base_MspInit+0x5c>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_TIM_Base_MspInit+0x5c>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_TIM_Base_MspInit+0x5c>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40021000 	.word	0x40021000
 8002324:	40000800 	.word	0x40000800

08002328 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	; 0x30
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d157      	bne.n	80023f8 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a45      	ldr	r2, [pc, #276]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	4b40      	ldr	r3, [pc, #256]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a3f      	ldr	r2, [pc, #252]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a39      	ldr	r2, [pc, #228]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 800237e:	f043 0308 	orr.w	r3, r3, #8
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	4619      	mov	r1, r3
 80023a4:	4830      	ldr	r0, [pc, #192]	; (8002468 <HAL_TIM_Encoder_MspInit+0x140>)
 80023a6:	f000 fdd5 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023aa:	2308      	movs	r3, #8
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	482b      	ldr	r0, [pc, #172]	; (800246c <HAL_TIM_Encoder_MspInit+0x144>)
 80023be:	f000 fdc9 	bl	8002f54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_TIM_Encoder_MspInit+0x148>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e0:	4a23      	ldr	r2, [pc, #140]	; (8002470 <HAL_TIM_Encoder_MspInit+0x148>)
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	201c      	movs	r0, #28
 80023ec:	f000 fd77 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023f0:	201c      	movs	r0, #28
 80023f2:	f000 fd90 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023f6:	e030      	b.n	800245a <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_TIM_Encoder_MspInit+0x14c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d12b      	bne.n	800245a <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	61d3      	str	r3, [r2, #28]
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6193      	str	r3, [r2, #24]
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002432:	23c0      	movs	r3, #192	; 0xc0
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4619      	mov	r1, r3
 8002444:	4808      	ldr	r0, [pc, #32]	; (8002468 <HAL_TIM_Encoder_MspInit+0x140>)
 8002446:	f000 fd85 	bl	8002f54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	201d      	movs	r0, #29
 8002450:	f000 fd45 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002454:	201d      	movs	r0, #29
 8002456:	f000 fd5e 	bl	8002f16 <HAL_NVIC_EnableIRQ>
}
 800245a:	bf00      	nop
 800245c:	3730      	adds	r7, #48	; 0x30
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40010800 	.word	0x40010800
 800246c:	40010c00 	.word	0x40010c00
 8002470:	40010000 	.word	0x40010000
 8002474:	40000400 	.word	0x40000400

08002478 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <HAL_TIM_MspPostInit+0x98>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d119      	bne.n	80024cc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_TIM_MspPostInit+0x9c>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_TIM_MspPostInit+0x9c>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_TIM_MspPostInit+0x9c>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4619      	mov	r1, r3
 80024c4:	4814      	ldr	r0, [pc, #80]	; (8002518 <HAL_TIM_MspPostInit+0xa0>)
 80024c6:	f000 fd45 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80024ca:	e01d      	b.n	8002508 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_TIM_MspPostInit+0xa4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d118      	bne.n	8002508 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_TIM_MspPostInit+0x9c>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_TIM_MspPostInit+0x9c>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	6193      	str	r3, [r2, #24]
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_TIM_MspPostInit+0x9c>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4619      	mov	r1, r3
 8002502:	4807      	ldr	r0, [pc, #28]	; (8002520 <HAL_TIM_MspPostInit+0xa8>)
 8002504:	f000 fd26 	bl	8002f54 <HAL_GPIO_Init>
}
 8002508:	bf00      	nop
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40012c00 	.word	0x40012c00
 8002514:	40021000 	.word	0x40021000
 8002518:	40010800 	.word	0x40010800
 800251c:	40000800 	.word	0x40000800
 8002520:	40010c00 	.word	0x40010c00

08002524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_UART_MspInit+0x8c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d131      	bne.n	80025a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_UART_MspInit+0x90>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <HAL_UART_MspInit+0x90>)
 800254a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_UART_MspInit+0x90>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_UART_MspInit+0x90>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_UART_MspInit+0x90>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_UART_MspInit+0x90>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4619      	mov	r1, r3
 8002588:	480b      	ldr	r0, [pc, #44]	; (80025b8 <HAL_UART_MspInit+0x94>)
 800258a:	f000 fce3 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800258e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <HAL_UART_MspInit+0x94>)
 80025a4:	f000 fcd6 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025a8:	bf00      	nop
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40013800 	.word	0x40013800
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010800 	.word	0x40010800

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002602:	f000 f92d 	bl	8002860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <TIM2_IRQHandler+0x10>)
 8002612:	f002 fdf5 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000037c 	.word	0x2000037c

08002620 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <TIM3_IRQHandler+0x10>)
 8002626:	f002 fdeb 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003c4 	.word	0x200003c4

08002634 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return 1;
 8002638:	2301      	movs	r3, #1
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <_kill>:

int _kill(int pid, int sig)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800264c:	f004 fe9e 	bl	800738c <__errno>
 8002650:	4603      	mov	r3, r0
 8002652:	2216      	movs	r2, #22
 8002654:	601a      	str	r2, [r3, #0]
  return -1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_exit>:

void _exit (int status)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800266a:	f04f 31ff 	mov.w	r1, #4294967295
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffe7 	bl	8002642 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002674:	e7fe      	b.n	8002674 <_exit+0x12>

08002676 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e00a      	b.n	800269e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002688:	f3af 8000 	nop.w
 800268c:	4601      	mov	r1, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	60ba      	str	r2, [r7, #8]
 8002694:	b2ca      	uxtb	r2, r1
 8002696:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3301      	adds	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	dbf0      	blt.n	8002688 <_read+0x12>
  }

  return len;
 80026a6:	687b      	ldr	r3, [r7, #4]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026d6:	605a      	str	r2, [r3, #4]
  return 0;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <_isatty>:

int _isatty(int file)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026ec:	2301      	movs	r3, #1
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <_sbrk+0x5c>)
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <_sbrk+0x60>)
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <_sbrk+0x64>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <_sbrk+0x68>)
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	429a      	cmp	r2, r3
 800273e:	d207      	bcs.n	8002750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002740:	f004 fe24 	bl	800738c <__errno>
 8002744:	4603      	mov	r3, r0
 8002746:	220c      	movs	r2, #12
 8002748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e009      	b.n	8002764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <_sbrk+0x64>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	4a05      	ldr	r2, [pc, #20]	; (8002774 <_sbrk+0x64>)
 8002760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20005000 	.word	0x20005000
 8002770:	00000400 	.word	0x00000400
 8002774:	20000570 	.word	0x20000570
 8002778:	200006c8 	.word	0x200006c8

0800277c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002788:	f7ff fff8 	bl	800277c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800278c:	480b      	ldr	r0, [pc, #44]	; (80027bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800278e:	490c      	ldr	r1, [pc, #48]	; (80027c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002794:	e002      	b.n	800279c <LoopCopyDataInit>

08002796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279a:	3304      	adds	r3, #4

0800279c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800279c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a0:	d3f9      	bcc.n	8002796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027a4:	4c09      	ldr	r4, [pc, #36]	; (80027cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a8:	e001      	b.n	80027ae <LoopFillZerobss>

080027aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ac:	3204      	adds	r2, #4

080027ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b0:	d3fb      	bcc.n	80027aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027b2:	f004 fdf1 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027b6:	f7fe ff7f 	bl	80016b8 <main>
  bx lr
 80027ba:	4770      	bx	lr
  ldr r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c0:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80027c4:	0800af38 	.word	0x0800af38
  ldr r2, =_sbss
 80027c8:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80027cc:	200006c4 	.word	0x200006c4

080027d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC1_2_IRQHandler>
	...

080027d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_Init+0x28>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a07      	ldr	r2, [pc, #28]	; (80027fc <HAL_Init+0x28>)
 80027de:	f043 0310 	orr.w	r3, r3, #16
 80027e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e4:	2003      	movs	r0, #3
 80027e6:	f000 fb6f 	bl	8002ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ea:	200f      	movs	r0, #15
 80027ec:	f000 f808 	bl	8002800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f0:	f7ff fc92 	bl	8002118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40022000 	.word	0x40022000

08002800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_InitTick+0x54>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_InitTick+0x58>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002816:	fbb3 f3f1 	udiv	r3, r3, r1
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fb8b 	bl	8002f3a <HAL_SYSTICK_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00e      	b.n	800284c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d80a      	bhi.n	800284a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002834:	2200      	movs	r2, #0
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f000 fb4f 	bl	8002ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <HAL_InitTick+0x5c>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e000      	b.n	800284c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000078 	.word	0x20000078
 8002858:	20000080 	.word	0x20000080
 800285c:	2000007c 	.word	0x2000007c

08002860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_IncTick+0x1c>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_IncTick+0x20>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4413      	add	r3, r2
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_IncTick+0x20>)
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	20000080 	.word	0x20000080
 8002880:	20000574 	.word	0x20000574

08002884 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b02      	ldr	r3, [pc, #8]	; (8002894 <HAL_GetTick+0x10>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000574 	.word	0x20000574

08002898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7ff fff0 	bl	8002884 <HAL_GetTick>
 80028a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d005      	beq.n	80028be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_Delay+0x44>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028be:	bf00      	nop
 80028c0:	f7ff ffe0 	bl	8002884 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d8f7      	bhi.n	80028c0 <HAL_Delay+0x28>
  {
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000080 	.word	0x20000080

080028e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0be      	b.n	8002a80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fc2c 	bl	800217c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f9ab 	bl	8002c80 <ADC_ConversionStop_Disable>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 8099 	bne.w	8002a6e <HAL_ADC_Init+0x18e>
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 8095 	bne.w	8002a6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800294c:	f023 0302 	bic.w	r3, r3, #2
 8002950:	f043 0202 	orr.w	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002960:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7b1b      	ldrb	r3, [r3, #12]
 8002966:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002968:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	4313      	orrs	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002978:	d003      	beq.n	8002982 <HAL_ADC_Init+0xa2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d102      	bne.n	8002988 <HAL_ADC_Init+0xa8>
 8002982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002986:	e000      	b.n	800298a <HAL_ADC_Init+0xaa>
 8002988:	2300      	movs	r3, #0
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7d1b      	ldrb	r3, [r3, #20]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d119      	bne.n	80029cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7b1b      	ldrb	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	035a      	lsls	r2, r3, #13
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	e00b      	b.n	80029cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	430a      	orrs	r2, r1
 80029de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_ADC_Init+0x1a8>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fc:	d003      	beq.n	8002a06 <HAL_ADC_Init+0x126>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d104      	bne.n	8002a10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	051b      	lsls	r3, r3, #20
 8002a0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_ADC_Init+0x1ac>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d10b      	bne.n	8002a4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a4a:	e018      	b.n	8002a7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	f023 0312 	bic.w	r3, r3, #18
 8002a54:	f043 0210 	orr.w	r2, r3, #16
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a6c:	e007      	b.n	8002a7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	f043 0210 	orr.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	ffe1f7fd 	.word	0xffe1f7fd
 8002a8c:	ff1f0efe 	.word	0xff1f0efe

08002a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x20>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0dc      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x1da>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d81c      	bhi.n	8002afa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b05      	subs	r3, #5
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4019      	ands	r1, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	3b05      	subs	r3, #5
 8002aec:	fa00 f203 	lsl.w	r2, r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34
 8002af8:	e03c      	b.n	8002b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d81c      	bhi.n	8002b3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	3b23      	subs	r3, #35	; 0x23
 8002b14:	221f      	movs	r2, #31
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4019      	ands	r1, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3b23      	subs	r3, #35	; 0x23
 8002b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
 8002b3a:	e01b      	b.n	8002b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b41      	subs	r3, #65	; 0x41
 8002b4e:	221f      	movs	r2, #31
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	4019      	ands	r1, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	3b41      	subs	r3, #65	; 0x41
 8002b68:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	d91c      	bls.n	8002bb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68d9      	ldr	r1, [r3, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b1e      	subs	r3, #30
 8002b8e:	2207      	movs	r2, #7
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	4019      	ands	r1, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6898      	ldr	r0, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b1e      	subs	r3, #30
 8002ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	e019      	b.n	8002bea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6919      	ldr	r1, [r3, #16]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	4019      	ands	r1, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6898      	ldr	r0, [r3, #8]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d003      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bf6:	2b11      	cmp	r3, #17
 8002bf8:	d132      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d125      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d126      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d11a      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_ADC_ConfigChannel+0x1ec>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9a      	lsrs	r2, r3, #18
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x1b2>
 8002c4e:	e007      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40012400 	.word	0x40012400
 8002c78:	20000078 	.word	0x20000078
 8002c7c:	431bde83 	.word	0x431bde83

08002c80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d12e      	bne.n	8002cf8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002caa:	f7ff fdeb 	bl	8002884 <HAL_GetTick>
 8002cae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cb0:	e01b      	b.n	8002cea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cb2:	f7ff fde7 	bl	8002884 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d914      	bls.n	8002cea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10d      	bne.n	8002cea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	f043 0210 	orr.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e007      	b.n	8002cfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d0dc      	beq.n	8002cb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60d3      	str	r3, [r2, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db0b      	blt.n	8002d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4906      	ldr	r1, [pc, #24]	; (8002d9c <__NVIC_EnableIRQ+0x34>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	; (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	; (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	bf28      	it	cs
 8002e12:	2304      	movcs	r3, #4
 8002e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d902      	bls.n	8002e24 <NVIC_EncodePriority+0x30>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3b03      	subs	r3, #3
 8002e22:	e000      	b.n	8002e26 <NVIC_EncodePriority+0x32>
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43d9      	mvns	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	4313      	orrs	r3, r2
         );
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e5c:	f3bf 8f4f 	dsb	sy
}
 8002e60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <__NVIC_SystemReset+0x24>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e6a:	4904      	ldr	r1, [pc, #16]	; (8002e7c <__NVIC_SystemReset+0x24>)
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <__NVIC_SystemReset+0x28>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e72:	f3bf 8f4f 	dsb	sy
}
 8002e76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <__NVIC_SystemReset+0x20>
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	05fa0004 	.word	0x05fa0004

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e94:	d301      	bcc.n	8002e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00f      	b.n	8002eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <SysTick_Config+0x40>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f7ff ff7a 	bl	8002da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <SysTick_Config+0x40>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <SysTick_Config+0x40>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000e010 	.word	0xe000e010

08002ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff17 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef0:	f7ff ff2c 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff7a 	bl	8002df4 <NVIC_EncodePriority>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff49 	bl	8002da0 <__NVIC_SetPriority>
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff1f 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002f36:	f7ff ff8f 	bl	8002e58 <__NVIC_SystemReset>

08002f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ff9e 	bl	8002e84 <SysTick_Config>
 8002f48:	4603      	mov	r3, r0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b08b      	sub	sp, #44	; 0x2c
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f66:	e169      	b.n	800323c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f68:	2201      	movs	r2, #1
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f040 8158 	bne.w	8003236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a9a      	ldr	r2, [pc, #616]	; (80031f4 <HAL_GPIO_Init+0x2a0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d05e      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002f90:	4a98      	ldr	r2, [pc, #608]	; (80031f4 <HAL_GPIO_Init+0x2a0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d875      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002f96:	4a98      	ldr	r2, [pc, #608]	; (80031f8 <HAL_GPIO_Init+0x2a4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d058      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002f9c:	4a96      	ldr	r2, [pc, #600]	; (80031f8 <HAL_GPIO_Init+0x2a4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d86f      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fa2:	4a96      	ldr	r2, [pc, #600]	; (80031fc <HAL_GPIO_Init+0x2a8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d052      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fa8:	4a94      	ldr	r2, [pc, #592]	; (80031fc <HAL_GPIO_Init+0x2a8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d869      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fae:	4a94      	ldr	r2, [pc, #592]	; (8003200 <HAL_GPIO_Init+0x2ac>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04c      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fb4:	4a92      	ldr	r2, [pc, #584]	; (8003200 <HAL_GPIO_Init+0x2ac>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d863      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fba:	4a92      	ldr	r2, [pc, #584]	; (8003204 <HAL_GPIO_Init+0x2b0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d046      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fc0:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_GPIO_Init+0x2b0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d85d      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fc6:	2b12      	cmp	r3, #18
 8002fc8:	d82a      	bhi.n	8003020 <HAL_GPIO_Init+0xcc>
 8002fca:	2b12      	cmp	r3, #18
 8002fcc:	d859      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_GPIO_Init+0x80>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	0800304f 	.word	0x0800304f
 8002fd8:	08003029 	.word	0x08003029
 8002fdc:	0800303b 	.word	0x0800303b
 8002fe0:	0800307d 	.word	0x0800307d
 8002fe4:	08003083 	.word	0x08003083
 8002fe8:	08003083 	.word	0x08003083
 8002fec:	08003083 	.word	0x08003083
 8002ff0:	08003083 	.word	0x08003083
 8002ff4:	08003083 	.word	0x08003083
 8002ff8:	08003083 	.word	0x08003083
 8002ffc:	08003083 	.word	0x08003083
 8003000:	08003083 	.word	0x08003083
 8003004:	08003083 	.word	0x08003083
 8003008:	08003083 	.word	0x08003083
 800300c:	08003083 	.word	0x08003083
 8003010:	08003083 	.word	0x08003083
 8003014:	08003083 	.word	0x08003083
 8003018:	08003031 	.word	0x08003031
 800301c:	08003045 	.word	0x08003045
 8003020:	4a79      	ldr	r2, [pc, #484]	; (8003208 <HAL_GPIO_Init+0x2b4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003026:	e02c      	b.n	8003082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	623b      	str	r3, [r7, #32]
          break;
 800302e:	e029      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	3304      	adds	r3, #4
 8003036:	623b      	str	r3, [r7, #32]
          break;
 8003038:	e024      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	3308      	adds	r3, #8
 8003040:	623b      	str	r3, [r7, #32]
          break;
 8003042:	e01f      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	330c      	adds	r3, #12
 800304a:	623b      	str	r3, [r7, #32]
          break;
 800304c:	e01a      	b.n	8003084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003056:	2304      	movs	r3, #4
 8003058:	623b      	str	r3, [r7, #32]
          break;
 800305a:	e013      	b.n	8003084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003064:	2308      	movs	r3, #8
 8003066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	611a      	str	r2, [r3, #16]
          break;
 800306e:	e009      	b.n	8003084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003070:	2308      	movs	r3, #8
 8003072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	615a      	str	r2, [r3, #20]
          break;
 800307a:	e003      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
          break;
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0x130>
          break;
 8003082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2bff      	cmp	r3, #255	; 0xff
 8003088:	d801      	bhi.n	800308e <HAL_GPIO_Init+0x13a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_Init+0x13e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2bff      	cmp	r3, #255	; 0xff
 8003098:	d802      	bhi.n	80030a0 <HAL_GPIO_Init+0x14c>
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	e002      	b.n	80030a6 <HAL_GPIO_Init+0x152>
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	3b08      	subs	r3, #8
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	210f      	movs	r1, #15
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80b1 	beq.w	8003236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030d4:	4b4d      	ldr	r3, [pc, #308]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4a4c      	ldr	r2, [pc, #304]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6193      	str	r3, [r2, #24]
 80030e0:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030ec:	4a48      	ldr	r2, [pc, #288]	; (8003210 <HAL_GPIO_Init+0x2bc>)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a40      	ldr	r2, [pc, #256]	; (8003214 <HAL_GPIO_Init+0x2c0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_GPIO_Init+0x1ec>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3f      	ldr	r2, [pc, #252]	; (8003218 <HAL_GPIO_Init+0x2c4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00d      	beq.n	800313c <HAL_GPIO_Init+0x1e8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3e      	ldr	r2, [pc, #248]	; (800321c <HAL_GPIO_Init+0x2c8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <HAL_GPIO_Init+0x1e4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3d      	ldr	r2, [pc, #244]	; (8003220 <HAL_GPIO_Init+0x2cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_GPIO_Init+0x1e0>
 8003130:	2303      	movs	r3, #3
 8003132:	e006      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003134:	2304      	movs	r3, #4
 8003136:	e004      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003138:	2302      	movs	r3, #2
 800313a:	e002      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003140:	2300      	movs	r3, #0
 8003142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003144:	f002 0203 	and.w	r2, r2, #3
 8003148:	0092      	lsls	r2, r2, #2
 800314a:	4093      	lsls	r3, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003152:	492f      	ldr	r1, [pc, #188]	; (8003210 <HAL_GPIO_Init+0x2bc>)
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800316c:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	492c      	ldr	r1, [pc, #176]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	43db      	mvns	r3, r3
 8003182:	4928      	ldr	r1, [pc, #160]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003184:	4013      	ands	r3, r2
 8003186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	4922      	ldr	r1, [pc, #136]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	60cb      	str	r3, [r1, #12]
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	491e      	ldr	r1, [pc, #120]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	4918      	ldr	r1, [pc, #96]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4914      	ldr	r1, [pc, #80]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d021      	beq.n	8003228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	490e      	ldr	r1, [pc, #56]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e021      	b.n	8003236 <HAL_GPIO_Init+0x2e2>
 80031f2:	bf00      	nop
 80031f4:	10320000 	.word	0x10320000
 80031f8:	10310000 	.word	0x10310000
 80031fc:	10220000 	.word	0x10220000
 8003200:	10210000 	.word	0x10210000
 8003204:	10120000 	.word	0x10120000
 8003208:	10110000 	.word	0x10110000
 800320c:	40021000 	.word	0x40021000
 8003210:	40010000 	.word	0x40010000
 8003214:	40010800 	.word	0x40010800
 8003218:	40010c00 	.word	0x40010c00
 800321c:	40011000 	.word	0x40011000
 8003220:	40011400 	.word	0x40011400
 8003224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_GPIO_Init+0x304>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	43db      	mvns	r3, r3
 8003230:	4909      	ldr	r1, [pc, #36]	; (8003258 <HAL_GPIO_Init+0x304>)
 8003232:	4013      	ands	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	3301      	adds	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	f47f ae8e 	bne.w	8002f68 <HAL_GPIO_Init+0x14>
  }
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	372c      	adds	r7, #44	; 0x2c
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40010400 	.word	0x40010400

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
 8003268:	4613      	mov	r3, r2
 800326a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800326c:	787b      	ldrb	r3, [r7, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003278:	e003      	b.n	8003282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	041a      	lsls	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e12b      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe ffc8 	bl	8002248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f0:	f001 fbf0 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 80032f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a81      	ldr	r2, [pc, #516]	; (8003500 <HAL_I2C_Init+0x274>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d807      	bhi.n	8003310 <HAL_I2C_Init+0x84>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a80      	ldr	r2, [pc, #512]	; (8003504 <HAL_I2C_Init+0x278>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e006      	b.n	800331e <HAL_I2C_Init+0x92>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a7d      	ldr	r2, [pc, #500]	; (8003508 <HAL_I2C_Init+0x27c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0e7      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a78      	ldr	r2, [pc, #480]	; (800350c <HAL_I2C_Init+0x280>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9b      	lsrs	r3, r3, #18
 8003330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a6a      	ldr	r2, [pc, #424]	; (8003500 <HAL_I2C_Init+0x274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <HAL_I2C_Init+0xd4>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	e009      	b.n	8003374 <HAL_I2C_Init+0xe8>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a69      	ldr	r2, [pc, #420]	; (8003510 <HAL_I2C_Init+0x284>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	3301      	adds	r3, #1
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003386:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	495c      	ldr	r1, [pc, #368]	; (8003500 <HAL_I2C_Init+0x274>)
 8003390:	428b      	cmp	r3, r1
 8003392:	d819      	bhi.n	80033c8 <HAL_I2C_Init+0x13c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e59      	subs	r1, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033a8:	400b      	ands	r3, r1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_I2C_Init+0x138>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e59      	subs	r1, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	e051      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e04f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <HAL_I2C_Init+0x168>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e012      	b.n	800341a <HAL_I2C_Init+0x18e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	0099      	lsls	r1, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x196>
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <HAL_I2C_Init+0x1bc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e58      	subs	r0, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	440b      	add	r3, r1
 8003438:	fbb0 f3f3 	udiv	r3, r0, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	6809      	ldr	r1, [r1, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6911      	ldr	r1, [r2, #16]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	000186a0 	.word	0x000186a0
 8003504:	001e847f 	.word	0x001e847f
 8003508:	003d08ff 	.word	0x003d08ff
 800350c:	431bde83 	.word	0x431bde83
 8003510:	10624dd3 	.word	0x10624dd3

08003514 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4603      	mov	r3, r0
 8003524:	817b      	strh	r3, [r7, #10]
 8003526:	460b      	mov	r3, r1
 8003528:	813b      	strh	r3, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800352e:	f7ff f9a9 	bl	8002884 <HAL_GetTick>
 8003532:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	f040 80d9 	bne.w	80036f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2319      	movs	r3, #25
 8003548:	2201      	movs	r2, #1
 800354a:	496d      	ldr	r1, [pc, #436]	; (8003700 <HAL_I2C_Mem_Write+0x1ec>)
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fcc1 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
 800355a:	e0cc      	b.n	80036f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_I2C_Mem_Write+0x56>
 8003566:	2302      	movs	r3, #2
 8003568:	e0c5      	b.n	80036f6 <HAL_I2C_Mem_Write+0x1e2>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d007      	beq.n	8003590 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2221      	movs	r2, #33	; 0x21
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a4d      	ldr	r2, [pc, #308]	; (8003704 <HAL_I2C_Mem_Write+0x1f0>)
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035d2:	88f8      	ldrh	r0, [r7, #6]
 80035d4:	893a      	ldrh	r2, [r7, #8]
 80035d6:	8979      	ldrh	r1, [r7, #10]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4603      	mov	r3, r0
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 faf8 	bl	8003bd8 <I2C_RequestMemoryWrite>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d052      	beq.n	8003694 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e081      	b.n	80036f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fd86 	bl	8004108 <I2C_WaitOnTXEFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b04      	cmp	r3, #4
 8003608:	d107      	bne.n	800361a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06b      	b.n	80036f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <HAL_I2C_Mem_Write+0x180>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1aa      	bne.n	80035f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fd79 	bl	8004198 <I2C_WaitOnBTFFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e016      	b.n	80036f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	00100002 	.word	0x00100002
 8003704:	ffff0000 	.word	0xffff0000

08003708 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	; 0x30
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	4608      	mov	r0, r1
 8003712:	4611      	mov	r1, r2
 8003714:	461a      	mov	r2, r3
 8003716:	4603      	mov	r3, r0
 8003718:	817b      	strh	r3, [r7, #10]
 800371a:	460b      	mov	r3, r1
 800371c:	813b      	strh	r3, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003726:	f7ff f8ad 	bl	8002884 <HAL_GetTick>
 800372a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b20      	cmp	r3, #32
 8003736:	f040 8244 	bne.w	8003bc2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2319      	movs	r3, #25
 8003740:	2201      	movs	r2, #1
 8003742:	4982      	ldr	r1, [pc, #520]	; (800394c <HAL_I2C_Mem_Read+0x244>)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fbc5 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
 8003752:	e237      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Mem_Read+0x5a>
 800375e:	2302      	movs	r3, #2
 8003760:	e230      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d007      	beq.n	8003788 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2222      	movs	r2, #34	; 0x22
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a62      	ldr	r2, [pc, #392]	; (8003950 <HAL_I2C_Mem_Read+0x248>)
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ca:	88f8      	ldrh	r0, [r7, #6]
 80037cc:	893a      	ldrh	r2, [r7, #8]
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	4603      	mov	r3, r0
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa92 	bl	8003d04 <I2C_RequestMemoryRead>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1ec      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d113      	bne.n	800381a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e1c0      	b.n	8003b9c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b01      	cmp	r3, #1
 8003820:	d11e      	bne.n	8003860 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003830:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003832:	b672      	cpsid	i
}
 8003834:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800385c:	b662      	cpsie	i
}
 800385e:	e035      	b.n	80038cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	2b02      	cmp	r3, #2
 8003866:	d11e      	bne.n	80038a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003878:	b672      	cpsid	i
}
 800387a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038a2:	b662      	cpsie	i
}
 80038a4:	e012      	b.n	80038cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038cc:	e166      	b.n	8003b9c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	f200 811f 	bhi.w	8003b16 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d123      	bne.n	8003928 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fc9f 	bl	8004228 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e167      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003926:	e139      	b.n	8003b9c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	2b02      	cmp	r3, #2
 800392e:	d152      	bne.n	80039d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	2200      	movs	r2, #0
 8003938:	4906      	ldr	r1, [pc, #24]	; (8003954 <HAL_I2C_Mem_Read+0x24c>)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 faca 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e13c      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
 800394a:	bf00      	nop
 800394c:	00100002 	.word	0x00100002
 8003950:	ffff0000 	.word	0xffff0000
 8003954:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003958:	b672      	cpsid	i
}
 800395a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800399e:	b662      	cpsie	i
}
 80039a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d4:	e0e2      	b.n	8003b9c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2200      	movs	r2, #0
 80039de:	497b      	ldr	r1, [pc, #492]	; (8003bcc <HAL_I2C_Mem_Read+0x4c4>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa77 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0e9      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a00:	b672      	cpsid	i
}
 8003a02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a36:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_I2C_Mem_Read+0x4c8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	08db      	lsrs	r3, r3, #3
 8003a3c:	4a65      	ldr	r2, [pc, #404]	; (8003bd4 <HAL_I2C_Mem_Read+0x4cc>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0a1a      	lsrs	r2, r3, #8
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00da      	lsls	r2, r3, #3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d118      	bne.n	8003a8e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7e:	b662      	cpsie	i
}
 8003a80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e09a      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d1d9      	bne.n	8003a50 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ade:	b662      	cpsie	i
}
 8003ae0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b14:	e042      	b.n	8003b9c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fb84 	bl	8004228 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e04c      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d118      	bne.n	8003b9c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f ae94 	bne.w	80038ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3728      	adds	r7, #40	; 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	00010004 	.word	0x00010004
 8003bd0:	20000078 	.word	0x20000078
 8003bd4:	14f8b589 	.word	0x14f8b589

08003bd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	4608      	mov	r0, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	461a      	mov	r2, r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	817b      	strh	r3, [r7, #10]
 8003bea:	460b      	mov	r3, r1
 8003bec:	813b      	strh	r3, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f960 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c28:	d103      	bne.n	8003c32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e05f      	b.n	8003cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c36:	897b      	ldrh	r3, [r7, #10]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	492d      	ldr	r1, [pc, #180]	; (8003d00 <I2C_RequestMemoryWrite+0x128>)
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f9bb 	bl	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e04c      	b.n	8003cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	6a39      	ldr	r1, [r7, #32]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fa46 	bl	8004108 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d107      	bne.n	8003c9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e02b      	b.n	8003cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	e021      	b.n	8003cf4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	6a39      	ldr	r1, [r7, #32]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fa20 	bl	8004108 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d107      	bne.n	8003ce6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e005      	b.n	8003cf6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cea:	893b      	ldrh	r3, [r7, #8]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	00010002 	.word	0x00010002

08003d04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	817b      	strh	r3, [r7, #10]
 8003d16:	460b      	mov	r3, r1
 8003d18:	813b      	strh	r3, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f8c2 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d64:	d103      	bne.n	8003d6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0aa      	b.n	8003ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d72:	897b      	ldrh	r3, [r7, #10]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	6a3a      	ldr	r2, [r7, #32]
 8003d86:	4952      	ldr	r1, [pc, #328]	; (8003ed0 <I2C_RequestMemoryRead+0x1cc>)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f91d 	bl	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e097      	b.n	8003ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	6a39      	ldr	r1, [r7, #32]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f9a8 	bl	8004108 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d107      	bne.n	8003dd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e076      	b.n	8003ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d105      	bne.n	8003dec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003de0:	893b      	ldrh	r3, [r7, #8]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	611a      	str	r2, [r3, #16]
 8003dea:	e021      	b.n	8003e30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dec:	893b      	ldrh	r3, [r7, #8]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfc:	6a39      	ldr	r1, [r7, #32]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f982 	bl	8004108 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d107      	bne.n	8003e22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e050      	b.n	8003ec8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e26:	893b      	ldrh	r3, [r7, #8]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	6a39      	ldr	r1, [r7, #32]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f967 	bl	8004108 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d107      	bne.n	8003e58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e035      	b.n	8003ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f82b 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00d      	beq.n	8003ea0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e92:	d103      	bne.n	8003e9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e013      	b.n	8003ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ea0:	897b      	ldrh	r3, [r7, #10]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	4906      	ldr	r1, [pc, #24]	; (8003ed0 <I2C_RequestMemoryRead+0x1cc>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f886 	bl	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	00010002 	.word	0x00010002

08003ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee4:	e048      	b.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d044      	beq.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe fcc9 	bl	8002884 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d139      	bne.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d10d      	bne.n	8003f2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	e00c      	b.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	43da      	mvns	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d116      	bne.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e023      	b.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10d      	bne.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	e00c      	b.n	8003fb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d093      	beq.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd6:	e071      	b.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe6:	d123      	bne.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f043 0204 	orr.w	r2, r3, #4
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e067      	b.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d041      	beq.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004038:	f7fe fc24 	bl	8002884 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d302      	bcc.n	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d136      	bne.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d10c      	bne.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	43da      	mvns	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4013      	ands	r3, r2
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e00b      	b.n	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	43da      	mvns	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4013      	ands	r3, r2
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e021      	b.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10c      	bne.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e00b      	b.n	80040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	43da      	mvns	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f47f af6d 	bne.w	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004114:	e034      	b.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f8e3 	bl	80042e2 <I2C_IsAcknowledgeFailed>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e034      	b.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d028      	beq.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fe fba9 	bl	8002884 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d11d      	bne.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d016      	beq.n	8004180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d1c3      	bne.n	8004116 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041a4:	e034      	b.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f89b 	bl	80042e2 <I2C_IsAcknowledgeFailed>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e034      	b.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d028      	beq.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fe fb61 	bl	8002884 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d11d      	bne.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d016      	beq.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e007      	b.n	8004220 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b04      	cmp	r3, #4
 800421c:	d1c3      	bne.n	80041a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004234:	e049      	b.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b10      	cmp	r3, #16
 8004242:	d119      	bne.n	8004278 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0210 	mvn.w	r2, #16
 800424c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e030      	b.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004278:	f7fe fb04 	bl	8002884 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11d      	bne.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d016      	beq.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e007      	b.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d1ae      	bne.n	8004236 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f8:	d11b      	bne.n	8004332 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004302:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr
	...

08004340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e272      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8087 	beq.w	800446e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004360:	4b92      	ldr	r3, [pc, #584]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	2b04      	cmp	r3, #4
 800436a:	d00c      	beq.n	8004386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800436c:	4b8f      	ldr	r3, [pc, #572]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b08      	cmp	r3, #8
 8004376:	d112      	bne.n	800439e <HAL_RCC_OscConfig+0x5e>
 8004378:	4b8c      	ldr	r3, [pc, #560]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004384:	d10b      	bne.n	800439e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004386:	4b89      	ldr	r3, [pc, #548]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d06c      	beq.n	800446c <HAL_RCC_OscConfig+0x12c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d168      	bne.n	800446c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e24c      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x76>
 80043a8:	4b80      	ldr	r3, [pc, #512]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a7f      	ldr	r2, [pc, #508]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	e02e      	b.n	8004414 <HAL_RCC_OscConfig+0xd4>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x98>
 80043be:	4b7b      	ldr	r3, [pc, #492]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a7a      	ldr	r2, [pc, #488]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b78      	ldr	r3, [pc, #480]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a77      	ldr	r2, [pc, #476]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e01d      	b.n	8004414 <HAL_RCC_OscConfig+0xd4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e0:	d10c      	bne.n	80043fc <HAL_RCC_OscConfig+0xbc>
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a71      	ldr	r2, [pc, #452]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b6f      	ldr	r3, [pc, #444]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6e      	ldr	r2, [pc, #440]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e00b      	b.n	8004414 <HAL_RCC_OscConfig+0xd4>
 80043fc:	4b6b      	ldr	r3, [pc, #428]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6a      	ldr	r2, [pc, #424]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b68      	ldr	r3, [pc, #416]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a67      	ldr	r2, [pc, #412]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 800440e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d013      	beq.n	8004444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fe fa32 	bl	8002884 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fe fa2e 	bl	8002884 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e200      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	4b5d      	ldr	r3, [pc, #372]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0xe4>
 8004442:	e014      	b.n	800446e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fe fa1e 	bl	8002884 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444c:	f7fe fa1a 	bl	8002884 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	; 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e1ec      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445e:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x10c>
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d063      	beq.n	8004542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800447a:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004486:	4b49      	ldr	r3, [pc, #292]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b08      	cmp	r3, #8
 8004490:	d11c      	bne.n	80044cc <HAL_RCC_OscConfig+0x18c>
 8004492:	4b46      	ldr	r3, [pc, #280]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d116      	bne.n	80044cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449e:	4b43      	ldr	r3, [pc, #268]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_RCC_OscConfig+0x176>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e1c0      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b6:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4939      	ldr	r1, [pc, #228]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	e03a      	b.n	8004542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044da:	f7fe f9d3 	bl	8002884 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e2:	f7fe f9cf 	bl	8002884 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e1a1      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f4:	4b2d      	ldr	r3, [pc, #180]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4927      	ldr	r1, [pc, #156]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]
 8004514:	e015      	b.n	8004542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <HAL_RCC_OscConfig+0x270>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fe f9b2 	bl	8002884 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004524:	f7fe f9ae 	bl	8002884 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e180      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d03a      	beq.n	80045c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d019      	beq.n	800458a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455c:	f7fe f992 	bl	8002884 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004564:	f7fe f98e 	bl	8002884 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e160      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_RCC_OscConfig+0x26c>)
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004582:	2001      	movs	r0, #1
 8004584:	f000 face 	bl	8004b24 <RCC_Delay>
 8004588:	e01c      	b.n	80045c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004590:	f7fe f978 	bl	8002884 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004596:	e00f      	b.n	80045b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004598:	f7fe f974 	bl	8002884 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d908      	bls.n	80045b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e146      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	42420000 	.word	0x42420000
 80045b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b8:	4b92      	ldr	r3, [pc, #584]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e9      	bne.n	8004598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a6 	beq.w	800471e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d6:	4b8b      	ldr	r3, [pc, #556]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e2:	4b88      	ldr	r3, [pc, #544]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	4a87      	ldr	r2, [pc, #540]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ec:	61d3      	str	r3, [r2, #28]
 80045ee:	4b85      	ldr	r3, [pc, #532]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fe:	4b82      	ldr	r3, [pc, #520]	; (8004808 <HAL_RCC_OscConfig+0x4c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d118      	bne.n	800463c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800460a:	4b7f      	ldr	r3, [pc, #508]	; (8004808 <HAL_RCC_OscConfig+0x4c8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7e      	ldr	r2, [pc, #504]	; (8004808 <HAL_RCC_OscConfig+0x4c8>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004616:	f7fe f935 	bl	8002884 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fe f931 	bl	8002884 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b64      	cmp	r3, #100	; 0x64
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e103      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	4b75      	ldr	r3, [pc, #468]	; (8004808 <HAL_RCC_OscConfig+0x4c8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d106      	bne.n	8004652 <HAL_RCC_OscConfig+0x312>
 8004644:	4b6f      	ldr	r3, [pc, #444]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a6e      	ldr	r2, [pc, #440]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6213      	str	r3, [r2, #32]
 8004650:	e02d      	b.n	80046ae <HAL_RCC_OscConfig+0x36e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10c      	bne.n	8004674 <HAL_RCC_OscConfig+0x334>
 800465a:	4b6a      	ldr	r3, [pc, #424]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4a69      	ldr	r2, [pc, #420]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6213      	str	r3, [r2, #32]
 8004666:	4b67      	ldr	r3, [pc, #412]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4a66      	ldr	r2, [pc, #408]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6213      	str	r3, [r2, #32]
 8004672:	e01c      	b.n	80046ae <HAL_RCC_OscConfig+0x36e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2b05      	cmp	r3, #5
 800467a:	d10c      	bne.n	8004696 <HAL_RCC_OscConfig+0x356>
 800467c:	4b61      	ldr	r3, [pc, #388]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	4a60      	ldr	r2, [pc, #384]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004682:	f043 0304 	orr.w	r3, r3, #4
 8004686:	6213      	str	r3, [r2, #32]
 8004688:	4b5e      	ldr	r3, [pc, #376]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4a5d      	ldr	r2, [pc, #372]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6213      	str	r3, [r2, #32]
 8004694:	e00b      	b.n	80046ae <HAL_RCC_OscConfig+0x36e>
 8004696:	4b5b      	ldr	r3, [pc, #364]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4a5a      	ldr	r2, [pc, #360]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6213      	str	r3, [r2, #32]
 80046a2:	4b58      	ldr	r3, [pc, #352]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	4a57      	ldr	r2, [pc, #348]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d015      	beq.n	80046e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b6:	f7fe f8e5 	bl	8002884 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fe f8e1 	bl	8002884 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e0b1      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	4b4b      	ldr	r3, [pc, #300]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ee      	beq.n	80046be <HAL_RCC_OscConfig+0x37e>
 80046e0:	e014      	b.n	800470c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e2:	f7fe f8cf 	bl	8002884 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fe f8cb 	bl	8002884 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e09b      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004700:	4b40      	ldr	r3, [pc, #256]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ee      	bne.n	80046ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004712:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8087 	beq.w	8004836 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004728:	4b36      	ldr	r3, [pc, #216]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b08      	cmp	r3, #8
 8004732:	d061      	beq.n	80047f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d146      	bne.n	80047ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473c:	4b33      	ldr	r3, [pc, #204]	; (800480c <HAL_RCC_OscConfig+0x4cc>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7fe f89f 	bl	8002884 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474a:	f7fe f89b 	bl	8002884 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e06d      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475c:	4b29      	ldr	r3, [pc, #164]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004770:	d108      	bne.n	8004784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4921      	ldr	r1, [pc, #132]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004784:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a19      	ldr	r1, [r3, #32]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	430b      	orrs	r3, r1
 8004796:	491b      	ldr	r1, [pc, #108]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <HAL_RCC_OscConfig+0x4cc>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fe f86f 	bl	8002884 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047aa:	f7fe f86b 	bl	8002884 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e03d      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x46a>
 80047c8:	e035      	b.n	8004836 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_RCC_OscConfig+0x4cc>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe f858 	bl	8002884 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fe f854 	bl	8002884 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e026      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x498>
 80047f6:	e01e      	b.n	8004836 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e019      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
 8004804:	40021000 	.word	0x40021000
 8004808:	40007000 	.word	0x40007000
 800480c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_OscConfig+0x500>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	429a      	cmp	r2, r3
 8004822:	d106      	bne.n	8004832 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d001      	beq.n	8004836 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0d0      	b.n	80049fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d910      	bls.n	8004888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b67      	ldr	r3, [pc, #412]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 0207 	bic.w	r2, r3, #7
 800486e:	4965      	ldr	r1, [pc, #404]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0b8      	b.n	80049fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d020      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a58      	ldr	r2, [pc, #352]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a52      	ldr	r2, [pc, #328]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80048be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	494d      	ldr	r1, [pc, #308]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d040      	beq.n	8004964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d115      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e07f      	b.n	80049fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e073      	b.n	80049fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004912:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e06b      	b.n	80049fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004922:	4b39      	ldr	r3, [pc, #228]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f023 0203 	bic.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4936      	ldr	r1, [pc, #216]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004934:	f7fd ffa6 	bl	8002884 <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	e00a      	b.n	8004952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493c:	f7fd ffa2 	bl	8002884 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	; 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e053      	b.n	80049fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	4b2d      	ldr	r3, [pc, #180]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 020c 	and.w	r2, r3, #12
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	429a      	cmp	r2, r3
 8004962:	d1eb      	bne.n	800493c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004964:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d210      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 0207 	bic.w	r2, r3, #7
 800497a:	4922      	ldr	r1, [pc, #136]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e032      	b.n	80049fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4916      	ldr	r1, [pc, #88]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	490e      	ldr	r1, [pc, #56]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049d2:	f000 f821 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	490a      	ldr	r1, [pc, #40]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	5ccb      	ldrb	r3, [r1, r3]
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_ClockConfig+0x1cc>)
 80049ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1d0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd ff04 	bl	8002800 <HAL_InitTick>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	0800aad8 	.word	0x0800aad8
 8004a10:	20000078 	.word	0x20000078
 8004a14:	2000007c 	.word	0x2000007c

08004a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a32:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_RCC_GetSysClockFreq+0x94>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x30>
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_GetSysClockFreq+0x36>
 8004a46:	e027      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a4a:	613b      	str	r3, [r7, #16]
      break;
 8004a4c:	e027      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	0c9b      	lsrs	r3, r3, #18
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a58:	5cd3      	ldrb	r3, [r2, r3]
 8004a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d010      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a66:	4b11      	ldr	r3, [pc, #68]	; (8004aac <HAL_RCC_GetSysClockFreq+0x94>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0c5b      	lsrs	r3, r3, #17
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a72:	5cd3      	ldrb	r3, [r2, r3]
 8004a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a7a:	fb03 f202 	mul.w	r2, r3, r2
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e004      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a8c:	fb02 f303 	mul.w	r3, r2, r3
 8004a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	613b      	str	r3, [r7, #16]
      break;
 8004a96:	e002      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a9a:	613b      	str	r3, [r7, #16]
      break;
 8004a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a9e:	693b      	ldr	r3, [r7, #16]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	007a1200 	.word	0x007a1200
 8004ab4:	0800aaf0 	.word	0x0800aaf0
 8004ab8:	0800ab00 	.word	0x0800ab00
 8004abc:	003d0900 	.word	0x003d0900

08004ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac4:	4b02      	ldr	r3, [pc, #8]	; (8004ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr
 8004ad0:	20000078 	.word	0x20000078

08004ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ad8:	f7ff fff2 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	0a1b      	lsrs	r3, r3, #8
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4903      	ldr	r1, [pc, #12]	; (8004af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40021000 	.word	0x40021000
 8004af8:	0800aae8 	.word	0x0800aae8

08004afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b00:	f7ff ffde 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	0adb      	lsrs	r3, r3, #11
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	; (8004b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	0800aae8 	.word	0x0800aae8

08004b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <RCC_Delay+0x34>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <RCC_Delay+0x38>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	0a5b      	lsrs	r3, r3, #9
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b40:	bf00      	nop
  }
  while (Delay --);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1e5a      	subs	r2, r3, #1
 8004b46:	60fa      	str	r2, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f9      	bne.n	8004b40 <RCC_Delay+0x1c>
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	20000078 	.word	0x20000078
 8004b5c:	10624dd3 	.word	0x10624dd3

08004b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d07d      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b80:	4b4f      	ldr	r3, [pc, #316]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10d      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8c:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	4a4b      	ldr	r2, [pc, #300]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b96:	61d3      	str	r3, [r2, #28]
 8004b98:	4b49      	ldr	r3, [pc, #292]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba8:	4b46      	ldr	r3, [pc, #280]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d118      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb4:	4b43      	ldr	r3, [pc, #268]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a42      	ldr	r2, [pc, #264]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc0:	f7fd fe60 	bl	8002884 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc6:	e008      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc8:	f7fd fe5c 	bl	8002884 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b64      	cmp	r3, #100	; 0x64
 8004bd4:	d901      	bls.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e06d      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bda:	4b3a      	ldr	r3, [pc, #232]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004be6:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d02e      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d027      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c04:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c0e:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c14:	4b2c      	ldr	r3, [pc, #176]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c1a:	4a29      	ldr	r2, [pc, #164]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d014      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2a:	f7fd fe2b 	bl	8002884 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fd fe27 	bl	8002884 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e036      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c48:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ee      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c54:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4917      	ldr	r1, [pc, #92]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c84:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	490b      	ldr	r1, [pc, #44]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	4904      	ldr	r1, [pc, #16]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	42420440 	.word	0x42420440

08004ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e041      	b.n	8004d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd fae6 	bl	80022c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f000 fd2e 	bl	800576c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e041      	b.n	8004e00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f839 	bl	8004e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3304      	adds	r3, #4
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f000 fcdf 	bl	800576c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_TIM_PWM_Start+0x24>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e022      	b.n	8004e86 <HAL_TIM_PWM_Start+0x6a>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d109      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x3e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	bf14      	ite	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	2300      	moveq	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	e015      	b.n	8004e86 <HAL_TIM_PWM_Start+0x6a>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d109      	bne.n	8004e74 <HAL_TIM_PWM_Start+0x58>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	e008      	b.n	8004e86 <HAL_TIM_PWM_Start+0x6a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	bf14      	ite	ne
 8004e80:	2301      	movne	r3, #1
 8004e82:	2300      	moveq	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e05e      	b.n	8004f4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_PWM_Start+0x82>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9c:	e013      	b.n	8004ec6 <HAL_TIM_PWM_Start+0xaa>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_PWM_Start+0x92>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eac:	e00b      	b.n	8004ec6 <HAL_TIM_PWM_Start+0xaa>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_PWM_Start+0xa2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ebc:	e003      	b.n	8004ec6 <HAL_TIM_PWM_Start+0xaa>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fecc 	bl	8005c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <HAL_TIM_PWM_Start+0x138>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d107      	bne.n	8004eee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_TIM_PWM_Start+0x138>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00e      	beq.n	8004f16 <HAL_TIM_PWM_Start+0xfa>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f00:	d009      	beq.n	8004f16 <HAL_TIM_PWM_Start+0xfa>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <HAL_TIM_PWM_Start+0x13c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_TIM_PWM_Start+0xfa>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a12      	ldr	r2, [pc, #72]	; (8004f5c <HAL_TIM_PWM_Start+0x140>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d111      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d010      	beq.n	8004f4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	e007      	b.n	8004f4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800

08004f60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e093      	b.n	800509c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fd f9cd 	bl	8002328 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa4:	f023 0307 	bic.w	r3, r3, #7
 8004fa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 fbd9 	bl	800576c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005000:	f023 030c 	bic.w	r3, r3, #12
 8005004:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800500c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	4313      	orrs	r3, r2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	011a      	lsls	r2, r3, #4
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	031b      	lsls	r3, r3, #12
 8005030:	4313      	orrs	r3, r2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4313      	orrs	r3, r2
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d110      	bne.n	80050f6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050da:	7b7b      	ldrb	r3, [r7, #13]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d001      	beq.n	80050e4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e089      	b.n	80051f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f4:	e031      	b.n	800515a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d110      	bne.n	800511e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d102      	bne.n	8005108 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005102:	7b3b      	ldrb	r3, [r7, #12]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e075      	b.n	80051f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800511c:	e01d      	b.n	800515a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d108      	bne.n	8005136 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d105      	bne.n	8005136 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800512a:	7b7b      	ldrb	r3, [r7, #13]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d102      	bne.n	8005136 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005130:	7b3b      	ldrb	r3, [r7, #12]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d001      	beq.n	800513a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e05e      	b.n	80051f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d010      	beq.n	8005188 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005166:	e01f      	b.n	80051a8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2201      	movs	r2, #1
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fd7b 	bl	8005c6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0202 	orr.w	r2, r2, #2
 8005184:	60da      	str	r2, [r3, #12]
      break;
 8005186:	e02e      	b.n	80051e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2201      	movs	r2, #1
 800518e:	2104      	movs	r1, #4
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fd6b 	bl	8005c6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0204 	orr.w	r2, r2, #4
 80051a4:	60da      	str	r2, [r3, #12]
      break;
 80051a6:	e01e      	b.n	80051e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	2100      	movs	r1, #0
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fd5b 	bl	8005c6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2201      	movs	r2, #1
 80051bc:	2104      	movs	r1, #4
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fd54 	bl	8005c6c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0202 	orr.w	r2, r2, #2
 80051d2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0204 	orr.w	r2, r2, #4
 80051e2:	60da      	str	r2, [r3, #12]
      break;
 80051e4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d122      	bne.n	800525c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d11b      	bne.n	800525c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0202 	mvn.w	r2, #2
 800522c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc f9f6 	bl	8001634 <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa72 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fa78 	bl	8005746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d122      	bne.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0204 	mvn.w	r2, #4
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc f9cc 	bl	8001634 <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fa48 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fa4e 	bl	8005746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0208 	mvn.w	r2, #8
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2204      	movs	r2, #4
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc f9a2 	bl	8001634 <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fa1e 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fa24 	bl	8005746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b10      	cmp	r3, #16
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b10      	cmp	r3, #16
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0210 	mvn.w	r2, #16
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2208      	movs	r2, #8
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc f978 	bl	8001634 <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f9f4 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f9fa 	bl	8005746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0201 	mvn.w	r2, #1
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9cf 	bl	8005722 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d10e      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fd3a 	bl	8005e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f9be 	bl	8005758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d10e      	bne.n	8005408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d107      	bne.n	8005408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0220 	mvn.w	r2, #32
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fd05 	bl	8005e12 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800542a:	2302      	movs	r3, #2
 800542c:	e0ae      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b0c      	cmp	r3, #12
 800543a:	f200 809f 	bhi.w	800557c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005479 	.word	0x08005479
 8005448:	0800557d 	.word	0x0800557d
 800544c:	0800557d 	.word	0x0800557d
 8005450:	0800557d 	.word	0x0800557d
 8005454:	080054b9 	.word	0x080054b9
 8005458:	0800557d 	.word	0x0800557d
 800545c:	0800557d 	.word	0x0800557d
 8005460:	0800557d 	.word	0x0800557d
 8005464:	080054fb 	.word	0x080054fb
 8005468:	0800557d 	.word	0x0800557d
 800546c:	0800557d 	.word	0x0800557d
 8005470:	0800557d 	.word	0x0800557d
 8005474:	0800553b 	.word	0x0800553b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f9d6 	bl	8005830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0208 	orr.w	r2, r2, #8
 8005492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0204 	bic.w	r2, r2, #4
 80054a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	619a      	str	r2, [r3, #24]
      break;
 80054b6:	e064      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fa1c 	bl	80058fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6999      	ldr	r1, [r3, #24]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	021a      	lsls	r2, r3, #8
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	619a      	str	r2, [r3, #24]
      break;
 80054f8:	e043      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fa65 	bl	80059d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0208 	orr.w	r2, r2, #8
 8005514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0204 	bic.w	r2, r2, #4
 8005524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	61da      	str	r2, [r3, #28]
      break;
 8005538:	e023      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 faaf 	bl	8005aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69d9      	ldr	r1, [r3, #28]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	021a      	lsls	r2, r3, #8
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	61da      	str	r2, [r3, #28]
      break;
 800557a:	e002      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
      break;
 8005580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIM_ConfigClockSource+0x1c>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e0b4      	b.n	800571a <HAL_TIM_ConfigClockSource+0x186>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e8:	d03e      	beq.n	8005668 <HAL_TIM_ConfigClockSource+0xd4>
 80055ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ee:	f200 8087 	bhi.w	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	f000 8086 	beq.w	8005706 <HAL_TIM_ConfigClockSource+0x172>
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fe:	d87f      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b70      	cmp	r3, #112	; 0x70
 8005602:	d01a      	beq.n	800563a <HAL_TIM_ConfigClockSource+0xa6>
 8005604:	2b70      	cmp	r3, #112	; 0x70
 8005606:	d87b      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b60      	cmp	r3, #96	; 0x60
 800560a:	d050      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x11a>
 800560c:	2b60      	cmp	r3, #96	; 0x60
 800560e:	d877      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b50      	cmp	r3, #80	; 0x50
 8005612:	d03c      	beq.n	800568e <HAL_TIM_ConfigClockSource+0xfa>
 8005614:	2b50      	cmp	r3, #80	; 0x50
 8005616:	d873      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d058      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x13a>
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d86f      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b30      	cmp	r3, #48	; 0x30
 8005622:	d064      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x15a>
 8005624:	2b30      	cmp	r3, #48	; 0x30
 8005626:	d86b      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b20      	cmp	r3, #32
 800562a:	d060      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b20      	cmp	r3, #32
 800562e:	d867      	bhi.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d05c      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x15a>
 8005634:	2b10      	cmp	r3, #16
 8005636:	d05a      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x15a>
 8005638:	e062      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800564a:	f000 faf0 	bl	8005c2e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800565c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	609a      	str	r2, [r3, #8]
      break;
 8005666:	e04f      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005678:	f000 fad9 	bl	8005c2e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568a:	609a      	str	r2, [r3, #8]
      break;
 800568c:	e03c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	461a      	mov	r2, r3
 800569c:	f000 fa50 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2150      	movs	r1, #80	; 0x50
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 faa7 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80056ac:	e02c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ba:	461a      	mov	r2, r3
 80056bc:	f000 fa6e 	bl	8005b9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2160      	movs	r1, #96	; 0x60
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fa97 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80056cc:	e01c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056da:	461a      	mov	r2, r3
 80056dc:	f000 fa30 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2140      	movs	r1, #64	; 0x40
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fa87 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80056ec:	e00c      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f000 fa7e 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80056fe:	e003      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
      break;
 8005704:	e000      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
	...

0800576c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a29      	ldr	r2, [pc, #164]	; (8005824 <TIM_Base_SetConfig+0xb8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_Base_SetConfig+0x30>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578a:	d007      	beq.n	800579c <TIM_Base_SetConfig+0x30>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a26      	ldr	r2, [pc, #152]	; (8005828 <TIM_Base_SetConfig+0xbc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_Base_SetConfig+0x30>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a25      	ldr	r2, [pc, #148]	; (800582c <TIM_Base_SetConfig+0xc0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d108      	bne.n	80057ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <TIM_Base_SetConfig+0xb8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_Base_SetConfig+0x62>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d007      	beq.n	80057ce <TIM_Base_SetConfig+0x62>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <TIM_Base_SetConfig+0xbc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_Base_SetConfig+0x62>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a18      	ldr	r2, [pc, #96]	; (800582c <TIM_Base_SetConfig+0xc0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <TIM_Base_SetConfig+0xb8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d103      	bne.n	8005814 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	615a      	str	r2, [r3, #20]
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800

08005830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f023 0201 	bic.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 0302 	bic.w	r3, r3, #2
 8005878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <TIM_OC1_SetConfig+0xc8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d10c      	bne.n	80058a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0308 	bic.w	r3, r3, #8
 8005892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 0304 	bic.w	r3, r3, #4
 80058a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <TIM_OC1_SetConfig+0xc8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d111      	bne.n	80058d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	621a      	str	r2, [r3, #32]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40012c00 	.word	0x40012c00

080058fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f023 0210 	bic.w	r2, r3, #16
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 0320 	bic.w	r3, r3, #32
 8005946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a1d      	ldr	r2, [pc, #116]	; (80059cc <TIM_OC2_SetConfig+0xd0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d10d      	bne.n	8005978 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a14      	ldr	r2, [pc, #80]	; (80059cc <TIM_OC2_SetConfig+0xd0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d113      	bne.n	80059a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800598e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr
 80059cc:	40012c00 	.word	0x40012c00

080059d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <TIM_OC3_SetConfig+0xd0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d10d      	bne.n	8005a4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <TIM_OC3_SetConfig+0xd0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d113      	bne.n	8005a7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	621a      	str	r2, [r3, #32]
}
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40012c00 	.word	0x40012c00

08005aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a0f      	ldr	r2, [pc, #60]	; (8005b3c <TIM_OC4_SetConfig+0x98>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d109      	bne.n	8005b18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr
 8005b3c:	40012c00 	.word	0x40012c00

08005b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0201 	bic.w	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 030a 	bic.w	r3, r3, #10
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0210 	bic.w	r2, r3, #16
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	031b      	lsls	r3, r3, #12
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	621a      	str	r2, [r3, #32]
}
 8005bf0:	bf00      	nop
 8005bf2:	371c      	adds	r7, #28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f043 0307 	orr.w	r3, r3, #7
 8005c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	609a      	str	r2, [r3, #8]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	021a      	lsls	r2, r3, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	609a      	str	r2, [r3, #8]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2201      	movs	r2, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1a      	ldr	r2, [r3, #32]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	401a      	ands	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e046      	b.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d18:	d009      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d10c      	bne.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800

08005d70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e03d      	b.n	8005e08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e042      	b.n	8005ece <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fc fb61 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2224      	movs	r2, #36	; 0x24
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f91c 	bl	80060b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b08a      	sub	sp, #40	; 0x28
 8005eda:	af02      	add	r7, sp, #8
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d16d      	bne.n	8005fd2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_UART_Transmit+0x2c>
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e066      	b.n	8005fd4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2221      	movs	r2, #33	; 0x21
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f14:	f7fc fcb6 	bl	8002884 <HAL_GetTick>
 8005f18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	88fa      	ldrh	r2, [r7, #6]
 8005f24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2e:	d108      	bne.n	8005f42 <HAL_UART_Transmit+0x6c>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e003      	b.n	8005f4a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f4a:	e02a      	b.n	8005fa2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f840 	bl	8005fdc <UART_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e036      	b.n	8005fd4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10b      	bne.n	8005f84 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	3302      	adds	r3, #2
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e007      	b.n	8005f94 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	3301      	adds	r3, #1
 8005f92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1cf      	bne.n	8005f4c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2140      	movs	r1, #64	; 0x40
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f810 	bl	8005fdc <UART_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e006      	b.n	8005fd4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e000      	b.n	8005fd4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
  }
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b090      	sub	sp, #64	; 0x40
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fec:	e050      	b.n	8006090 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d04c      	beq.n	8006090 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <UART_WaitOnFlagUntilTimeout+0x30>
 8005ffc:	f7fc fc42 	bl	8002884 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006008:	429a      	cmp	r2, r3
 800600a:	d241      	bcs.n	8006090 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800602c:	637a      	str	r2, [r7, #52]	; 0x34
 800602e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	613b      	str	r3, [r7, #16]
   return(result);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	63bb      	str	r3, [r7, #56]	; 0x38
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3314      	adds	r3, #20
 800605e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006060:	623a      	str	r2, [r7, #32]
 8006062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	61bb      	str	r3, [r7, #24]
   return(result);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e5      	bne.n	8006040 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e00f      	b.n	80060b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d09f      	beq.n	8005fee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3740      	adds	r7, #64	; 0x40
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060f2:	f023 030c 	bic.w	r3, r3, #12
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	430b      	orrs	r3, r1
 80060fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2c      	ldr	r2, [pc, #176]	; (80061cc <UART_SetConfig+0x114>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d103      	bne.n	8006128 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006120:	f7fe fcec 	bl	8004afc <HAL_RCC_GetPCLK2Freq>
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	e002      	b.n	800612e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fe fcd4 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 800612c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009a      	lsls	r2, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <UART_SetConfig+0x118>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	0119      	lsls	r1, r3, #4
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009a      	lsls	r2, r3, #2
 8006158:	441a      	add	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	fbb2 f2f3 	udiv	r2, r2, r3
 8006164:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <UART_SetConfig+0x118>)
 8006166:	fba3 0302 	umull	r0, r3, r3, r2
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	2064      	movs	r0, #100	; 0x64
 800616e:	fb00 f303 	mul.w	r3, r0, r3
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	3332      	adds	r3, #50	; 0x32
 8006178:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <UART_SetConfig+0x118>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006184:	4419      	add	r1, r3
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009a      	lsls	r2, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	fbb2 f2f3 	udiv	r2, r2, r3
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <UART_SetConfig+0x118>)
 800619e:	fba3 0302 	umull	r0, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2064      	movs	r0, #100	; 0x64
 80061a6:	fb00 f303 	mul.w	r3, r0, r3
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	3332      	adds	r3, #50	; 0x32
 80061b0:	4a07      	ldr	r2, [pc, #28]	; (80061d0 <UART_SetConfig+0x118>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f003 020f 	and.w	r2, r3, #15
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	440a      	add	r2, r1
 80061c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40013800 	.word	0x40013800
 80061d0:	51eb851f 	.word	0x51eb851f

080061d4 <__cvt>:
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061da:	461f      	mov	r7, r3
 80061dc:	bfbb      	ittet	lt
 80061de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80061e2:	461f      	movlt	r7, r3
 80061e4:	2300      	movge	r3, #0
 80061e6:	232d      	movlt	r3, #45	; 0x2d
 80061e8:	b088      	sub	sp, #32
 80061ea:	4614      	mov	r4, r2
 80061ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80061f0:	7013      	strb	r3, [r2, #0]
 80061f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80061f8:	f023 0820 	bic.w	r8, r3, #32
 80061fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006200:	d005      	beq.n	800620e <__cvt+0x3a>
 8006202:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006206:	d100      	bne.n	800620a <__cvt+0x36>
 8006208:	3501      	adds	r5, #1
 800620a:	2302      	movs	r3, #2
 800620c:	e000      	b.n	8006210 <__cvt+0x3c>
 800620e:	2303      	movs	r3, #3
 8006210:	aa07      	add	r2, sp, #28
 8006212:	9204      	str	r2, [sp, #16]
 8006214:	aa06      	add	r2, sp, #24
 8006216:	e9cd a202 	strd	sl, r2, [sp, #8]
 800621a:	e9cd 3500 	strd	r3, r5, [sp]
 800621e:	4622      	mov	r2, r4
 8006220:	463b      	mov	r3, r7
 8006222:	f001 f989 	bl	8007538 <_dtoa_r>
 8006226:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800622a:	4606      	mov	r6, r0
 800622c:	d102      	bne.n	8006234 <__cvt+0x60>
 800622e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006230:	07db      	lsls	r3, r3, #31
 8006232:	d522      	bpl.n	800627a <__cvt+0xa6>
 8006234:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006238:	eb06 0905 	add.w	r9, r6, r5
 800623c:	d110      	bne.n	8006260 <__cvt+0x8c>
 800623e:	7833      	ldrb	r3, [r6, #0]
 8006240:	2b30      	cmp	r3, #48	; 0x30
 8006242:	d10a      	bne.n	800625a <__cvt+0x86>
 8006244:	2200      	movs	r2, #0
 8006246:	2300      	movs	r3, #0
 8006248:	4620      	mov	r0, r4
 800624a:	4639      	mov	r1, r7
 800624c:	f7fa fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8006250:	b918      	cbnz	r0, 800625a <__cvt+0x86>
 8006252:	f1c5 0501 	rsb	r5, r5, #1
 8006256:	f8ca 5000 	str.w	r5, [sl]
 800625a:	f8da 3000 	ldr.w	r3, [sl]
 800625e:	4499      	add	r9, r3
 8006260:	2200      	movs	r2, #0
 8006262:	2300      	movs	r3, #0
 8006264:	4620      	mov	r0, r4
 8006266:	4639      	mov	r1, r7
 8006268:	f7fa fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800626c:	b108      	cbz	r0, 8006272 <__cvt+0x9e>
 800626e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006272:	2230      	movs	r2, #48	; 0x30
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	454b      	cmp	r3, r9
 8006278:	d307      	bcc.n	800628a <__cvt+0xb6>
 800627a:	4630      	mov	r0, r6
 800627c:	9b07      	ldr	r3, [sp, #28]
 800627e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006280:	1b9b      	subs	r3, r3, r6
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	b008      	add	sp, #32
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	1c59      	adds	r1, r3, #1
 800628c:	9107      	str	r1, [sp, #28]
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e7f0      	b.n	8006274 <__cvt+0xa0>

08006292 <__exponent>:
 8006292:	4603      	mov	r3, r0
 8006294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006296:	2900      	cmp	r1, #0
 8006298:	f803 2b02 	strb.w	r2, [r3], #2
 800629c:	bfb6      	itet	lt
 800629e:	222d      	movlt	r2, #45	; 0x2d
 80062a0:	222b      	movge	r2, #43	; 0x2b
 80062a2:	4249      	neglt	r1, r1
 80062a4:	2909      	cmp	r1, #9
 80062a6:	7042      	strb	r2, [r0, #1]
 80062a8:	dd2a      	ble.n	8006300 <__exponent+0x6e>
 80062aa:	f10d 0207 	add.w	r2, sp, #7
 80062ae:	4617      	mov	r7, r2
 80062b0:	260a      	movs	r6, #10
 80062b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80062b6:	4694      	mov	ip, r2
 80062b8:	fb06 1415 	mls	r4, r6, r5, r1
 80062bc:	3430      	adds	r4, #48	; 0x30
 80062be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80062c2:	460c      	mov	r4, r1
 80062c4:	2c63      	cmp	r4, #99	; 0x63
 80062c6:	4629      	mov	r1, r5
 80062c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80062cc:	dcf1      	bgt.n	80062b2 <__exponent+0x20>
 80062ce:	3130      	adds	r1, #48	; 0x30
 80062d0:	f1ac 0402 	sub.w	r4, ip, #2
 80062d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80062d8:	4622      	mov	r2, r4
 80062da:	1c41      	adds	r1, r0, #1
 80062dc:	42ba      	cmp	r2, r7
 80062de:	d30a      	bcc.n	80062f6 <__exponent+0x64>
 80062e0:	f10d 0209 	add.w	r2, sp, #9
 80062e4:	eba2 020c 	sub.w	r2, r2, ip
 80062e8:	42bc      	cmp	r4, r7
 80062ea:	bf88      	it	hi
 80062ec:	2200      	movhi	r2, #0
 80062ee:	4413      	add	r3, r2
 80062f0:	1a18      	subs	r0, r3, r0
 80062f2:	b003      	add	sp, #12
 80062f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80062fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80062fe:	e7ed      	b.n	80062dc <__exponent+0x4a>
 8006300:	2330      	movs	r3, #48	; 0x30
 8006302:	3130      	adds	r1, #48	; 0x30
 8006304:	7083      	strb	r3, [r0, #2]
 8006306:	70c1      	strb	r1, [r0, #3]
 8006308:	1d03      	adds	r3, r0, #4
 800630a:	e7f1      	b.n	80062f0 <__exponent+0x5e>

0800630c <_printf_float>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	b091      	sub	sp, #68	; 0x44
 8006312:	460c      	mov	r4, r1
 8006314:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006318:	4616      	mov	r6, r2
 800631a:	461f      	mov	r7, r3
 800631c:	4605      	mov	r5, r0
 800631e:	f000 ffeb 	bl	80072f8 <_localeconv_r>
 8006322:	6803      	ldr	r3, [r0, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	9309      	str	r3, [sp, #36]	; 0x24
 8006328:	f7f9 ff12 	bl	8000150 <strlen>
 800632c:	2300      	movs	r3, #0
 800632e:	930e      	str	r3, [sp, #56]	; 0x38
 8006330:	f8d8 3000 	ldr.w	r3, [r8]
 8006334:	900a      	str	r0, [sp, #40]	; 0x28
 8006336:	3307      	adds	r3, #7
 8006338:	f023 0307 	bic.w	r3, r3, #7
 800633c:	f103 0208 	add.w	r2, r3, #8
 8006340:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006344:	f8d4 b000 	ldr.w	fp, [r4]
 8006348:	f8c8 2000 	str.w	r2, [r8]
 800634c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006350:	4652      	mov	r2, sl
 8006352:	4643      	mov	r3, r8
 8006354:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006358:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800635c:	930b      	str	r3, [sp, #44]	; 0x2c
 800635e:	f04f 32ff 	mov.w	r2, #4294967295
 8006362:	4650      	mov	r0, sl
 8006364:	4b9c      	ldr	r3, [pc, #624]	; (80065d8 <_printf_float+0x2cc>)
 8006366:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006368:	f7fa fb50 	bl	8000a0c <__aeabi_dcmpun>
 800636c:	bb70      	cbnz	r0, 80063cc <_printf_float+0xc0>
 800636e:	f04f 32ff 	mov.w	r2, #4294967295
 8006372:	4650      	mov	r0, sl
 8006374:	4b98      	ldr	r3, [pc, #608]	; (80065d8 <_printf_float+0x2cc>)
 8006376:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006378:	f7fa fb2a 	bl	80009d0 <__aeabi_dcmple>
 800637c:	bb30      	cbnz	r0, 80063cc <_printf_float+0xc0>
 800637e:	2200      	movs	r2, #0
 8006380:	2300      	movs	r3, #0
 8006382:	4650      	mov	r0, sl
 8006384:	4641      	mov	r1, r8
 8006386:	f7fa fb19 	bl	80009bc <__aeabi_dcmplt>
 800638a:	b110      	cbz	r0, 8006392 <_printf_float+0x86>
 800638c:	232d      	movs	r3, #45	; 0x2d
 800638e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006392:	4a92      	ldr	r2, [pc, #584]	; (80065dc <_printf_float+0x2d0>)
 8006394:	4b92      	ldr	r3, [pc, #584]	; (80065e0 <_printf_float+0x2d4>)
 8006396:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800639a:	bf94      	ite	ls
 800639c:	4690      	movls	r8, r2
 800639e:	4698      	movhi	r8, r3
 80063a0:	2303      	movs	r3, #3
 80063a2:	f04f 0a00 	mov.w	sl, #0
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	f02b 0304 	bic.w	r3, fp, #4
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	4633      	mov	r3, r6
 80063b0:	4621      	mov	r1, r4
 80063b2:	4628      	mov	r0, r5
 80063b4:	9700      	str	r7, [sp, #0]
 80063b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80063b8:	f000 f9d6 	bl	8006768 <_printf_common>
 80063bc:	3001      	adds	r0, #1
 80063be:	f040 8090 	bne.w	80064e2 <_printf_float+0x1d6>
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295
 80063c6:	b011      	add	sp, #68	; 0x44
 80063c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063cc:	4652      	mov	r2, sl
 80063ce:	4643      	mov	r3, r8
 80063d0:	4650      	mov	r0, sl
 80063d2:	4641      	mov	r1, r8
 80063d4:	f7fa fb1a 	bl	8000a0c <__aeabi_dcmpun>
 80063d8:	b148      	cbz	r0, 80063ee <_printf_float+0xe2>
 80063da:	f1b8 0f00 	cmp.w	r8, #0
 80063de:	bfb8      	it	lt
 80063e0:	232d      	movlt	r3, #45	; 0x2d
 80063e2:	4a80      	ldr	r2, [pc, #512]	; (80065e4 <_printf_float+0x2d8>)
 80063e4:	bfb8      	it	lt
 80063e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063ea:	4b7f      	ldr	r3, [pc, #508]	; (80065e8 <_printf_float+0x2dc>)
 80063ec:	e7d3      	b.n	8006396 <_printf_float+0x8a>
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	d142      	bne.n	800647e <_printf_float+0x172>
 80063f8:	2306      	movs	r3, #6
 80063fa:	6063      	str	r3, [r4, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	9206      	str	r2, [sp, #24]
 8006400:	aa0e      	add	r2, sp, #56	; 0x38
 8006402:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006406:	aa0d      	add	r2, sp, #52	; 0x34
 8006408:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800640c:	9203      	str	r2, [sp, #12]
 800640e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006412:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006416:	6023      	str	r3, [r4, #0]
 8006418:	6863      	ldr	r3, [r4, #4]
 800641a:	4652      	mov	r2, sl
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	4628      	mov	r0, r5
 8006420:	4643      	mov	r3, r8
 8006422:	910b      	str	r1, [sp, #44]	; 0x2c
 8006424:	f7ff fed6 	bl	80061d4 <__cvt>
 8006428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800642a:	4680      	mov	r8, r0
 800642c:	2947      	cmp	r1, #71	; 0x47
 800642e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006430:	d108      	bne.n	8006444 <_printf_float+0x138>
 8006432:	1cc8      	adds	r0, r1, #3
 8006434:	db02      	blt.n	800643c <_printf_float+0x130>
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	4299      	cmp	r1, r3
 800643a:	dd40      	ble.n	80064be <_printf_float+0x1b2>
 800643c:	f1a9 0902 	sub.w	r9, r9, #2
 8006440:	fa5f f989 	uxtb.w	r9, r9
 8006444:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006448:	d81f      	bhi.n	800648a <_printf_float+0x17e>
 800644a:	464a      	mov	r2, r9
 800644c:	3901      	subs	r1, #1
 800644e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006452:	910d      	str	r1, [sp, #52]	; 0x34
 8006454:	f7ff ff1d 	bl	8006292 <__exponent>
 8006458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800645a:	4682      	mov	sl, r0
 800645c:	1813      	adds	r3, r2, r0
 800645e:	2a01      	cmp	r2, #1
 8006460:	6123      	str	r3, [r4, #16]
 8006462:	dc02      	bgt.n	800646a <_printf_float+0x15e>
 8006464:	6822      	ldr	r2, [r4, #0]
 8006466:	07d2      	lsls	r2, r2, #31
 8006468:	d501      	bpl.n	800646e <_printf_float+0x162>
 800646a:	3301      	adds	r3, #1
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006472:	2b00      	cmp	r3, #0
 8006474:	d09b      	beq.n	80063ae <_printf_float+0xa2>
 8006476:	232d      	movs	r3, #45	; 0x2d
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647c:	e797      	b.n	80063ae <_printf_float+0xa2>
 800647e:	2947      	cmp	r1, #71	; 0x47
 8006480:	d1bc      	bne.n	80063fc <_printf_float+0xf0>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1ba      	bne.n	80063fc <_printf_float+0xf0>
 8006486:	2301      	movs	r3, #1
 8006488:	e7b7      	b.n	80063fa <_printf_float+0xee>
 800648a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800648e:	d118      	bne.n	80064c2 <_printf_float+0x1b6>
 8006490:	2900      	cmp	r1, #0
 8006492:	6863      	ldr	r3, [r4, #4]
 8006494:	dd0b      	ble.n	80064ae <_printf_float+0x1a2>
 8006496:	6121      	str	r1, [r4, #16]
 8006498:	b913      	cbnz	r3, 80064a0 <_printf_float+0x194>
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	07d0      	lsls	r0, r2, #31
 800649e:	d502      	bpl.n	80064a6 <_printf_float+0x19a>
 80064a0:	3301      	adds	r3, #1
 80064a2:	440b      	add	r3, r1
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	f04f 0a00 	mov.w	sl, #0
 80064aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80064ac:	e7df      	b.n	800646e <_printf_float+0x162>
 80064ae:	b913      	cbnz	r3, 80064b6 <_printf_float+0x1aa>
 80064b0:	6822      	ldr	r2, [r4, #0]
 80064b2:	07d2      	lsls	r2, r2, #31
 80064b4:	d501      	bpl.n	80064ba <_printf_float+0x1ae>
 80064b6:	3302      	adds	r3, #2
 80064b8:	e7f4      	b.n	80064a4 <_printf_float+0x198>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7f2      	b.n	80064a4 <_printf_float+0x198>
 80064be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80064c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064c4:	4299      	cmp	r1, r3
 80064c6:	db05      	blt.n	80064d4 <_printf_float+0x1c8>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	6121      	str	r1, [r4, #16]
 80064cc:	07d8      	lsls	r0, r3, #31
 80064ce:	d5ea      	bpl.n	80064a6 <_printf_float+0x19a>
 80064d0:	1c4b      	adds	r3, r1, #1
 80064d2:	e7e7      	b.n	80064a4 <_printf_float+0x198>
 80064d4:	2900      	cmp	r1, #0
 80064d6:	bfcc      	ite	gt
 80064d8:	2201      	movgt	r2, #1
 80064da:	f1c1 0202 	rsble	r2, r1, #2
 80064de:	4413      	add	r3, r2
 80064e0:	e7e0      	b.n	80064a4 <_printf_float+0x198>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	055a      	lsls	r2, r3, #21
 80064e6:	d407      	bmi.n	80064f8 <_printf_float+0x1ec>
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	4642      	mov	r2, r8
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	d12b      	bne.n	800654e <_printf_float+0x242>
 80064f6:	e764      	b.n	80063c2 <_printf_float+0xb6>
 80064f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064fc:	f240 80dd 	bls.w	80066ba <_printf_float+0x3ae>
 8006500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	f7fa fa4e 	bl	80009a8 <__aeabi_dcmpeq>
 800650c:	2800      	cmp	r0, #0
 800650e:	d033      	beq.n	8006578 <_printf_float+0x26c>
 8006510:	2301      	movs	r3, #1
 8006512:	4631      	mov	r1, r6
 8006514:	4628      	mov	r0, r5
 8006516:	4a35      	ldr	r2, [pc, #212]	; (80065ec <_printf_float+0x2e0>)
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	f43f af51 	beq.w	80063c2 <_printf_float+0xb6>
 8006520:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006524:	429a      	cmp	r2, r3
 8006526:	db02      	blt.n	800652e <_printf_float+0x222>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	07d8      	lsls	r0, r3, #31
 800652c:	d50f      	bpl.n	800654e <_printf_float+0x242>
 800652e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f af42 	beq.w	80063c2 <_printf_float+0xb6>
 800653e:	f04f 0800 	mov.w	r8, #0
 8006542:	f104 091a 	add.w	r9, r4, #26
 8006546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006548:	3b01      	subs	r3, #1
 800654a:	4543      	cmp	r3, r8
 800654c:	dc09      	bgt.n	8006562 <_printf_float+0x256>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	079b      	lsls	r3, r3, #30
 8006552:	f100 8104 	bmi.w	800675e <_printf_float+0x452>
 8006556:	68e0      	ldr	r0, [r4, #12]
 8006558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800655a:	4298      	cmp	r0, r3
 800655c:	bfb8      	it	lt
 800655e:	4618      	movlt	r0, r3
 8006560:	e731      	b.n	80063c6 <_printf_float+0xba>
 8006562:	2301      	movs	r3, #1
 8006564:	464a      	mov	r2, r9
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f af28 	beq.w	80063c2 <_printf_float+0xb6>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	e7e6      	b.n	8006546 <_printf_float+0x23a>
 8006578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800657a:	2b00      	cmp	r3, #0
 800657c:	dc38      	bgt.n	80065f0 <_printf_float+0x2e4>
 800657e:	2301      	movs	r3, #1
 8006580:	4631      	mov	r1, r6
 8006582:	4628      	mov	r0, r5
 8006584:	4a19      	ldr	r2, [pc, #100]	; (80065ec <_printf_float+0x2e0>)
 8006586:	47b8      	blx	r7
 8006588:	3001      	adds	r0, #1
 800658a:	f43f af1a 	beq.w	80063c2 <_printf_float+0xb6>
 800658e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006592:	4313      	orrs	r3, r2
 8006594:	d102      	bne.n	800659c <_printf_float+0x290>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	07d9      	lsls	r1, r3, #31
 800659a:	d5d8      	bpl.n	800654e <_printf_float+0x242>
 800659c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a0:	4631      	mov	r1, r6
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	f43f af0b 	beq.w	80063c2 <_printf_float+0xb6>
 80065ac:	f04f 0900 	mov.w	r9, #0
 80065b0:	f104 0a1a 	add.w	sl, r4, #26
 80065b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065b6:	425b      	negs	r3, r3
 80065b8:	454b      	cmp	r3, r9
 80065ba:	dc01      	bgt.n	80065c0 <_printf_float+0x2b4>
 80065bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065be:	e794      	b.n	80064ea <_printf_float+0x1de>
 80065c0:	2301      	movs	r3, #1
 80065c2:	4652      	mov	r2, sl
 80065c4:	4631      	mov	r1, r6
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b8      	blx	r7
 80065ca:	3001      	adds	r0, #1
 80065cc:	f43f aef9 	beq.w	80063c2 <_printf_float+0xb6>
 80065d0:	f109 0901 	add.w	r9, r9, #1
 80065d4:	e7ee      	b.n	80065b4 <_printf_float+0x2a8>
 80065d6:	bf00      	nop
 80065d8:	7fefffff 	.word	0x7fefffff
 80065dc:	0800ab02 	.word	0x0800ab02
 80065e0:	0800ab06 	.word	0x0800ab06
 80065e4:	0800ab0a 	.word	0x0800ab0a
 80065e8:	0800ab0e 	.word	0x0800ab0e
 80065ec:	0800ab12 	.word	0x0800ab12
 80065f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065f4:	429a      	cmp	r2, r3
 80065f6:	bfa8      	it	ge
 80065f8:	461a      	movge	r2, r3
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	4691      	mov	r9, r2
 80065fe:	dc37      	bgt.n	8006670 <_printf_float+0x364>
 8006600:	f04f 0b00 	mov.w	fp, #0
 8006604:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006608:	f104 021a 	add.w	r2, r4, #26
 800660c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006610:	ebaa 0309 	sub.w	r3, sl, r9
 8006614:	455b      	cmp	r3, fp
 8006616:	dc33      	bgt.n	8006680 <_printf_float+0x374>
 8006618:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800661c:	429a      	cmp	r2, r3
 800661e:	db3b      	blt.n	8006698 <_printf_float+0x38c>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	07da      	lsls	r2, r3, #31
 8006624:	d438      	bmi.n	8006698 <_printf_float+0x38c>
 8006626:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800662a:	eba2 0903 	sub.w	r9, r2, r3
 800662e:	eba2 020a 	sub.w	r2, r2, sl
 8006632:	4591      	cmp	r9, r2
 8006634:	bfa8      	it	ge
 8006636:	4691      	movge	r9, r2
 8006638:	f1b9 0f00 	cmp.w	r9, #0
 800663c:	dc34      	bgt.n	80066a8 <_printf_float+0x39c>
 800663e:	f04f 0800 	mov.w	r8, #0
 8006642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006646:	f104 0a1a 	add.w	sl, r4, #26
 800664a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800664e:	1a9b      	subs	r3, r3, r2
 8006650:	eba3 0309 	sub.w	r3, r3, r9
 8006654:	4543      	cmp	r3, r8
 8006656:	f77f af7a 	ble.w	800654e <_printf_float+0x242>
 800665a:	2301      	movs	r3, #1
 800665c:	4652      	mov	r2, sl
 800665e:	4631      	mov	r1, r6
 8006660:	4628      	mov	r0, r5
 8006662:	47b8      	blx	r7
 8006664:	3001      	adds	r0, #1
 8006666:	f43f aeac 	beq.w	80063c2 <_printf_float+0xb6>
 800666a:	f108 0801 	add.w	r8, r8, #1
 800666e:	e7ec      	b.n	800664a <_printf_float+0x33e>
 8006670:	4613      	mov	r3, r2
 8006672:	4631      	mov	r1, r6
 8006674:	4642      	mov	r2, r8
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	d1c0      	bne.n	8006600 <_printf_float+0x2f4>
 800667e:	e6a0      	b.n	80063c2 <_printf_float+0xb6>
 8006680:	2301      	movs	r3, #1
 8006682:	4631      	mov	r1, r6
 8006684:	4628      	mov	r0, r5
 8006686:	920b      	str	r2, [sp, #44]	; 0x2c
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f ae99 	beq.w	80063c2 <_printf_float+0xb6>
 8006690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006692:	f10b 0b01 	add.w	fp, fp, #1
 8006696:	e7b9      	b.n	800660c <_printf_float+0x300>
 8006698:	4631      	mov	r1, r6
 800669a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800669e:	4628      	mov	r0, r5
 80066a0:	47b8      	blx	r7
 80066a2:	3001      	adds	r0, #1
 80066a4:	d1bf      	bne.n	8006626 <_printf_float+0x31a>
 80066a6:	e68c      	b.n	80063c2 <_printf_float+0xb6>
 80066a8:	464b      	mov	r3, r9
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	eb08 020a 	add.w	r2, r8, sl
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	d1c2      	bne.n	800663e <_printf_float+0x332>
 80066b8:	e683      	b.n	80063c2 <_printf_float+0xb6>
 80066ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066bc:	2a01      	cmp	r2, #1
 80066be:	dc01      	bgt.n	80066c4 <_printf_float+0x3b8>
 80066c0:	07db      	lsls	r3, r3, #31
 80066c2:	d539      	bpl.n	8006738 <_printf_float+0x42c>
 80066c4:	2301      	movs	r3, #1
 80066c6:	4642      	mov	r2, r8
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	f43f ae77 	beq.w	80063c2 <_printf_float+0xb6>
 80066d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066d8:	4631      	mov	r1, r6
 80066da:	4628      	mov	r0, r5
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	f43f ae6f 	beq.w	80063c2 <_printf_float+0xb6>
 80066e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066e8:	2200      	movs	r2, #0
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80066f0:	f7fa f95a 	bl	80009a8 <__aeabi_dcmpeq>
 80066f4:	b9d8      	cbnz	r0, 800672e <_printf_float+0x422>
 80066f6:	f109 33ff 	add.w	r3, r9, #4294967295
 80066fa:	f108 0201 	add.w	r2, r8, #1
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	d10e      	bne.n	8006726 <_printf_float+0x41a>
 8006708:	e65b      	b.n	80063c2 <_printf_float+0xb6>
 800670a:	2301      	movs	r3, #1
 800670c:	464a      	mov	r2, r9
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	f43f ae54 	beq.w	80063c2 <_printf_float+0xb6>
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006720:	3b01      	subs	r3, #1
 8006722:	4543      	cmp	r3, r8
 8006724:	dcf1      	bgt.n	800670a <_printf_float+0x3fe>
 8006726:	4653      	mov	r3, sl
 8006728:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800672c:	e6de      	b.n	80064ec <_printf_float+0x1e0>
 800672e:	f04f 0800 	mov.w	r8, #0
 8006732:	f104 091a 	add.w	r9, r4, #26
 8006736:	e7f2      	b.n	800671e <_printf_float+0x412>
 8006738:	2301      	movs	r3, #1
 800673a:	4642      	mov	r2, r8
 800673c:	e7df      	b.n	80066fe <_printf_float+0x3f2>
 800673e:	2301      	movs	r3, #1
 8006740:	464a      	mov	r2, r9
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	f43f ae3a 	beq.w	80063c2 <_printf_float+0xb6>
 800674e:	f108 0801 	add.w	r8, r8, #1
 8006752:	68e3      	ldr	r3, [r4, #12]
 8006754:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006756:	1a5b      	subs	r3, r3, r1
 8006758:	4543      	cmp	r3, r8
 800675a:	dcf0      	bgt.n	800673e <_printf_float+0x432>
 800675c:	e6fb      	b.n	8006556 <_printf_float+0x24a>
 800675e:	f04f 0800 	mov.w	r8, #0
 8006762:	f104 0919 	add.w	r9, r4, #25
 8006766:	e7f4      	b.n	8006752 <_printf_float+0x446>

08006768 <_printf_common>:
 8006768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	4616      	mov	r6, r2
 800676e:	4699      	mov	r9, r3
 8006770:	688a      	ldr	r2, [r1, #8]
 8006772:	690b      	ldr	r3, [r1, #16]
 8006774:	4607      	mov	r7, r0
 8006776:	4293      	cmp	r3, r2
 8006778:	bfb8      	it	lt
 800677a:	4613      	movlt	r3, r2
 800677c:	6033      	str	r3, [r6, #0]
 800677e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006782:	460c      	mov	r4, r1
 8006784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006788:	b10a      	cbz	r2, 800678e <_printf_common+0x26>
 800678a:	3301      	adds	r3, #1
 800678c:	6033      	str	r3, [r6, #0]
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	0699      	lsls	r1, r3, #26
 8006792:	bf42      	ittt	mi
 8006794:	6833      	ldrmi	r3, [r6, #0]
 8006796:	3302      	addmi	r3, #2
 8006798:	6033      	strmi	r3, [r6, #0]
 800679a:	6825      	ldr	r5, [r4, #0]
 800679c:	f015 0506 	ands.w	r5, r5, #6
 80067a0:	d106      	bne.n	80067b0 <_printf_common+0x48>
 80067a2:	f104 0a19 	add.w	sl, r4, #25
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	6832      	ldr	r2, [r6, #0]
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dc2b      	bgt.n	8006808 <_printf_common+0xa0>
 80067b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067b4:	1e13      	subs	r3, r2, #0
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	bf18      	it	ne
 80067ba:	2301      	movne	r3, #1
 80067bc:	0692      	lsls	r2, r2, #26
 80067be:	d430      	bmi.n	8006822 <_printf_common+0xba>
 80067c0:	4649      	mov	r1, r9
 80067c2:	4638      	mov	r0, r7
 80067c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067c8:	47c0      	blx	r8
 80067ca:	3001      	adds	r0, #1
 80067cc:	d023      	beq.n	8006816 <_printf_common+0xae>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	6922      	ldr	r2, [r4, #16]
 80067d2:	f003 0306 	and.w	r3, r3, #6
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	bf14      	ite	ne
 80067da:	2500      	movne	r5, #0
 80067dc:	6833      	ldreq	r3, [r6, #0]
 80067de:	f04f 0600 	mov.w	r6, #0
 80067e2:	bf08      	it	eq
 80067e4:	68e5      	ldreq	r5, [r4, #12]
 80067e6:	f104 041a 	add.w	r4, r4, #26
 80067ea:	bf08      	it	eq
 80067ec:	1aed      	subeq	r5, r5, r3
 80067ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80067f2:	bf08      	it	eq
 80067f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f8:	4293      	cmp	r3, r2
 80067fa:	bfc4      	itt	gt
 80067fc:	1a9b      	subgt	r3, r3, r2
 80067fe:	18ed      	addgt	r5, r5, r3
 8006800:	42b5      	cmp	r5, r6
 8006802:	d11a      	bne.n	800683a <_printf_common+0xd2>
 8006804:	2000      	movs	r0, #0
 8006806:	e008      	b.n	800681a <_printf_common+0xb2>
 8006808:	2301      	movs	r3, #1
 800680a:	4652      	mov	r2, sl
 800680c:	4649      	mov	r1, r9
 800680e:	4638      	mov	r0, r7
 8006810:	47c0      	blx	r8
 8006812:	3001      	adds	r0, #1
 8006814:	d103      	bne.n	800681e <_printf_common+0xb6>
 8006816:	f04f 30ff 	mov.w	r0, #4294967295
 800681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681e:	3501      	adds	r5, #1
 8006820:	e7c1      	b.n	80067a6 <_printf_common+0x3e>
 8006822:	2030      	movs	r0, #48	; 0x30
 8006824:	18e1      	adds	r1, r4, r3
 8006826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006830:	4422      	add	r2, r4
 8006832:	3302      	adds	r3, #2
 8006834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006838:	e7c2      	b.n	80067c0 <_printf_common+0x58>
 800683a:	2301      	movs	r3, #1
 800683c:	4622      	mov	r2, r4
 800683e:	4649      	mov	r1, r9
 8006840:	4638      	mov	r0, r7
 8006842:	47c0      	blx	r8
 8006844:	3001      	adds	r0, #1
 8006846:	d0e6      	beq.n	8006816 <_printf_common+0xae>
 8006848:	3601      	adds	r6, #1
 800684a:	e7d9      	b.n	8006800 <_printf_common+0x98>

0800684c <_printf_i>:
 800684c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	7e0f      	ldrb	r7, [r1, #24]
 8006852:	4691      	mov	r9, r2
 8006854:	2f78      	cmp	r7, #120	; 0x78
 8006856:	4680      	mov	r8, r0
 8006858:	460c      	mov	r4, r1
 800685a:	469a      	mov	sl, r3
 800685c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800685e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006862:	d807      	bhi.n	8006874 <_printf_i+0x28>
 8006864:	2f62      	cmp	r7, #98	; 0x62
 8006866:	d80a      	bhi.n	800687e <_printf_i+0x32>
 8006868:	2f00      	cmp	r7, #0
 800686a:	f000 80d5 	beq.w	8006a18 <_printf_i+0x1cc>
 800686e:	2f58      	cmp	r7, #88	; 0x58
 8006870:	f000 80c1 	beq.w	80069f6 <_printf_i+0x1aa>
 8006874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800687c:	e03a      	b.n	80068f4 <_printf_i+0xa8>
 800687e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006882:	2b15      	cmp	r3, #21
 8006884:	d8f6      	bhi.n	8006874 <_printf_i+0x28>
 8006886:	a101      	add	r1, pc, #4	; (adr r1, 800688c <_printf_i+0x40>)
 8006888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800688c:	080068e5 	.word	0x080068e5
 8006890:	080068f9 	.word	0x080068f9
 8006894:	08006875 	.word	0x08006875
 8006898:	08006875 	.word	0x08006875
 800689c:	08006875 	.word	0x08006875
 80068a0:	08006875 	.word	0x08006875
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	08006875 	.word	0x08006875
 80068ac:	08006875 	.word	0x08006875
 80068b0:	08006875 	.word	0x08006875
 80068b4:	08006875 	.word	0x08006875
 80068b8:	080069ff 	.word	0x080069ff
 80068bc:	08006925 	.word	0x08006925
 80068c0:	080069b9 	.word	0x080069b9
 80068c4:	08006875 	.word	0x08006875
 80068c8:	08006875 	.word	0x08006875
 80068cc:	08006a21 	.word	0x08006a21
 80068d0:	08006875 	.word	0x08006875
 80068d4:	08006925 	.word	0x08006925
 80068d8:	08006875 	.word	0x08006875
 80068dc:	08006875 	.word	0x08006875
 80068e0:	080069c1 	.word	0x080069c1
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	602a      	str	r2, [r5, #0]
 80068ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0a0      	b.n	8006a3a <_printf_i+0x1ee>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	682b      	ldr	r3, [r5, #0]
 80068fc:	0607      	lsls	r7, r0, #24
 80068fe:	f103 0104 	add.w	r1, r3, #4
 8006902:	6029      	str	r1, [r5, #0]
 8006904:	d501      	bpl.n	800690a <_printf_i+0xbe>
 8006906:	681e      	ldr	r6, [r3, #0]
 8006908:	e003      	b.n	8006912 <_printf_i+0xc6>
 800690a:	0646      	lsls	r6, r0, #25
 800690c:	d5fb      	bpl.n	8006906 <_printf_i+0xba>
 800690e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006912:	2e00      	cmp	r6, #0
 8006914:	da03      	bge.n	800691e <_printf_i+0xd2>
 8006916:	232d      	movs	r3, #45	; 0x2d
 8006918:	4276      	negs	r6, r6
 800691a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691e:	230a      	movs	r3, #10
 8006920:	4859      	ldr	r0, [pc, #356]	; (8006a88 <_printf_i+0x23c>)
 8006922:	e012      	b.n	800694a <_printf_i+0xfe>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	6820      	ldr	r0, [r4, #0]
 8006928:	1d19      	adds	r1, r3, #4
 800692a:	6029      	str	r1, [r5, #0]
 800692c:	0605      	lsls	r5, r0, #24
 800692e:	d501      	bpl.n	8006934 <_printf_i+0xe8>
 8006930:	681e      	ldr	r6, [r3, #0]
 8006932:	e002      	b.n	800693a <_printf_i+0xee>
 8006934:	0641      	lsls	r1, r0, #25
 8006936:	d5fb      	bpl.n	8006930 <_printf_i+0xe4>
 8006938:	881e      	ldrh	r6, [r3, #0]
 800693a:	2f6f      	cmp	r7, #111	; 0x6f
 800693c:	bf0c      	ite	eq
 800693e:	2308      	moveq	r3, #8
 8006940:	230a      	movne	r3, #10
 8006942:	4851      	ldr	r0, [pc, #324]	; (8006a88 <_printf_i+0x23c>)
 8006944:	2100      	movs	r1, #0
 8006946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800694a:	6865      	ldr	r5, [r4, #4]
 800694c:	2d00      	cmp	r5, #0
 800694e:	bfa8      	it	ge
 8006950:	6821      	ldrge	r1, [r4, #0]
 8006952:	60a5      	str	r5, [r4, #8]
 8006954:	bfa4      	itt	ge
 8006956:	f021 0104 	bicge.w	r1, r1, #4
 800695a:	6021      	strge	r1, [r4, #0]
 800695c:	b90e      	cbnz	r6, 8006962 <_printf_i+0x116>
 800695e:	2d00      	cmp	r5, #0
 8006960:	d04b      	beq.n	80069fa <_printf_i+0x1ae>
 8006962:	4615      	mov	r5, r2
 8006964:	fbb6 f1f3 	udiv	r1, r6, r3
 8006968:	fb03 6711 	mls	r7, r3, r1, r6
 800696c:	5dc7      	ldrb	r7, [r0, r7]
 800696e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006972:	4637      	mov	r7, r6
 8006974:	42bb      	cmp	r3, r7
 8006976:	460e      	mov	r6, r1
 8006978:	d9f4      	bls.n	8006964 <_printf_i+0x118>
 800697a:	2b08      	cmp	r3, #8
 800697c:	d10b      	bne.n	8006996 <_printf_i+0x14a>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	07de      	lsls	r6, r3, #31
 8006982:	d508      	bpl.n	8006996 <_printf_i+0x14a>
 8006984:	6923      	ldr	r3, [r4, #16]
 8006986:	6861      	ldr	r1, [r4, #4]
 8006988:	4299      	cmp	r1, r3
 800698a:	bfde      	ittt	le
 800698c:	2330      	movle	r3, #48	; 0x30
 800698e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006992:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006996:	1b52      	subs	r2, r2, r5
 8006998:	6122      	str	r2, [r4, #16]
 800699a:	464b      	mov	r3, r9
 800699c:	4621      	mov	r1, r4
 800699e:	4640      	mov	r0, r8
 80069a0:	f8cd a000 	str.w	sl, [sp]
 80069a4:	aa03      	add	r2, sp, #12
 80069a6:	f7ff fedf 	bl	8006768 <_printf_common>
 80069aa:	3001      	adds	r0, #1
 80069ac:	d14a      	bne.n	8006a44 <_printf_i+0x1f8>
 80069ae:	f04f 30ff 	mov.w	r0, #4294967295
 80069b2:	b004      	add	sp, #16
 80069b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	f043 0320 	orr.w	r3, r3, #32
 80069be:	6023      	str	r3, [r4, #0]
 80069c0:	2778      	movs	r7, #120	; 0x78
 80069c2:	4832      	ldr	r0, [pc, #200]	; (8006a8c <_printf_i+0x240>)
 80069c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	6829      	ldr	r1, [r5, #0]
 80069cc:	061f      	lsls	r7, r3, #24
 80069ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80069d2:	d402      	bmi.n	80069da <_printf_i+0x18e>
 80069d4:	065f      	lsls	r7, r3, #25
 80069d6:	bf48      	it	mi
 80069d8:	b2b6      	uxthmi	r6, r6
 80069da:	07df      	lsls	r7, r3, #31
 80069dc:	bf48      	it	mi
 80069de:	f043 0320 	orrmi.w	r3, r3, #32
 80069e2:	6029      	str	r1, [r5, #0]
 80069e4:	bf48      	it	mi
 80069e6:	6023      	strmi	r3, [r4, #0]
 80069e8:	b91e      	cbnz	r6, 80069f2 <_printf_i+0x1a6>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	f023 0320 	bic.w	r3, r3, #32
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	2310      	movs	r3, #16
 80069f4:	e7a6      	b.n	8006944 <_printf_i+0xf8>
 80069f6:	4824      	ldr	r0, [pc, #144]	; (8006a88 <_printf_i+0x23c>)
 80069f8:	e7e4      	b.n	80069c4 <_printf_i+0x178>
 80069fa:	4615      	mov	r5, r2
 80069fc:	e7bd      	b.n	800697a <_printf_i+0x12e>
 80069fe:	682b      	ldr	r3, [r5, #0]
 8006a00:	6826      	ldr	r6, [r4, #0]
 8006a02:	1d18      	adds	r0, r3, #4
 8006a04:	6961      	ldr	r1, [r4, #20]
 8006a06:	6028      	str	r0, [r5, #0]
 8006a08:	0635      	lsls	r5, r6, #24
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	d501      	bpl.n	8006a12 <_printf_i+0x1c6>
 8006a0e:	6019      	str	r1, [r3, #0]
 8006a10:	e002      	b.n	8006a18 <_printf_i+0x1cc>
 8006a12:	0670      	lsls	r0, r6, #25
 8006a14:	d5fb      	bpl.n	8006a0e <_printf_i+0x1c2>
 8006a16:	8019      	strh	r1, [r3, #0]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4615      	mov	r5, r2
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	e7bc      	b.n	800699a <_printf_i+0x14e>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	2100      	movs	r1, #0
 8006a24:	1d1a      	adds	r2, r3, #4
 8006a26:	602a      	str	r2, [r5, #0]
 8006a28:	681d      	ldr	r5, [r3, #0]
 8006a2a:	6862      	ldr	r2, [r4, #4]
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f000 fcd9 	bl	80073e4 <memchr>
 8006a32:	b108      	cbz	r0, 8006a38 <_printf_i+0x1ec>
 8006a34:	1b40      	subs	r0, r0, r5
 8006a36:	6060      	str	r0, [r4, #4]
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a42:	e7aa      	b.n	800699a <_printf_i+0x14e>
 8006a44:	462a      	mov	r2, r5
 8006a46:	4649      	mov	r1, r9
 8006a48:	4640      	mov	r0, r8
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	47d0      	blx	sl
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d0ad      	beq.n	80069ae <_printf_i+0x162>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	079b      	lsls	r3, r3, #30
 8006a56:	d413      	bmi.n	8006a80 <_printf_i+0x234>
 8006a58:	68e0      	ldr	r0, [r4, #12]
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	4298      	cmp	r0, r3
 8006a5e:	bfb8      	it	lt
 8006a60:	4618      	movlt	r0, r3
 8006a62:	e7a6      	b.n	80069b2 <_printf_i+0x166>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4632      	mov	r2, r6
 8006a68:	4649      	mov	r1, r9
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	47d0      	blx	sl
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d09d      	beq.n	80069ae <_printf_i+0x162>
 8006a72:	3501      	adds	r5, #1
 8006a74:	68e3      	ldr	r3, [r4, #12]
 8006a76:	9903      	ldr	r1, [sp, #12]
 8006a78:	1a5b      	subs	r3, r3, r1
 8006a7a:	42ab      	cmp	r3, r5
 8006a7c:	dcf2      	bgt.n	8006a64 <_printf_i+0x218>
 8006a7e:	e7eb      	b.n	8006a58 <_printf_i+0x20c>
 8006a80:	2500      	movs	r5, #0
 8006a82:	f104 0619 	add.w	r6, r4, #25
 8006a86:	e7f5      	b.n	8006a74 <_printf_i+0x228>
 8006a88:	0800ab14 	.word	0x0800ab14
 8006a8c:	0800ab25 	.word	0x0800ab25

08006a90 <_scanf_float>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	b087      	sub	sp, #28
 8006a96:	9303      	str	r3, [sp, #12]
 8006a98:	688b      	ldr	r3, [r1, #8]
 8006a9a:	4617      	mov	r7, r2
 8006a9c:	1e5a      	subs	r2, r3, #1
 8006a9e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006aa2:	bf85      	ittet	hi
 8006aa4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006aa8:	195b      	addhi	r3, r3, r5
 8006aaa:	2300      	movls	r3, #0
 8006aac:	9302      	strhi	r3, [sp, #8]
 8006aae:	bf88      	it	hi
 8006ab0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ab4:	468b      	mov	fp, r1
 8006ab6:	f04f 0500 	mov.w	r5, #0
 8006aba:	bf8c      	ite	hi
 8006abc:	608b      	strhi	r3, [r1, #8]
 8006abe:	9302      	strls	r3, [sp, #8]
 8006ac0:	680b      	ldr	r3, [r1, #0]
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ac8:	f84b 3b1c 	str.w	r3, [fp], #28
 8006acc:	460c      	mov	r4, r1
 8006ace:	465e      	mov	r6, fp
 8006ad0:	46aa      	mov	sl, r5
 8006ad2:	46a9      	mov	r9, r5
 8006ad4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ad8:	9501      	str	r5, [sp, #4]
 8006ada:	68a2      	ldr	r2, [r4, #8]
 8006adc:	b152      	cbz	r2, 8006af4 <_scanf_float+0x64>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ae4:	d864      	bhi.n	8006bb0 <_scanf_float+0x120>
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d83c      	bhi.n	8006b64 <_scanf_float+0xd4>
 8006aea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006aee:	b2c8      	uxtb	r0, r1
 8006af0:	280e      	cmp	r0, #14
 8006af2:	d93a      	bls.n	8006b6a <_scanf_float+0xda>
 8006af4:	f1b9 0f00 	cmp.w	r9, #0
 8006af8:	d003      	beq.n	8006b02 <_scanf_float+0x72>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b06:	f1ba 0f01 	cmp.w	sl, #1
 8006b0a:	f200 8113 	bhi.w	8006d34 <_scanf_float+0x2a4>
 8006b0e:	455e      	cmp	r6, fp
 8006b10:	f200 8105 	bhi.w	8006d1e <_scanf_float+0x28e>
 8006b14:	2501      	movs	r5, #1
 8006b16:	4628      	mov	r0, r5
 8006b18:	b007      	add	sp, #28
 8006b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b22:	2a0d      	cmp	r2, #13
 8006b24:	d8e6      	bhi.n	8006af4 <_scanf_float+0x64>
 8006b26:	a101      	add	r1, pc, #4	; (adr r1, 8006b2c <_scanf_float+0x9c>)
 8006b28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b2c:	08006c6b 	.word	0x08006c6b
 8006b30:	08006af5 	.word	0x08006af5
 8006b34:	08006af5 	.word	0x08006af5
 8006b38:	08006af5 	.word	0x08006af5
 8006b3c:	08006ccb 	.word	0x08006ccb
 8006b40:	08006ca3 	.word	0x08006ca3
 8006b44:	08006af5 	.word	0x08006af5
 8006b48:	08006af5 	.word	0x08006af5
 8006b4c:	08006c79 	.word	0x08006c79
 8006b50:	08006af5 	.word	0x08006af5
 8006b54:	08006af5 	.word	0x08006af5
 8006b58:	08006af5 	.word	0x08006af5
 8006b5c:	08006af5 	.word	0x08006af5
 8006b60:	08006c31 	.word	0x08006c31
 8006b64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b68:	e7db      	b.n	8006b22 <_scanf_float+0x92>
 8006b6a:	290e      	cmp	r1, #14
 8006b6c:	d8c2      	bhi.n	8006af4 <_scanf_float+0x64>
 8006b6e:	a001      	add	r0, pc, #4	; (adr r0, 8006b74 <_scanf_float+0xe4>)
 8006b70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b74:	08006c23 	.word	0x08006c23
 8006b78:	08006af5 	.word	0x08006af5
 8006b7c:	08006c23 	.word	0x08006c23
 8006b80:	08006cb7 	.word	0x08006cb7
 8006b84:	08006af5 	.word	0x08006af5
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006c0d 	.word	0x08006c0d
 8006b90:	08006c0d 	.word	0x08006c0d
 8006b94:	08006c0d 	.word	0x08006c0d
 8006b98:	08006c0d 	.word	0x08006c0d
 8006b9c:	08006c0d 	.word	0x08006c0d
 8006ba0:	08006c0d 	.word	0x08006c0d
 8006ba4:	08006c0d 	.word	0x08006c0d
 8006ba8:	08006c0d 	.word	0x08006c0d
 8006bac:	08006c0d 	.word	0x08006c0d
 8006bb0:	2b6e      	cmp	r3, #110	; 0x6e
 8006bb2:	d809      	bhi.n	8006bc8 <_scanf_float+0x138>
 8006bb4:	2b60      	cmp	r3, #96	; 0x60
 8006bb6:	d8b2      	bhi.n	8006b1e <_scanf_float+0x8e>
 8006bb8:	2b54      	cmp	r3, #84	; 0x54
 8006bba:	d077      	beq.n	8006cac <_scanf_float+0x21c>
 8006bbc:	2b59      	cmp	r3, #89	; 0x59
 8006bbe:	d199      	bne.n	8006af4 <_scanf_float+0x64>
 8006bc0:	2d07      	cmp	r5, #7
 8006bc2:	d197      	bne.n	8006af4 <_scanf_float+0x64>
 8006bc4:	2508      	movs	r5, #8
 8006bc6:	e029      	b.n	8006c1c <_scanf_float+0x18c>
 8006bc8:	2b74      	cmp	r3, #116	; 0x74
 8006bca:	d06f      	beq.n	8006cac <_scanf_float+0x21c>
 8006bcc:	2b79      	cmp	r3, #121	; 0x79
 8006bce:	e7f6      	b.n	8006bbe <_scanf_float+0x12e>
 8006bd0:	6821      	ldr	r1, [r4, #0]
 8006bd2:	05c8      	lsls	r0, r1, #23
 8006bd4:	d51a      	bpl.n	8006c0c <_scanf_float+0x17c>
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bdc:	6021      	str	r1, [r4, #0]
 8006bde:	f109 0901 	add.w	r9, r9, #1
 8006be2:	b11b      	cbz	r3, 8006bec <_scanf_float+0x15c>
 8006be4:	3b01      	subs	r3, #1
 8006be6:	3201      	adds	r2, #1
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	60a2      	str	r2, [r4, #8]
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	60a3      	str	r3, [r4, #8]
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	f340 8084 	ble.w	8006d0c <_scanf_float+0x27c>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	e766      	b.n	8006ada <_scanf_float+0x4a>
 8006c0c:	eb1a 0f05 	cmn.w	sl, r5
 8006c10:	f47f af70 	bne.w	8006af4 <_scanf_float+0x64>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c1a:	6022      	str	r2, [r4, #0]
 8006c1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c20:	e7e4      	b.n	8006bec <_scanf_float+0x15c>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	0610      	lsls	r0, r2, #24
 8006c26:	f57f af65 	bpl.w	8006af4 <_scanf_float+0x64>
 8006c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c2e:	e7f4      	b.n	8006c1a <_scanf_float+0x18a>
 8006c30:	f1ba 0f00 	cmp.w	sl, #0
 8006c34:	d10e      	bne.n	8006c54 <_scanf_float+0x1c4>
 8006c36:	f1b9 0f00 	cmp.w	r9, #0
 8006c3a:	d10e      	bne.n	8006c5a <_scanf_float+0x1ca>
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c46:	d108      	bne.n	8006c5a <_scanf_float+0x1ca>
 8006c48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c4c:	f04f 0a01 	mov.w	sl, #1
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	e7e3      	b.n	8006c1c <_scanf_float+0x18c>
 8006c54:	f1ba 0f02 	cmp.w	sl, #2
 8006c58:	d055      	beq.n	8006d06 <_scanf_float+0x276>
 8006c5a:	2d01      	cmp	r5, #1
 8006c5c:	d002      	beq.n	8006c64 <_scanf_float+0x1d4>
 8006c5e:	2d04      	cmp	r5, #4
 8006c60:	f47f af48 	bne.w	8006af4 <_scanf_float+0x64>
 8006c64:	3501      	adds	r5, #1
 8006c66:	b2ed      	uxtb	r5, r5
 8006c68:	e7d8      	b.n	8006c1c <_scanf_float+0x18c>
 8006c6a:	f1ba 0f01 	cmp.w	sl, #1
 8006c6e:	f47f af41 	bne.w	8006af4 <_scanf_float+0x64>
 8006c72:	f04f 0a02 	mov.w	sl, #2
 8006c76:	e7d1      	b.n	8006c1c <_scanf_float+0x18c>
 8006c78:	b97d      	cbnz	r5, 8006c9a <_scanf_float+0x20a>
 8006c7a:	f1b9 0f00 	cmp.w	r9, #0
 8006c7e:	f47f af3c 	bne.w	8006afa <_scanf_float+0x6a>
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c8c:	f47f af39 	bne.w	8006b02 <_scanf_float+0x72>
 8006c90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c94:	2501      	movs	r5, #1
 8006c96:	6022      	str	r2, [r4, #0]
 8006c98:	e7c0      	b.n	8006c1c <_scanf_float+0x18c>
 8006c9a:	2d03      	cmp	r5, #3
 8006c9c:	d0e2      	beq.n	8006c64 <_scanf_float+0x1d4>
 8006c9e:	2d05      	cmp	r5, #5
 8006ca0:	e7de      	b.n	8006c60 <_scanf_float+0x1d0>
 8006ca2:	2d02      	cmp	r5, #2
 8006ca4:	f47f af26 	bne.w	8006af4 <_scanf_float+0x64>
 8006ca8:	2503      	movs	r5, #3
 8006caa:	e7b7      	b.n	8006c1c <_scanf_float+0x18c>
 8006cac:	2d06      	cmp	r5, #6
 8006cae:	f47f af21 	bne.w	8006af4 <_scanf_float+0x64>
 8006cb2:	2507      	movs	r5, #7
 8006cb4:	e7b2      	b.n	8006c1c <_scanf_float+0x18c>
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	0591      	lsls	r1, r2, #22
 8006cba:	f57f af1b 	bpl.w	8006af4 <_scanf_float+0x64>
 8006cbe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cc8:	e7a8      	b.n	8006c1c <_scanf_float+0x18c>
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cd0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cd4:	d006      	beq.n	8006ce4 <_scanf_float+0x254>
 8006cd6:	0550      	lsls	r0, r2, #21
 8006cd8:	f57f af0c 	bpl.w	8006af4 <_scanf_float+0x64>
 8006cdc:	f1b9 0f00 	cmp.w	r9, #0
 8006ce0:	f43f af0f 	beq.w	8006b02 <_scanf_float+0x72>
 8006ce4:	0591      	lsls	r1, r2, #22
 8006ce6:	bf58      	it	pl
 8006ce8:	9901      	ldrpl	r1, [sp, #4]
 8006cea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cee:	bf58      	it	pl
 8006cf0:	eba9 0101 	subpl.w	r1, r9, r1
 8006cf4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cf8:	f04f 0900 	mov.w	r9, #0
 8006cfc:	bf58      	it	pl
 8006cfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d02:	6022      	str	r2, [r4, #0]
 8006d04:	e78a      	b.n	8006c1c <_scanf_float+0x18c>
 8006d06:	f04f 0a03 	mov.w	sl, #3
 8006d0a:	e787      	b.n	8006c1c <_scanf_float+0x18c>
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d14:	4798      	blx	r3
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f43f aedf 	beq.w	8006ada <_scanf_float+0x4a>
 8006d1c:	e6ea      	b.n	8006af4 <_scanf_float+0x64>
 8006d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d22:	463a      	mov	r2, r7
 8006d24:	4640      	mov	r0, r8
 8006d26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d2a:	4798      	blx	r3
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	e6ec      	b.n	8006b0e <_scanf_float+0x7e>
 8006d34:	1e6b      	subs	r3, r5, #1
 8006d36:	2b06      	cmp	r3, #6
 8006d38:	d825      	bhi.n	8006d86 <_scanf_float+0x2f6>
 8006d3a:	2d02      	cmp	r5, #2
 8006d3c:	d836      	bhi.n	8006dac <_scanf_float+0x31c>
 8006d3e:	455e      	cmp	r6, fp
 8006d40:	f67f aee8 	bls.w	8006b14 <_scanf_float+0x84>
 8006d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d48:	463a      	mov	r2, r7
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d50:	4798      	blx	r3
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	6123      	str	r3, [r4, #16]
 8006d58:	e7f1      	b.n	8006d3e <_scanf_float+0x2ae>
 8006d5a:	9802      	ldr	r0, [sp, #8]
 8006d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d64:	463a      	mov	r2, r7
 8006d66:	9002      	str	r0, [sp, #8]
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4798      	blx	r3
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d76:	fa5f fa8a 	uxtb.w	sl, sl
 8006d7a:	f1ba 0f02 	cmp.w	sl, #2
 8006d7e:	d1ec      	bne.n	8006d5a <_scanf_float+0x2ca>
 8006d80:	3d03      	subs	r5, #3
 8006d82:	b2ed      	uxtb	r5, r5
 8006d84:	1b76      	subs	r6, r6, r5
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	05da      	lsls	r2, r3, #23
 8006d8a:	d52f      	bpl.n	8006dec <_scanf_float+0x35c>
 8006d8c:	055b      	lsls	r3, r3, #21
 8006d8e:	d510      	bpl.n	8006db2 <_scanf_float+0x322>
 8006d90:	455e      	cmp	r6, fp
 8006d92:	f67f aebf 	bls.w	8006b14 <_scanf_float+0x84>
 8006d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006da2:	4798      	blx	r3
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	e7f1      	b.n	8006d90 <_scanf_float+0x300>
 8006dac:	46aa      	mov	sl, r5
 8006dae:	9602      	str	r6, [sp, #8]
 8006db0:	e7df      	b.n	8006d72 <_scanf_float+0x2e2>
 8006db2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	2965      	cmp	r1, #101	; 0x65
 8006dba:	f103 33ff 	add.w	r3, r3, #4294967295
 8006dbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	d00c      	beq.n	8006de0 <_scanf_float+0x350>
 8006dc6:	2945      	cmp	r1, #69	; 0x45
 8006dc8:	d00a      	beq.n	8006de0 <_scanf_float+0x350>
 8006dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dce:	463a      	mov	r2, r7
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	4798      	blx	r3
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	1eb5      	subs	r5, r6, #2
 8006dde:	6123      	str	r3, [r4, #16]
 8006de0:	463a      	mov	r2, r7
 8006de2:	4640      	mov	r0, r8
 8006de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006de8:	4798      	blx	r3
 8006dea:	462e      	mov	r6, r5
 8006dec:	6825      	ldr	r5, [r4, #0]
 8006dee:	f015 0510 	ands.w	r5, r5, #16
 8006df2:	d155      	bne.n	8006ea0 <_scanf_float+0x410>
 8006df4:	7035      	strb	r5, [r6, #0]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e00:	d11d      	bne.n	8006e3e <_scanf_float+0x3ae>
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	454b      	cmp	r3, r9
 8006e06:	eba3 0209 	sub.w	r2, r3, r9
 8006e0a:	d125      	bne.n	8006e58 <_scanf_float+0x3c8>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4659      	mov	r1, fp
 8006e10:	4640      	mov	r0, r8
 8006e12:	f002 fd25 	bl	8009860 <_strtod_r>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	f8d4 c000 	ldr.w	ip, [r4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f01c 0f02 	tst.w	ip, #2
 8006e22:	4606      	mov	r6, r0
 8006e24:	460f      	mov	r7, r1
 8006e26:	f103 0204 	add.w	r2, r3, #4
 8006e2a:	d020      	beq.n	8006e6e <_scanf_float+0x3de>
 8006e2c:	9903      	ldr	r1, [sp, #12]
 8006e2e:	600a      	str	r2, [r1, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	e9c3 6700 	strd	r6, r7, [r3]
 8006e36:	68e3      	ldr	r3, [r4, #12]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	60e3      	str	r3, [r4, #12]
 8006e3c:	e66b      	b.n	8006b16 <_scanf_float+0x86>
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0e3      	beq.n	8006e0c <_scanf_float+0x37c>
 8006e44:	9905      	ldr	r1, [sp, #20]
 8006e46:	230a      	movs	r3, #10
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	3101      	adds	r1, #1
 8006e4e:	f002 fd8b 	bl	8009968 <_strtol_r>
 8006e52:	9b04      	ldr	r3, [sp, #16]
 8006e54:	9e05      	ldr	r6, [sp, #20]
 8006e56:	1ac2      	subs	r2, r0, r3
 8006e58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e5c:	429e      	cmp	r6, r3
 8006e5e:	bf28      	it	cs
 8006e60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e64:	4630      	mov	r0, r6
 8006e66:	490f      	ldr	r1, [pc, #60]	; (8006ea4 <_scanf_float+0x414>)
 8006e68:	f000 f946 	bl	80070f8 <siprintf>
 8006e6c:	e7ce      	b.n	8006e0c <_scanf_float+0x37c>
 8006e6e:	f01c 0f04 	tst.w	ip, #4
 8006e72:	d1db      	bne.n	8006e2c <_scanf_float+0x39c>
 8006e74:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006e78:	f8cc 2000 	str.w	r2, [ip]
 8006e7c:	f8d3 8000 	ldr.w	r8, [r3]
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	f7f9 fdc2 	bl	8000a0c <__aeabi_dcmpun>
 8006e88:	b128      	cbz	r0, 8006e96 <_scanf_float+0x406>
 8006e8a:	4807      	ldr	r0, [pc, #28]	; (8006ea8 <_scanf_float+0x418>)
 8006e8c:	f000 fac6 	bl	800741c <nanf>
 8006e90:	f8c8 0000 	str.w	r0, [r8]
 8006e94:	e7cf      	b.n	8006e36 <_scanf_float+0x3a6>
 8006e96:	4630      	mov	r0, r6
 8006e98:	4639      	mov	r1, r7
 8006e9a:	f7f9 fe15 	bl	8000ac8 <__aeabi_d2f>
 8006e9e:	e7f7      	b.n	8006e90 <_scanf_float+0x400>
 8006ea0:	2500      	movs	r5, #0
 8006ea2:	e638      	b.n	8006b16 <_scanf_float+0x86>
 8006ea4:	0800ab36 	.word	0x0800ab36
 8006ea8:	0800aecd 	.word	0x0800aecd

08006eac <std>:
 8006eac:	2300      	movs	r3, #0
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eba:	6083      	str	r3, [r0, #8]
 8006ebc:	8181      	strh	r1, [r0, #12]
 8006ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8006ec0:	81c2      	strh	r2, [r0, #14]
 8006ec2:	6183      	str	r3, [r0, #24]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	305c      	adds	r0, #92	; 0x5c
 8006eca:	f000 fa0d 	bl	80072e8 <memset>
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <std+0x38>)
 8006ed0:	6224      	str	r4, [r4, #32]
 8006ed2:	6263      	str	r3, [r4, #36]	; 0x24
 8006ed4:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <std+0x3c>)
 8006ed6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ed8:	4b04      	ldr	r3, [pc, #16]	; (8006eec <std+0x40>)
 8006eda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <std+0x44>)
 8006ede:	6323      	str	r3, [r4, #48]	; 0x30
 8006ee0:	bd10      	pop	{r4, pc}
 8006ee2:	bf00      	nop
 8006ee4:	08007139 	.word	0x08007139
 8006ee8:	0800715b 	.word	0x0800715b
 8006eec:	08007193 	.word	0x08007193
 8006ef0:	080071b7 	.word	0x080071b7

08006ef4 <stdio_exit_handler>:
 8006ef4:	4a02      	ldr	r2, [pc, #8]	; (8006f00 <stdio_exit_handler+0xc>)
 8006ef6:	4903      	ldr	r1, [pc, #12]	; (8006f04 <stdio_exit_handler+0x10>)
 8006ef8:	4803      	ldr	r0, [pc, #12]	; (8006f08 <stdio_exit_handler+0x14>)
 8006efa:	f000 b869 	b.w	8006fd0 <_fwalk_sglue>
 8006efe:	bf00      	nop
 8006f00:	20000084 	.word	0x20000084
 8006f04:	08009fa5 	.word	0x08009fa5
 8006f08:	20000090 	.word	0x20000090

08006f0c <cleanup_stdio>:
 8006f0c:	6841      	ldr	r1, [r0, #4]
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <cleanup_stdio+0x34>)
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4299      	cmp	r1, r3
 8006f14:	4604      	mov	r4, r0
 8006f16:	d001      	beq.n	8006f1c <cleanup_stdio+0x10>
 8006f18:	f003 f844 	bl	8009fa4 <_fflush_r>
 8006f1c:	68a1      	ldr	r1, [r4, #8]
 8006f1e:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <cleanup_stdio+0x38>)
 8006f20:	4299      	cmp	r1, r3
 8006f22:	d002      	beq.n	8006f2a <cleanup_stdio+0x1e>
 8006f24:	4620      	mov	r0, r4
 8006f26:	f003 f83d 	bl	8009fa4 <_fflush_r>
 8006f2a:	68e1      	ldr	r1, [r4, #12]
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <cleanup_stdio+0x3c>)
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	d004      	beq.n	8006f3c <cleanup_stdio+0x30>
 8006f32:	4620      	mov	r0, r4
 8006f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f38:	f003 b834 	b.w	8009fa4 <_fflush_r>
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000578 	.word	0x20000578
 8006f44:	200005e0 	.word	0x200005e0
 8006f48:	20000648 	.word	0x20000648

08006f4c <global_stdio_init.part.0>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <global_stdio_init.part.0+0x30>)
 8006f50:	4c0b      	ldr	r4, [pc, #44]	; (8006f80 <global_stdio_init.part.0+0x34>)
 8006f52:	4a0c      	ldr	r2, [pc, #48]	; (8006f84 <global_stdio_init.part.0+0x38>)
 8006f54:	4620      	mov	r0, r4
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	2104      	movs	r1, #4
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f7ff ffa6 	bl	8006eac <std>
 8006f60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f64:	2201      	movs	r2, #1
 8006f66:	2109      	movs	r1, #9
 8006f68:	f7ff ffa0 	bl	8006eac <std>
 8006f6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f70:	2202      	movs	r2, #2
 8006f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f76:	2112      	movs	r1, #18
 8006f78:	f7ff bf98 	b.w	8006eac <std>
 8006f7c:	200006b0 	.word	0x200006b0
 8006f80:	20000578 	.word	0x20000578
 8006f84:	08006ef5 	.word	0x08006ef5

08006f88 <__sfp_lock_acquire>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__sfp_lock_acquire+0x8>)
 8006f8a:	f000 ba29 	b.w	80073e0 <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	200006b9 	.word	0x200006b9

08006f94 <__sfp_lock_release>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__sfp_lock_release+0x8>)
 8006f96:	f000 ba24 	b.w	80073e2 <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	200006b9 	.word	0x200006b9

08006fa0 <__sinit>:
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	f7ff fff0 	bl	8006f88 <__sfp_lock_acquire>
 8006fa8:	6a23      	ldr	r3, [r4, #32]
 8006faa:	b11b      	cbz	r3, 8006fb4 <__sinit+0x14>
 8006fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb0:	f7ff bff0 	b.w	8006f94 <__sfp_lock_release>
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <__sinit+0x28>)
 8006fb6:	6223      	str	r3, [r4, #32]
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <__sinit+0x2c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f5      	bne.n	8006fac <__sinit+0xc>
 8006fc0:	f7ff ffc4 	bl	8006f4c <global_stdio_init.part.0>
 8006fc4:	e7f2      	b.n	8006fac <__sinit+0xc>
 8006fc6:	bf00      	nop
 8006fc8:	08006f0d 	.word	0x08006f0d
 8006fcc:	200006b0 	.word	0x200006b0

08006fd0 <_fwalk_sglue>:
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	4688      	mov	r8, r1
 8006fd8:	4614      	mov	r4, r2
 8006fda:	2600      	movs	r6, #0
 8006fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8006fe4:	d505      	bpl.n	8006ff2 <_fwalk_sglue+0x22>
 8006fe6:	6824      	ldr	r4, [r4, #0]
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	d1f7      	bne.n	8006fdc <_fwalk_sglue+0xc>
 8006fec:	4630      	mov	r0, r6
 8006fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d907      	bls.n	8007008 <_fwalk_sglue+0x38>
 8006ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	d003      	beq.n	8007008 <_fwalk_sglue+0x38>
 8007000:	4629      	mov	r1, r5
 8007002:	4638      	mov	r0, r7
 8007004:	47c0      	blx	r8
 8007006:	4306      	orrs	r6, r0
 8007008:	3568      	adds	r5, #104	; 0x68
 800700a:	e7e9      	b.n	8006fe0 <_fwalk_sglue+0x10>

0800700c <iprintf>:
 800700c:	b40f      	push	{r0, r1, r2, r3}
 800700e:	b507      	push	{r0, r1, r2, lr}
 8007010:	4906      	ldr	r1, [pc, #24]	; (800702c <iprintf+0x20>)
 8007012:	ab04      	add	r3, sp, #16
 8007014:	6808      	ldr	r0, [r1, #0]
 8007016:	f853 2b04 	ldr.w	r2, [r3], #4
 800701a:	6881      	ldr	r1, [r0, #8]
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	f002 fe25 	bl	8009c6c <_vfiprintf_r>
 8007022:	b003      	add	sp, #12
 8007024:	f85d eb04 	ldr.w	lr, [sp], #4
 8007028:	b004      	add	sp, #16
 800702a:	4770      	bx	lr
 800702c:	200000dc 	.word	0x200000dc

08007030 <putchar>:
 8007030:	4b02      	ldr	r3, [pc, #8]	; (800703c <putchar+0xc>)
 8007032:	4601      	mov	r1, r0
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	6882      	ldr	r2, [r0, #8]
 8007038:	f003 b83d 	b.w	800a0b6 <_putc_r>
 800703c:	200000dc 	.word	0x200000dc

08007040 <_puts_r>:
 8007040:	6a03      	ldr	r3, [r0, #32]
 8007042:	b570      	push	{r4, r5, r6, lr}
 8007044:	4605      	mov	r5, r0
 8007046:	460e      	mov	r6, r1
 8007048:	6884      	ldr	r4, [r0, #8]
 800704a:	b90b      	cbnz	r3, 8007050 <_puts_r+0x10>
 800704c:	f7ff ffa8 	bl	8006fa0 <__sinit>
 8007050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007052:	07db      	lsls	r3, r3, #31
 8007054:	d405      	bmi.n	8007062 <_puts_r+0x22>
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	0598      	lsls	r0, r3, #22
 800705a:	d402      	bmi.n	8007062 <_puts_r+0x22>
 800705c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800705e:	f000 f9bf 	bl	80073e0 <__retarget_lock_acquire_recursive>
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	0719      	lsls	r1, r3, #28
 8007066:	d513      	bpl.n	8007090 <_puts_r+0x50>
 8007068:	6923      	ldr	r3, [r4, #16]
 800706a:	b18b      	cbz	r3, 8007090 <_puts_r+0x50>
 800706c:	3e01      	subs	r6, #1
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007074:	3b01      	subs	r3, #1
 8007076:	60a3      	str	r3, [r4, #8]
 8007078:	b9e9      	cbnz	r1, 80070b6 <_puts_r+0x76>
 800707a:	2b00      	cmp	r3, #0
 800707c:	da2e      	bge.n	80070dc <_puts_r+0x9c>
 800707e:	4622      	mov	r2, r4
 8007080:	210a      	movs	r1, #10
 8007082:	4628      	mov	r0, r5
 8007084:	f000 f89b 	bl	80071be <__swbuf_r>
 8007088:	3001      	adds	r0, #1
 800708a:	d007      	beq.n	800709c <_puts_r+0x5c>
 800708c:	250a      	movs	r5, #10
 800708e:	e007      	b.n	80070a0 <_puts_r+0x60>
 8007090:	4621      	mov	r1, r4
 8007092:	4628      	mov	r0, r5
 8007094:	f000 f8d0 	bl	8007238 <__swsetup_r>
 8007098:	2800      	cmp	r0, #0
 800709a:	d0e7      	beq.n	800706c <_puts_r+0x2c>
 800709c:	f04f 35ff 	mov.w	r5, #4294967295
 80070a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a2:	07da      	lsls	r2, r3, #31
 80070a4:	d405      	bmi.n	80070b2 <_puts_r+0x72>
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	059b      	lsls	r3, r3, #22
 80070aa:	d402      	bmi.n	80070b2 <_puts_r+0x72>
 80070ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ae:	f000 f998 	bl	80073e2 <__retarget_lock_release_recursive>
 80070b2:	4628      	mov	r0, r5
 80070b4:	bd70      	pop	{r4, r5, r6, pc}
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da04      	bge.n	80070c4 <_puts_r+0x84>
 80070ba:	69a2      	ldr	r2, [r4, #24]
 80070bc:	429a      	cmp	r2, r3
 80070be:	dc06      	bgt.n	80070ce <_puts_r+0x8e>
 80070c0:	290a      	cmp	r1, #10
 80070c2:	d004      	beq.n	80070ce <_puts_r+0x8e>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	6022      	str	r2, [r4, #0]
 80070ca:	7019      	strb	r1, [r3, #0]
 80070cc:	e7cf      	b.n	800706e <_puts_r+0x2e>
 80070ce:	4622      	mov	r2, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 f874 	bl	80071be <__swbuf_r>
 80070d6:	3001      	adds	r0, #1
 80070d8:	d1c9      	bne.n	800706e <_puts_r+0x2e>
 80070da:	e7df      	b.n	800709c <_puts_r+0x5c>
 80070dc:	250a      	movs	r5, #10
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	6022      	str	r2, [r4, #0]
 80070e4:	701d      	strb	r5, [r3, #0]
 80070e6:	e7db      	b.n	80070a0 <_puts_r+0x60>

080070e8 <puts>:
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <puts+0xc>)
 80070ea:	4601      	mov	r1, r0
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	f7ff bfa7 	b.w	8007040 <_puts_r>
 80070f2:	bf00      	nop
 80070f4:	200000dc 	.word	0x200000dc

080070f8 <siprintf>:
 80070f8:	b40e      	push	{r1, r2, r3}
 80070fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070fe:	b500      	push	{lr}
 8007100:	b09c      	sub	sp, #112	; 0x70
 8007102:	ab1d      	add	r3, sp, #116	; 0x74
 8007104:	9002      	str	r0, [sp, #8]
 8007106:	9006      	str	r0, [sp, #24]
 8007108:	9107      	str	r1, [sp, #28]
 800710a:	9104      	str	r1, [sp, #16]
 800710c:	4808      	ldr	r0, [pc, #32]	; (8007130 <siprintf+0x38>)
 800710e:	4909      	ldr	r1, [pc, #36]	; (8007134 <siprintf+0x3c>)
 8007110:	f853 2b04 	ldr.w	r2, [r3], #4
 8007114:	9105      	str	r1, [sp, #20]
 8007116:	6800      	ldr	r0, [r0, #0]
 8007118:	a902      	add	r1, sp, #8
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	f002 fc80 	bl	8009a20 <_svfiprintf_r>
 8007120:	2200      	movs	r2, #0
 8007122:	9b02      	ldr	r3, [sp, #8]
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	b01c      	add	sp, #112	; 0x70
 8007128:	f85d eb04 	ldr.w	lr, [sp], #4
 800712c:	b003      	add	sp, #12
 800712e:	4770      	bx	lr
 8007130:	200000dc 	.word	0x200000dc
 8007134:	ffff0208 	.word	0xffff0208

08007138 <__sread>:
 8007138:	b510      	push	{r4, lr}
 800713a:	460c      	mov	r4, r1
 800713c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007140:	f000 f900 	bl	8007344 <_read_r>
 8007144:	2800      	cmp	r0, #0
 8007146:	bfab      	itete	ge
 8007148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800714a:	89a3      	ldrhlt	r3, [r4, #12]
 800714c:	181b      	addge	r3, r3, r0
 800714e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007152:	bfac      	ite	ge
 8007154:	6563      	strge	r3, [r4, #84]	; 0x54
 8007156:	81a3      	strhlt	r3, [r4, #12]
 8007158:	bd10      	pop	{r4, pc}

0800715a <__swrite>:
 800715a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715e:	461f      	mov	r7, r3
 8007160:	898b      	ldrh	r3, [r1, #12]
 8007162:	4605      	mov	r5, r0
 8007164:	05db      	lsls	r3, r3, #23
 8007166:	460c      	mov	r4, r1
 8007168:	4616      	mov	r6, r2
 800716a:	d505      	bpl.n	8007178 <__swrite+0x1e>
 800716c:	2302      	movs	r3, #2
 800716e:	2200      	movs	r2, #0
 8007170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007174:	f000 f8d4 	bl	8007320 <_lseek_r>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	4632      	mov	r2, r6
 800717c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	4628      	mov	r0, r5
 8007184:	463b      	mov	r3, r7
 8007186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800718a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800718e:	f000 b8eb 	b.w	8007368 <_write_r>

08007192 <__sseek>:
 8007192:	b510      	push	{r4, lr}
 8007194:	460c      	mov	r4, r1
 8007196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719a:	f000 f8c1 	bl	8007320 <_lseek_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	bf15      	itete	ne
 80071a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80071a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071ae:	81a3      	strheq	r3, [r4, #12]
 80071b0:	bf18      	it	ne
 80071b2:	81a3      	strhne	r3, [r4, #12]
 80071b4:	bd10      	pop	{r4, pc}

080071b6 <__sclose>:
 80071b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ba:	f000 b8a1 	b.w	8007300 <_close_r>

080071be <__swbuf_r>:
 80071be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c0:	460e      	mov	r6, r1
 80071c2:	4614      	mov	r4, r2
 80071c4:	4605      	mov	r5, r0
 80071c6:	b118      	cbz	r0, 80071d0 <__swbuf_r+0x12>
 80071c8:	6a03      	ldr	r3, [r0, #32]
 80071ca:	b90b      	cbnz	r3, 80071d0 <__swbuf_r+0x12>
 80071cc:	f7ff fee8 	bl	8006fa0 <__sinit>
 80071d0:	69a3      	ldr	r3, [r4, #24]
 80071d2:	60a3      	str	r3, [r4, #8]
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	071a      	lsls	r2, r3, #28
 80071d8:	d525      	bpl.n	8007226 <__swbuf_r+0x68>
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	b31b      	cbz	r3, 8007226 <__swbuf_r+0x68>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	6922      	ldr	r2, [r4, #16]
 80071e2:	b2f6      	uxtb	r6, r6
 80071e4:	1a98      	subs	r0, r3, r2
 80071e6:	6963      	ldr	r3, [r4, #20]
 80071e8:	4637      	mov	r7, r6
 80071ea:	4283      	cmp	r3, r0
 80071ec:	dc04      	bgt.n	80071f8 <__swbuf_r+0x3a>
 80071ee:	4621      	mov	r1, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f002 fed7 	bl	8009fa4 <_fflush_r>
 80071f6:	b9e0      	cbnz	r0, 8007232 <__swbuf_r+0x74>
 80071f8:	68a3      	ldr	r3, [r4, #8]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	60a3      	str	r3, [r4, #8]
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	6022      	str	r2, [r4, #0]
 8007204:	701e      	strb	r6, [r3, #0]
 8007206:	6962      	ldr	r2, [r4, #20]
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	429a      	cmp	r2, r3
 800720c:	d004      	beq.n	8007218 <__swbuf_r+0x5a>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	07db      	lsls	r3, r3, #31
 8007212:	d506      	bpl.n	8007222 <__swbuf_r+0x64>
 8007214:	2e0a      	cmp	r6, #10
 8007216:	d104      	bne.n	8007222 <__swbuf_r+0x64>
 8007218:	4621      	mov	r1, r4
 800721a:	4628      	mov	r0, r5
 800721c:	f002 fec2 	bl	8009fa4 <_fflush_r>
 8007220:	b938      	cbnz	r0, 8007232 <__swbuf_r+0x74>
 8007222:	4638      	mov	r0, r7
 8007224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007226:	4621      	mov	r1, r4
 8007228:	4628      	mov	r0, r5
 800722a:	f000 f805 	bl	8007238 <__swsetup_r>
 800722e:	2800      	cmp	r0, #0
 8007230:	d0d5      	beq.n	80071de <__swbuf_r+0x20>
 8007232:	f04f 37ff 	mov.w	r7, #4294967295
 8007236:	e7f4      	b.n	8007222 <__swbuf_r+0x64>

08007238 <__swsetup_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4b2a      	ldr	r3, [pc, #168]	; (80072e4 <__swsetup_r+0xac>)
 800723c:	4605      	mov	r5, r0
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	460c      	mov	r4, r1
 8007242:	b118      	cbz	r0, 800724c <__swsetup_r+0x14>
 8007244:	6a03      	ldr	r3, [r0, #32]
 8007246:	b90b      	cbnz	r3, 800724c <__swsetup_r+0x14>
 8007248:	f7ff feaa 	bl	8006fa0 <__sinit>
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007252:	0718      	lsls	r0, r3, #28
 8007254:	d422      	bmi.n	800729c <__swsetup_r+0x64>
 8007256:	06d9      	lsls	r1, r3, #27
 8007258:	d407      	bmi.n	800726a <__swsetup_r+0x32>
 800725a:	2309      	movs	r3, #9
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007262:	f04f 30ff 	mov.w	r0, #4294967295
 8007266:	81a3      	strh	r3, [r4, #12]
 8007268:	e034      	b.n	80072d4 <__swsetup_r+0x9c>
 800726a:	0758      	lsls	r0, r3, #29
 800726c:	d512      	bpl.n	8007294 <__swsetup_r+0x5c>
 800726e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007270:	b141      	cbz	r1, 8007284 <__swsetup_r+0x4c>
 8007272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007276:	4299      	cmp	r1, r3
 8007278:	d002      	beq.n	8007280 <__swsetup_r+0x48>
 800727a:	4628      	mov	r0, r5
 800727c:	f000 ff40 	bl	8008100 <_free_r>
 8007280:	2300      	movs	r3, #0
 8007282:	6363      	str	r3, [r4, #52]	; 0x34
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	2300      	movs	r3, #0
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	f043 0308 	orr.w	r3, r3, #8
 800729a:	81a3      	strh	r3, [r4, #12]
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	b94b      	cbnz	r3, 80072b4 <__swsetup_r+0x7c>
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072aa:	d003      	beq.n	80072b4 <__swsetup_r+0x7c>
 80072ac:	4621      	mov	r1, r4
 80072ae:	4628      	mov	r0, r5
 80072b0:	f002 fec5 	bl	800a03e <__smakebuf_r>
 80072b4:	89a0      	ldrh	r0, [r4, #12]
 80072b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072ba:	f010 0301 	ands.w	r3, r0, #1
 80072be:	d00a      	beq.n	80072d6 <__swsetup_r+0x9e>
 80072c0:	2300      	movs	r3, #0
 80072c2:	60a3      	str	r3, [r4, #8]
 80072c4:	6963      	ldr	r3, [r4, #20]
 80072c6:	425b      	negs	r3, r3
 80072c8:	61a3      	str	r3, [r4, #24]
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	b943      	cbnz	r3, 80072e0 <__swsetup_r+0xa8>
 80072ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072d2:	d1c4      	bne.n	800725e <__swsetup_r+0x26>
 80072d4:	bd38      	pop	{r3, r4, r5, pc}
 80072d6:	0781      	lsls	r1, r0, #30
 80072d8:	bf58      	it	pl
 80072da:	6963      	ldrpl	r3, [r4, #20]
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	e7f4      	b.n	80072ca <__swsetup_r+0x92>
 80072e0:	2000      	movs	r0, #0
 80072e2:	e7f7      	b.n	80072d4 <__swsetup_r+0x9c>
 80072e4:	200000dc 	.word	0x200000dc

080072e8 <memset>:
 80072e8:	4603      	mov	r3, r0
 80072ea:	4402      	add	r2, r0
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d100      	bne.n	80072f2 <memset+0xa>
 80072f0:	4770      	bx	lr
 80072f2:	f803 1b01 	strb.w	r1, [r3], #1
 80072f6:	e7f9      	b.n	80072ec <memset+0x4>

080072f8 <_localeconv_r>:
 80072f8:	4800      	ldr	r0, [pc, #0]	; (80072fc <_localeconv_r+0x4>)
 80072fa:	4770      	bx	lr
 80072fc:	200001d0 	.word	0x200001d0

08007300 <_close_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	2300      	movs	r3, #0
 8007304:	4d05      	ldr	r5, [pc, #20]	; (800731c <_close_r+0x1c>)
 8007306:	4604      	mov	r4, r0
 8007308:	4608      	mov	r0, r1
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	f7fb f9d0 	bl	80026b0 <_close>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_close_r+0x1a>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_close_r+0x1a>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	200006b4 	.word	0x200006b4

08007320 <_lseek_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	2200      	movs	r2, #0
 800732a:	4d05      	ldr	r5, [pc, #20]	; (8007340 <_lseek_r+0x20>)
 800732c:	602a      	str	r2, [r5, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f7fb f9e2 	bl	80026f8 <_lseek>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_lseek_r+0x1e>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_lseek_r+0x1e>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	200006b4 	.word	0x200006b4

08007344 <_read_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	2200      	movs	r2, #0
 800734e:	4d05      	ldr	r5, [pc, #20]	; (8007364 <_read_r+0x20>)
 8007350:	602a      	str	r2, [r5, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f7fb f98f 	bl	8002676 <_read>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d102      	bne.n	8007362 <_read_r+0x1e>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b103      	cbz	r3, 8007362 <_read_r+0x1e>
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	200006b4 	.word	0x200006b4

08007368 <_write_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4604      	mov	r4, r0
 800736c:	4608      	mov	r0, r1
 800736e:	4611      	mov	r1, r2
 8007370:	2200      	movs	r2, #0
 8007372:	4d05      	ldr	r5, [pc, #20]	; (8007388 <_write_r+0x20>)
 8007374:	602a      	str	r2, [r5, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	f7fa f988 	bl	800168c <_write>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_write_r+0x1e>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_write_r+0x1e>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	200006b4 	.word	0x200006b4

0800738c <__errno>:
 800738c:	4b01      	ldr	r3, [pc, #4]	; (8007394 <__errno+0x8>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	200000dc 	.word	0x200000dc

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	2600      	movs	r6, #0
 800739c:	4d0c      	ldr	r5, [pc, #48]	; (80073d0 <__libc_init_array+0x38>)
 800739e:	4c0d      	ldr	r4, [pc, #52]	; (80073d4 <__libc_init_array+0x3c>)
 80073a0:	1b64      	subs	r4, r4, r5
 80073a2:	10a4      	asrs	r4, r4, #2
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	f003 fb5e 	bl	800aa68 <_init>
 80073ac:	2600      	movs	r6, #0
 80073ae:	4d0a      	ldr	r5, [pc, #40]	; (80073d8 <__libc_init_array+0x40>)
 80073b0:	4c0a      	ldr	r4, [pc, #40]	; (80073dc <__libc_init_array+0x44>)
 80073b2:	1b64      	subs	r4, r4, r5
 80073b4:	10a4      	asrs	r4, r4, #2
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c0:	4798      	blx	r3
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ca:	4798      	blx	r3
 80073cc:	3601      	adds	r6, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	0800af30 	.word	0x0800af30
 80073d4:	0800af30 	.word	0x0800af30
 80073d8:	0800af30 	.word	0x0800af30
 80073dc:	0800af34 	.word	0x0800af34

080073e0 <__retarget_lock_acquire_recursive>:
 80073e0:	4770      	bx	lr

080073e2 <__retarget_lock_release_recursive>:
 80073e2:	4770      	bx	lr

080073e4 <memchr>:
 80073e4:	4603      	mov	r3, r0
 80073e6:	b510      	push	{r4, lr}
 80073e8:	b2c9      	uxtb	r1, r1
 80073ea:	4402      	add	r2, r0
 80073ec:	4293      	cmp	r3, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	d101      	bne.n	80073f6 <memchr+0x12>
 80073f2:	2000      	movs	r0, #0
 80073f4:	e003      	b.n	80073fe <memchr+0x1a>
 80073f6:	7804      	ldrb	r4, [r0, #0]
 80073f8:	3301      	adds	r3, #1
 80073fa:	428c      	cmp	r4, r1
 80073fc:	d1f6      	bne.n	80073ec <memchr+0x8>
 80073fe:	bd10      	pop	{r4, pc}

08007400 <memcpy>:
 8007400:	440a      	add	r2, r1
 8007402:	4291      	cmp	r1, r2
 8007404:	f100 33ff 	add.w	r3, r0, #4294967295
 8007408:	d100      	bne.n	800740c <memcpy+0xc>
 800740a:	4770      	bx	lr
 800740c:	b510      	push	{r4, lr}
 800740e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007412:	4291      	cmp	r1, r2
 8007414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007418:	d1f9      	bne.n	800740e <memcpy+0xe>
 800741a:	bd10      	pop	{r4, pc}

0800741c <nanf>:
 800741c:	4800      	ldr	r0, [pc, #0]	; (8007420 <nanf+0x4>)
 800741e:	4770      	bx	lr
 8007420:	7fc00000 	.word	0x7fc00000

08007424 <quorem>:
 8007424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	6903      	ldr	r3, [r0, #16]
 800742a:	690c      	ldr	r4, [r1, #16]
 800742c:	4607      	mov	r7, r0
 800742e:	42a3      	cmp	r3, r4
 8007430:	db7f      	blt.n	8007532 <quorem+0x10e>
 8007432:	3c01      	subs	r4, #1
 8007434:	f100 0514 	add.w	r5, r0, #20
 8007438:	f101 0814 	add.w	r8, r1, #20
 800743c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007446:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800744a:	3301      	adds	r3, #1
 800744c:	429a      	cmp	r2, r3
 800744e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007452:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007456:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800745a:	d331      	bcc.n	80074c0 <quorem+0x9c>
 800745c:	f04f 0e00 	mov.w	lr, #0
 8007460:	4640      	mov	r0, r8
 8007462:	46ac      	mov	ip, r5
 8007464:	46f2      	mov	sl, lr
 8007466:	f850 2b04 	ldr.w	r2, [r0], #4
 800746a:	b293      	uxth	r3, r2
 800746c:	fb06 e303 	mla	r3, r6, r3, lr
 8007470:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007474:	0c1a      	lsrs	r2, r3, #16
 8007476:	b29b      	uxth	r3, r3
 8007478:	fb06 220e 	mla	r2, r6, lr, r2
 800747c:	ebaa 0303 	sub.w	r3, sl, r3
 8007480:	f8dc a000 	ldr.w	sl, [ip]
 8007484:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007488:	fa1f fa8a 	uxth.w	sl, sl
 800748c:	4453      	add	r3, sl
 800748e:	f8dc a000 	ldr.w	sl, [ip]
 8007492:	b292      	uxth	r2, r2
 8007494:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800749c:	b29b      	uxth	r3, r3
 800749e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a2:	4581      	cmp	r9, r0
 80074a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074a8:	f84c 3b04 	str.w	r3, [ip], #4
 80074ac:	d2db      	bcs.n	8007466 <quorem+0x42>
 80074ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80074b2:	b92b      	cbnz	r3, 80074c0 <quorem+0x9c>
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	3b04      	subs	r3, #4
 80074b8:	429d      	cmp	r5, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	d32d      	bcc.n	800751a <quorem+0xf6>
 80074be:	613c      	str	r4, [r7, #16]
 80074c0:	4638      	mov	r0, r7
 80074c2:	f001 f9dd 	bl	8008880 <__mcmp>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	db23      	blt.n	8007512 <quorem+0xee>
 80074ca:	4629      	mov	r1, r5
 80074cc:	2000      	movs	r0, #0
 80074ce:	3601      	adds	r6, #1
 80074d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80074d4:	f8d1 c000 	ldr.w	ip, [r1]
 80074d8:	b293      	uxth	r3, r2
 80074da:	1ac3      	subs	r3, r0, r3
 80074dc:	0c12      	lsrs	r2, r2, #16
 80074de:	fa1f f08c 	uxth.w	r0, ip
 80074e2:	4403      	add	r3, r0
 80074e4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80074e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074f2:	45c1      	cmp	r9, r8
 80074f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074f8:	f841 3b04 	str.w	r3, [r1], #4
 80074fc:	d2e8      	bcs.n	80074d0 <quorem+0xac>
 80074fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007506:	b922      	cbnz	r2, 8007512 <quorem+0xee>
 8007508:	3b04      	subs	r3, #4
 800750a:	429d      	cmp	r5, r3
 800750c:	461a      	mov	r2, r3
 800750e:	d30a      	bcc.n	8007526 <quorem+0x102>
 8007510:	613c      	str	r4, [r7, #16]
 8007512:	4630      	mov	r0, r6
 8007514:	b003      	add	sp, #12
 8007516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	3b04      	subs	r3, #4
 800751e:	2a00      	cmp	r2, #0
 8007520:	d1cd      	bne.n	80074be <quorem+0x9a>
 8007522:	3c01      	subs	r4, #1
 8007524:	e7c8      	b.n	80074b8 <quorem+0x94>
 8007526:	6812      	ldr	r2, [r2, #0]
 8007528:	3b04      	subs	r3, #4
 800752a:	2a00      	cmp	r2, #0
 800752c:	d1f0      	bne.n	8007510 <quorem+0xec>
 800752e:	3c01      	subs	r4, #1
 8007530:	e7eb      	b.n	800750a <quorem+0xe6>
 8007532:	2000      	movs	r0, #0
 8007534:	e7ee      	b.n	8007514 <quorem+0xf0>
	...

08007538 <_dtoa_r>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	4616      	mov	r6, r2
 800753e:	461f      	mov	r7, r3
 8007540:	69c4      	ldr	r4, [r0, #28]
 8007542:	b099      	sub	sp, #100	; 0x64
 8007544:	4605      	mov	r5, r0
 8007546:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800754a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800754e:	b974      	cbnz	r4, 800756e <_dtoa_r+0x36>
 8007550:	2010      	movs	r0, #16
 8007552:	f000 fe1d 	bl	8008190 <malloc>
 8007556:	4602      	mov	r2, r0
 8007558:	61e8      	str	r0, [r5, #28]
 800755a:	b920      	cbnz	r0, 8007566 <_dtoa_r+0x2e>
 800755c:	21ef      	movs	r1, #239	; 0xef
 800755e:	4bac      	ldr	r3, [pc, #688]	; (8007810 <_dtoa_r+0x2d8>)
 8007560:	48ac      	ldr	r0, [pc, #688]	; (8007814 <_dtoa_r+0x2dc>)
 8007562:	f002 fe41 	bl	800a1e8 <__assert_func>
 8007566:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800756a:	6004      	str	r4, [r0, #0]
 800756c:	60c4      	str	r4, [r0, #12]
 800756e:	69eb      	ldr	r3, [r5, #28]
 8007570:	6819      	ldr	r1, [r3, #0]
 8007572:	b151      	cbz	r1, 800758a <_dtoa_r+0x52>
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	2301      	movs	r3, #1
 8007578:	4093      	lsls	r3, r2
 800757a:	604a      	str	r2, [r1, #4]
 800757c:	608b      	str	r3, [r1, #8]
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fefa 	bl	8008378 <_Bfree>
 8007584:	2200      	movs	r2, #0
 8007586:	69eb      	ldr	r3, [r5, #28]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	1e3b      	subs	r3, r7, #0
 800758c:	bfaf      	iteee	ge
 800758e:	2300      	movge	r3, #0
 8007590:	2201      	movlt	r2, #1
 8007592:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007596:	9305      	strlt	r3, [sp, #20]
 8007598:	bfa8      	it	ge
 800759a:	f8c8 3000 	strge.w	r3, [r8]
 800759e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80075a2:	4b9d      	ldr	r3, [pc, #628]	; (8007818 <_dtoa_r+0x2e0>)
 80075a4:	bfb8      	it	lt
 80075a6:	f8c8 2000 	strlt.w	r2, [r8]
 80075aa:	ea33 0309 	bics.w	r3, r3, r9
 80075ae:	d119      	bne.n	80075e4 <_dtoa_r+0xac>
 80075b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80075b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075bc:	4333      	orrs	r3, r6
 80075be:	f000 8589 	beq.w	80080d4 <_dtoa_r+0xb9c>
 80075c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075c4:	b953      	cbnz	r3, 80075dc <_dtoa_r+0xa4>
 80075c6:	4b95      	ldr	r3, [pc, #596]	; (800781c <_dtoa_r+0x2e4>)
 80075c8:	e023      	b.n	8007612 <_dtoa_r+0xda>
 80075ca:	4b95      	ldr	r3, [pc, #596]	; (8007820 <_dtoa_r+0x2e8>)
 80075cc:	9303      	str	r3, [sp, #12]
 80075ce:	3308      	adds	r3, #8
 80075d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	9803      	ldr	r0, [sp, #12]
 80075d6:	b019      	add	sp, #100	; 0x64
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	4b8f      	ldr	r3, [pc, #572]	; (800781c <_dtoa_r+0x2e4>)
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	3303      	adds	r3, #3
 80075e2:	e7f5      	b.n	80075d0 <_dtoa_r+0x98>
 80075e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80075e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80075ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075f0:	2200      	movs	r2, #0
 80075f2:	2300      	movs	r3, #0
 80075f4:	f7f9 f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80075f8:	4680      	mov	r8, r0
 80075fa:	b160      	cbz	r0, 8007616 <_dtoa_r+0xde>
 80075fc:	2301      	movs	r3, #1
 80075fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 8562 	beq.w	80080ce <_dtoa_r+0xb96>
 800760a:	4b86      	ldr	r3, [pc, #536]	; (8007824 <_dtoa_r+0x2ec>)
 800760c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	3b01      	subs	r3, #1
 8007612:	9303      	str	r3, [sp, #12]
 8007614:	e7de      	b.n	80075d4 <_dtoa_r+0x9c>
 8007616:	ab16      	add	r3, sp, #88	; 0x58
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	ab17      	add	r3, sp, #92	; 0x5c
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	4628      	mov	r0, r5
 8007620:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007624:	f001 fa3c 	bl	8008aa0 <__d2b>
 8007628:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800762c:	4682      	mov	sl, r0
 800762e:	2c00      	cmp	r4, #0
 8007630:	d07e      	beq.n	8007730 <_dtoa_r+0x1f8>
 8007632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007638:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800763c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007640:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007644:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007648:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800764c:	4619      	mov	r1, r3
 800764e:	2200      	movs	r2, #0
 8007650:	4b75      	ldr	r3, [pc, #468]	; (8007828 <_dtoa_r+0x2f0>)
 8007652:	f7f8 fd89 	bl	8000168 <__aeabi_dsub>
 8007656:	a368      	add	r3, pc, #416	; (adr r3, 80077f8 <_dtoa_r+0x2c0>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f8 ff3c 	bl	80004d8 <__aeabi_dmul>
 8007660:	a367      	add	r3, pc, #412	; (adr r3, 8007800 <_dtoa_r+0x2c8>)
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f7f8 fd81 	bl	800016c <__adddf3>
 800766a:	4606      	mov	r6, r0
 800766c:	4620      	mov	r0, r4
 800766e:	460f      	mov	r7, r1
 8007670:	f7f8 fec8 	bl	8000404 <__aeabi_i2d>
 8007674:	a364      	add	r3, pc, #400	; (adr r3, 8007808 <_dtoa_r+0x2d0>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 ff2d 	bl	80004d8 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4630      	mov	r0, r6
 8007684:	4639      	mov	r1, r7
 8007686:	f7f8 fd71 	bl	800016c <__adddf3>
 800768a:	4606      	mov	r6, r0
 800768c:	460f      	mov	r7, r1
 800768e:	f7f9 f9d3 	bl	8000a38 <__aeabi_d2iz>
 8007692:	2200      	movs	r2, #0
 8007694:	4683      	mov	fp, r0
 8007696:	2300      	movs	r3, #0
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f9 f98e 	bl	80009bc <__aeabi_dcmplt>
 80076a0:	b148      	cbz	r0, 80076b6 <_dtoa_r+0x17e>
 80076a2:	4658      	mov	r0, fp
 80076a4:	f7f8 feae 	bl	8000404 <__aeabi_i2d>
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	f7f9 f97c 	bl	80009a8 <__aeabi_dcmpeq>
 80076b0:	b908      	cbnz	r0, 80076b6 <_dtoa_r+0x17e>
 80076b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076b6:	f1bb 0f16 	cmp.w	fp, #22
 80076ba:	d857      	bhi.n	800776c <_dtoa_r+0x234>
 80076bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076c0:	4b5a      	ldr	r3, [pc, #360]	; (800782c <_dtoa_r+0x2f4>)
 80076c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f7f9 f977 	bl	80009bc <__aeabi_dcmplt>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d04e      	beq.n	8007770 <_dtoa_r+0x238>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80076da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80076dc:	1b1b      	subs	r3, r3, r4
 80076de:	1e5a      	subs	r2, r3, #1
 80076e0:	bf46      	itte	mi
 80076e2:	f1c3 0901 	rsbmi	r9, r3, #1
 80076e6:	2300      	movmi	r3, #0
 80076e8:	f04f 0900 	movpl.w	r9, #0
 80076ec:	9209      	str	r2, [sp, #36]	; 0x24
 80076ee:	bf48      	it	mi
 80076f0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80076f2:	f1bb 0f00 	cmp.w	fp, #0
 80076f6:	db3d      	blt.n	8007774 <_dtoa_r+0x23c>
 80076f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80076fe:	445b      	add	r3, fp
 8007700:	9309      	str	r3, [sp, #36]	; 0x24
 8007702:	2300      	movs	r3, #0
 8007704:	930a      	str	r3, [sp, #40]	; 0x28
 8007706:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007708:	2b09      	cmp	r3, #9
 800770a:	d867      	bhi.n	80077dc <_dtoa_r+0x2a4>
 800770c:	2b05      	cmp	r3, #5
 800770e:	bfc4      	itt	gt
 8007710:	3b04      	subgt	r3, #4
 8007712:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007716:	bfc8      	it	gt
 8007718:	2400      	movgt	r4, #0
 800771a:	f1a3 0302 	sub.w	r3, r3, #2
 800771e:	bfd8      	it	le
 8007720:	2401      	movle	r4, #1
 8007722:	2b03      	cmp	r3, #3
 8007724:	f200 8086 	bhi.w	8007834 <_dtoa_r+0x2fc>
 8007728:	e8df f003 	tbb	[pc, r3]
 800772c:	5637392c 	.word	0x5637392c
 8007730:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007734:	441c      	add	r4, r3
 8007736:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800773a:	2b20      	cmp	r3, #32
 800773c:	bfc1      	itttt	gt
 800773e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007742:	fa09 f903 	lslgt.w	r9, r9, r3
 8007746:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800774a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800774e:	bfd6      	itet	le
 8007750:	f1c3 0320 	rsble	r3, r3, #32
 8007754:	ea49 0003 	orrgt.w	r0, r9, r3
 8007758:	fa06 f003 	lslle.w	r0, r6, r3
 800775c:	f7f8 fe42 	bl	80003e4 <__aeabi_ui2d>
 8007760:	2201      	movs	r2, #1
 8007762:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007766:	3c01      	subs	r4, #1
 8007768:	9213      	str	r2, [sp, #76]	; 0x4c
 800776a:	e76f      	b.n	800764c <_dtoa_r+0x114>
 800776c:	2301      	movs	r3, #1
 800776e:	e7b3      	b.n	80076d8 <_dtoa_r+0x1a0>
 8007770:	900f      	str	r0, [sp, #60]	; 0x3c
 8007772:	e7b2      	b.n	80076da <_dtoa_r+0x1a2>
 8007774:	f1cb 0300 	rsb	r3, fp, #0
 8007778:	930a      	str	r3, [sp, #40]	; 0x28
 800777a:	2300      	movs	r3, #0
 800777c:	eba9 090b 	sub.w	r9, r9, fp
 8007780:	930e      	str	r3, [sp, #56]	; 0x38
 8007782:	e7c0      	b.n	8007706 <_dtoa_r+0x1ce>
 8007784:	2300      	movs	r3, #0
 8007786:	930b      	str	r3, [sp, #44]	; 0x2c
 8007788:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800778a:	2b00      	cmp	r3, #0
 800778c:	dc55      	bgt.n	800783a <_dtoa_r+0x302>
 800778e:	2301      	movs	r3, #1
 8007790:	461a      	mov	r2, r3
 8007792:	9306      	str	r3, [sp, #24]
 8007794:	9308      	str	r3, [sp, #32]
 8007796:	9223      	str	r2, [sp, #140]	; 0x8c
 8007798:	e00b      	b.n	80077b2 <_dtoa_r+0x27a>
 800779a:	2301      	movs	r3, #1
 800779c:	e7f3      	b.n	8007786 <_dtoa_r+0x24e>
 800779e:	2300      	movs	r3, #0
 80077a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077a4:	445b      	add	r3, fp
 80077a6:	9306      	str	r3, [sp, #24]
 80077a8:	3301      	adds	r3, #1
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	9308      	str	r3, [sp, #32]
 80077ae:	bfb8      	it	lt
 80077b0:	2301      	movlt	r3, #1
 80077b2:	2100      	movs	r1, #0
 80077b4:	2204      	movs	r2, #4
 80077b6:	69e8      	ldr	r0, [r5, #28]
 80077b8:	f102 0614 	add.w	r6, r2, #20
 80077bc:	429e      	cmp	r6, r3
 80077be:	d940      	bls.n	8007842 <_dtoa_r+0x30a>
 80077c0:	6041      	str	r1, [r0, #4]
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 fd98 	bl	80082f8 <_Balloc>
 80077c8:	9003      	str	r0, [sp, #12]
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d13c      	bne.n	8007848 <_dtoa_r+0x310>
 80077ce:	4602      	mov	r2, r0
 80077d0:	f240 11af 	movw	r1, #431	; 0x1af
 80077d4:	4b16      	ldr	r3, [pc, #88]	; (8007830 <_dtoa_r+0x2f8>)
 80077d6:	e6c3      	b.n	8007560 <_dtoa_r+0x28>
 80077d8:	2301      	movs	r3, #1
 80077da:	e7e1      	b.n	80077a0 <_dtoa_r+0x268>
 80077dc:	2401      	movs	r4, #1
 80077de:	2300      	movs	r3, #0
 80077e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80077e2:	9322      	str	r3, [sp, #136]	; 0x88
 80077e4:	f04f 33ff 	mov.w	r3, #4294967295
 80077e8:	2200      	movs	r2, #0
 80077ea:	9306      	str	r3, [sp, #24]
 80077ec:	9308      	str	r3, [sp, #32]
 80077ee:	2312      	movs	r3, #18
 80077f0:	e7d1      	b.n	8007796 <_dtoa_r+0x25e>
 80077f2:	bf00      	nop
 80077f4:	f3af 8000 	nop.w
 80077f8:	636f4361 	.word	0x636f4361
 80077fc:	3fd287a7 	.word	0x3fd287a7
 8007800:	8b60c8b3 	.word	0x8b60c8b3
 8007804:	3fc68a28 	.word	0x3fc68a28
 8007808:	509f79fb 	.word	0x509f79fb
 800780c:	3fd34413 	.word	0x3fd34413
 8007810:	0800ab48 	.word	0x0800ab48
 8007814:	0800ab5f 	.word	0x0800ab5f
 8007818:	7ff00000 	.word	0x7ff00000
 800781c:	0800ab44 	.word	0x0800ab44
 8007820:	0800ab3b 	.word	0x0800ab3b
 8007824:	0800ab13 	.word	0x0800ab13
 8007828:	3ff80000 	.word	0x3ff80000
 800782c:	0800ac50 	.word	0x0800ac50
 8007830:	0800abb7 	.word	0x0800abb7
 8007834:	2301      	movs	r3, #1
 8007836:	930b      	str	r3, [sp, #44]	; 0x2c
 8007838:	e7d4      	b.n	80077e4 <_dtoa_r+0x2ac>
 800783a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800783c:	9306      	str	r3, [sp, #24]
 800783e:	9308      	str	r3, [sp, #32]
 8007840:	e7b7      	b.n	80077b2 <_dtoa_r+0x27a>
 8007842:	3101      	adds	r1, #1
 8007844:	0052      	lsls	r2, r2, #1
 8007846:	e7b7      	b.n	80077b8 <_dtoa_r+0x280>
 8007848:	69eb      	ldr	r3, [r5, #28]
 800784a:	9a03      	ldr	r2, [sp, #12]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	9b08      	ldr	r3, [sp, #32]
 8007850:	2b0e      	cmp	r3, #14
 8007852:	f200 80a8 	bhi.w	80079a6 <_dtoa_r+0x46e>
 8007856:	2c00      	cmp	r4, #0
 8007858:	f000 80a5 	beq.w	80079a6 <_dtoa_r+0x46e>
 800785c:	f1bb 0f00 	cmp.w	fp, #0
 8007860:	dd34      	ble.n	80078cc <_dtoa_r+0x394>
 8007862:	4b9a      	ldr	r3, [pc, #616]	; (8007acc <_dtoa_r+0x594>)
 8007864:	f00b 020f 	and.w	r2, fp, #15
 8007868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800786c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007870:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007874:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007878:	ea4f 142b 	mov.w	r4, fp, asr #4
 800787c:	d016      	beq.n	80078ac <_dtoa_r+0x374>
 800787e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007882:	4b93      	ldr	r3, [pc, #588]	; (8007ad0 <_dtoa_r+0x598>)
 8007884:	2703      	movs	r7, #3
 8007886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800788a:	f7f8 ff4f 	bl	800072c <__aeabi_ddiv>
 800788e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007892:	f004 040f 	and.w	r4, r4, #15
 8007896:	4e8e      	ldr	r6, [pc, #568]	; (8007ad0 <_dtoa_r+0x598>)
 8007898:	b954      	cbnz	r4, 80078b0 <_dtoa_r+0x378>
 800789a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800789e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a2:	f7f8 ff43 	bl	800072c <__aeabi_ddiv>
 80078a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078aa:	e029      	b.n	8007900 <_dtoa_r+0x3c8>
 80078ac:	2702      	movs	r7, #2
 80078ae:	e7f2      	b.n	8007896 <_dtoa_r+0x35e>
 80078b0:	07e1      	lsls	r1, r4, #31
 80078b2:	d508      	bpl.n	80078c6 <_dtoa_r+0x38e>
 80078b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078bc:	f7f8 fe0c 	bl	80004d8 <__aeabi_dmul>
 80078c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078c4:	3701      	adds	r7, #1
 80078c6:	1064      	asrs	r4, r4, #1
 80078c8:	3608      	adds	r6, #8
 80078ca:	e7e5      	b.n	8007898 <_dtoa_r+0x360>
 80078cc:	f000 80a5 	beq.w	8007a1a <_dtoa_r+0x4e2>
 80078d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078d4:	f1cb 0400 	rsb	r4, fp, #0
 80078d8:	4b7c      	ldr	r3, [pc, #496]	; (8007acc <_dtoa_r+0x594>)
 80078da:	f004 020f 	and.w	r2, r4, #15
 80078de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f8 fdf7 	bl	80004d8 <__aeabi_dmul>
 80078ea:	2702      	movs	r7, #2
 80078ec:	2300      	movs	r3, #0
 80078ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078f2:	4e77      	ldr	r6, [pc, #476]	; (8007ad0 <_dtoa_r+0x598>)
 80078f4:	1124      	asrs	r4, r4, #4
 80078f6:	2c00      	cmp	r4, #0
 80078f8:	f040 8084 	bne.w	8007a04 <_dtoa_r+0x4cc>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1d2      	bne.n	80078a6 <_dtoa_r+0x36e>
 8007900:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007904:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8087 	beq.w	8007a1e <_dtoa_r+0x4e6>
 8007910:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007914:	2200      	movs	r2, #0
 8007916:	4b6f      	ldr	r3, [pc, #444]	; (8007ad4 <_dtoa_r+0x59c>)
 8007918:	f7f9 f850 	bl	80009bc <__aeabi_dcmplt>
 800791c:	2800      	cmp	r0, #0
 800791e:	d07e      	beq.n	8007a1e <_dtoa_r+0x4e6>
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d07b      	beq.n	8007a1e <_dtoa_r+0x4e6>
 8007926:	9b06      	ldr	r3, [sp, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	dd38      	ble.n	800799e <_dtoa_r+0x466>
 800792c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007930:	2200      	movs	r2, #0
 8007932:	4b69      	ldr	r3, [pc, #420]	; (8007ad8 <_dtoa_r+0x5a0>)
 8007934:	f7f8 fdd0 	bl	80004d8 <__aeabi_dmul>
 8007938:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800793c:	9c06      	ldr	r4, [sp, #24]
 800793e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007942:	3701      	adds	r7, #1
 8007944:	4638      	mov	r0, r7
 8007946:	f7f8 fd5d 	bl	8000404 <__aeabi_i2d>
 800794a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800794e:	f7f8 fdc3 	bl	80004d8 <__aeabi_dmul>
 8007952:	2200      	movs	r2, #0
 8007954:	4b61      	ldr	r3, [pc, #388]	; (8007adc <_dtoa_r+0x5a4>)
 8007956:	f7f8 fc09 	bl	800016c <__adddf3>
 800795a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800795e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007962:	9611      	str	r6, [sp, #68]	; 0x44
 8007964:	2c00      	cmp	r4, #0
 8007966:	d15d      	bne.n	8007a24 <_dtoa_r+0x4ec>
 8007968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800796c:	2200      	movs	r2, #0
 800796e:	4b5c      	ldr	r3, [pc, #368]	; (8007ae0 <_dtoa_r+0x5a8>)
 8007970:	f7f8 fbfa 	bl	8000168 <__aeabi_dsub>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800797c:	4633      	mov	r3, r6
 800797e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007980:	f7f9 f83a 	bl	80009f8 <__aeabi_dcmpgt>
 8007984:	2800      	cmp	r0, #0
 8007986:	f040 8295 	bne.w	8007eb4 <_dtoa_r+0x97c>
 800798a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800798e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007990:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007994:	f7f9 f812 	bl	80009bc <__aeabi_dcmplt>
 8007998:	2800      	cmp	r0, #0
 800799a:	f040 8289 	bne.w	8007eb0 <_dtoa_r+0x978>
 800799e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80079a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80079a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f2c0 8151 	blt.w	8007c50 <_dtoa_r+0x718>
 80079ae:	f1bb 0f0e 	cmp.w	fp, #14
 80079b2:	f300 814d 	bgt.w	8007c50 <_dtoa_r+0x718>
 80079b6:	4b45      	ldr	r3, [pc, #276]	; (8007acc <_dtoa_r+0x594>)
 80079b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80079c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f280 80da 	bge.w	8007b80 <_dtoa_r+0x648>
 80079cc:	9b08      	ldr	r3, [sp, #32]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f300 80d6 	bgt.w	8007b80 <_dtoa_r+0x648>
 80079d4:	f040 826b 	bne.w	8007eae <_dtoa_r+0x976>
 80079d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079dc:	2200      	movs	r2, #0
 80079de:	4b40      	ldr	r3, [pc, #256]	; (8007ae0 <_dtoa_r+0x5a8>)
 80079e0:	f7f8 fd7a 	bl	80004d8 <__aeabi_dmul>
 80079e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079e8:	f7f8 fffc 	bl	80009e4 <__aeabi_dcmpge>
 80079ec:	9c08      	ldr	r4, [sp, #32]
 80079ee:	4626      	mov	r6, r4
 80079f0:	2800      	cmp	r0, #0
 80079f2:	f040 8241 	bne.w	8007e78 <_dtoa_r+0x940>
 80079f6:	2331      	movs	r3, #49	; 0x31
 80079f8:	9f03      	ldr	r7, [sp, #12]
 80079fa:	f10b 0b01 	add.w	fp, fp, #1
 80079fe:	f807 3b01 	strb.w	r3, [r7], #1
 8007a02:	e23d      	b.n	8007e80 <_dtoa_r+0x948>
 8007a04:	07e2      	lsls	r2, r4, #31
 8007a06:	d505      	bpl.n	8007a14 <_dtoa_r+0x4dc>
 8007a08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a0c:	f7f8 fd64 	bl	80004d8 <__aeabi_dmul>
 8007a10:	2301      	movs	r3, #1
 8007a12:	3701      	adds	r7, #1
 8007a14:	1064      	asrs	r4, r4, #1
 8007a16:	3608      	adds	r6, #8
 8007a18:	e76d      	b.n	80078f6 <_dtoa_r+0x3be>
 8007a1a:	2702      	movs	r7, #2
 8007a1c:	e770      	b.n	8007900 <_dtoa_r+0x3c8>
 8007a1e:	46d8      	mov	r8, fp
 8007a20:	9c08      	ldr	r4, [sp, #32]
 8007a22:	e78f      	b.n	8007944 <_dtoa_r+0x40c>
 8007a24:	9903      	ldr	r1, [sp, #12]
 8007a26:	4b29      	ldr	r3, [pc, #164]	; (8007acc <_dtoa_r+0x594>)
 8007a28:	4421      	add	r1, r4
 8007a2a:	9112      	str	r1, [sp, #72]	; 0x48
 8007a2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a32:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a3a:	2900      	cmp	r1, #0
 8007a3c:	d054      	beq.n	8007ae8 <_dtoa_r+0x5b0>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	4928      	ldr	r1, [pc, #160]	; (8007ae4 <_dtoa_r+0x5ac>)
 8007a42:	f7f8 fe73 	bl	800072c <__aeabi_ddiv>
 8007a46:	463b      	mov	r3, r7
 8007a48:	4632      	mov	r2, r6
 8007a4a:	f7f8 fb8d 	bl	8000168 <__aeabi_dsub>
 8007a4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a52:	9f03      	ldr	r7, [sp, #12]
 8007a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a58:	f7f8 ffee 	bl	8000a38 <__aeabi_d2iz>
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	f7f8 fcd1 	bl	8000404 <__aeabi_i2d>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a6a:	f7f8 fb7d 	bl	8000168 <__aeabi_dsub>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	3430      	adds	r4, #48	; 0x30
 8007a74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a7c:	f807 4b01 	strb.w	r4, [r7], #1
 8007a80:	f7f8 ff9c 	bl	80009bc <__aeabi_dcmplt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d173      	bne.n	8007b70 <_dtoa_r+0x638>
 8007a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	4911      	ldr	r1, [pc, #68]	; (8007ad4 <_dtoa_r+0x59c>)
 8007a90:	f7f8 fb6a 	bl	8000168 <__aeabi_dsub>
 8007a94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a98:	f7f8 ff90 	bl	80009bc <__aeabi_dcmplt>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f040 80b6 	bne.w	8007c0e <_dtoa_r+0x6d6>
 8007aa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007aa4:	429f      	cmp	r7, r3
 8007aa6:	f43f af7a 	beq.w	800799e <_dtoa_r+0x466>
 8007aaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aae:	2200      	movs	r2, #0
 8007ab0:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <_dtoa_r+0x5a0>)
 8007ab2:	f7f8 fd11 	bl	80004d8 <__aeabi_dmul>
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <_dtoa_r+0x5a0>)
 8007ac2:	f7f8 fd09 	bl	80004d8 <__aeabi_dmul>
 8007ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aca:	e7c3      	b.n	8007a54 <_dtoa_r+0x51c>
 8007acc:	0800ac50 	.word	0x0800ac50
 8007ad0:	0800ac28 	.word	0x0800ac28
 8007ad4:	3ff00000 	.word	0x3ff00000
 8007ad8:	40240000 	.word	0x40240000
 8007adc:	401c0000 	.word	0x401c0000
 8007ae0:	40140000 	.word	0x40140000
 8007ae4:	3fe00000 	.word	0x3fe00000
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 fcf4 	bl	80004d8 <__aeabi_dmul>
 8007af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007af2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007af6:	9c03      	ldr	r4, [sp, #12]
 8007af8:	9314      	str	r3, [sp, #80]	; 0x50
 8007afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007afe:	f7f8 ff9b 	bl	8000a38 <__aeabi_d2iz>
 8007b02:	9015      	str	r0, [sp, #84]	; 0x54
 8007b04:	f7f8 fc7e 	bl	8000404 <__aeabi_i2d>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b10:	f7f8 fb2a 	bl	8000168 <__aeabi_dsub>
 8007b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b16:	4606      	mov	r6, r0
 8007b18:	3330      	adds	r3, #48	; 0x30
 8007b1a:	f804 3b01 	strb.w	r3, [r4], #1
 8007b1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b20:	460f      	mov	r7, r1
 8007b22:	429c      	cmp	r4, r3
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	d124      	bne.n	8007b74 <_dtoa_r+0x63c>
 8007b2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b2e:	4baf      	ldr	r3, [pc, #700]	; (8007dec <_dtoa_r+0x8b4>)
 8007b30:	f7f8 fb1c 	bl	800016c <__adddf3>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4630      	mov	r0, r6
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	f7f8 ff5c 	bl	80009f8 <__aeabi_dcmpgt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d163      	bne.n	8007c0c <_dtoa_r+0x6d4>
 8007b44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b48:	2000      	movs	r0, #0
 8007b4a:	49a8      	ldr	r1, [pc, #672]	; (8007dec <_dtoa_r+0x8b4>)
 8007b4c:	f7f8 fb0c 	bl	8000168 <__aeabi_dsub>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4630      	mov	r0, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	f7f8 ff30 	bl	80009bc <__aeabi_dcmplt>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f43f af1e 	beq.w	800799e <_dtoa_r+0x466>
 8007b62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007b64:	1e7b      	subs	r3, r7, #1
 8007b66:	9314      	str	r3, [sp, #80]	; 0x50
 8007b68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007b6c:	2b30      	cmp	r3, #48	; 0x30
 8007b6e:	d0f8      	beq.n	8007b62 <_dtoa_r+0x62a>
 8007b70:	46c3      	mov	fp, r8
 8007b72:	e03b      	b.n	8007bec <_dtoa_r+0x6b4>
 8007b74:	4b9e      	ldr	r3, [pc, #632]	; (8007df0 <_dtoa_r+0x8b8>)
 8007b76:	f7f8 fcaf 	bl	80004d8 <__aeabi_dmul>
 8007b7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b7e:	e7bc      	b.n	8007afa <_dtoa_r+0x5c2>
 8007b80:	9f03      	ldr	r7, [sp, #12]
 8007b82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007b86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	f7f8 fdcd 	bl	800072c <__aeabi_ddiv>
 8007b92:	f7f8 ff51 	bl	8000a38 <__aeabi_d2iz>
 8007b96:	4604      	mov	r4, r0
 8007b98:	f7f8 fc34 	bl	8000404 <__aeabi_i2d>
 8007b9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ba0:	f7f8 fc9a 	bl	80004d8 <__aeabi_dmul>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4640      	mov	r0, r8
 8007baa:	4649      	mov	r1, r9
 8007bac:	f7f8 fadc 	bl	8000168 <__aeabi_dsub>
 8007bb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007bb4:	f807 6b01 	strb.w	r6, [r7], #1
 8007bb8:	9e03      	ldr	r6, [sp, #12]
 8007bba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007bbe:	1bbe      	subs	r6, r7, r6
 8007bc0:	45b4      	cmp	ip, r6
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	d136      	bne.n	8007c36 <_dtoa_r+0x6fe>
 8007bc8:	f7f8 fad0 	bl	800016c <__adddf3>
 8007bcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	4689      	mov	r9, r1
 8007bd4:	f7f8 ff10 	bl	80009f8 <__aeabi_dcmpgt>
 8007bd8:	bb58      	cbnz	r0, 8007c32 <_dtoa_r+0x6fa>
 8007bda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 fee1 	bl	80009a8 <__aeabi_dcmpeq>
 8007be6:	b108      	cbz	r0, 8007bec <_dtoa_r+0x6b4>
 8007be8:	07e3      	lsls	r3, r4, #31
 8007bea:	d422      	bmi.n	8007c32 <_dtoa_r+0x6fa>
 8007bec:	4651      	mov	r1, sl
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fbc2 	bl	8008378 <_Bfree>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bf8:	703b      	strb	r3, [r7, #0]
 8007bfa:	f10b 0301 	add.w	r3, fp, #1
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f43f ace6 	beq.w	80075d4 <_dtoa_r+0x9c>
 8007c08:	601f      	str	r7, [r3, #0]
 8007c0a:	e4e3      	b.n	80075d4 <_dtoa_r+0x9c>
 8007c0c:	4627      	mov	r7, r4
 8007c0e:	463b      	mov	r3, r7
 8007c10:	461f      	mov	r7, r3
 8007c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c16:	2a39      	cmp	r2, #57	; 0x39
 8007c18:	d107      	bne.n	8007c2a <_dtoa_r+0x6f2>
 8007c1a:	9a03      	ldr	r2, [sp, #12]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d1f7      	bne.n	8007c10 <_dtoa_r+0x6d8>
 8007c20:	2230      	movs	r2, #48	; 0x30
 8007c22:	9903      	ldr	r1, [sp, #12]
 8007c24:	f108 0801 	add.w	r8, r8, #1
 8007c28:	700a      	strb	r2, [r1, #0]
 8007c2a:	781a      	ldrb	r2, [r3, #0]
 8007c2c:	3201      	adds	r2, #1
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e79e      	b.n	8007b70 <_dtoa_r+0x638>
 8007c32:	46d8      	mov	r8, fp
 8007c34:	e7eb      	b.n	8007c0e <_dtoa_r+0x6d6>
 8007c36:	2200      	movs	r2, #0
 8007c38:	4b6d      	ldr	r3, [pc, #436]	; (8007df0 <_dtoa_r+0x8b8>)
 8007c3a:	f7f8 fc4d 	bl	80004d8 <__aeabi_dmul>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2300      	movs	r3, #0
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	f7f8 feaf 	bl	80009a8 <__aeabi_dcmpeq>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d09b      	beq.n	8007b86 <_dtoa_r+0x64e>
 8007c4e:	e7cd      	b.n	8007bec <_dtoa_r+0x6b4>
 8007c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	f000 80c4 	beq.w	8007de0 <_dtoa_r+0x8a8>
 8007c58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c5a:	2a01      	cmp	r2, #1
 8007c5c:	f300 80a8 	bgt.w	8007db0 <_dtoa_r+0x878>
 8007c60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c62:	2a00      	cmp	r2, #0
 8007c64:	f000 80a0 	beq.w	8007da8 <_dtoa_r+0x870>
 8007c68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c6c:	464f      	mov	r7, r9
 8007c6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c72:	2101      	movs	r1, #1
 8007c74:	441a      	add	r2, r3
 8007c76:	4628      	mov	r0, r5
 8007c78:	4499      	add	r9, r3
 8007c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c7c:	f000 fc7c 	bl	8008578 <__i2b>
 8007c80:	4606      	mov	r6, r0
 8007c82:	b15f      	cbz	r7, 8007c9c <_dtoa_r+0x764>
 8007c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	dd08      	ble.n	8007c9c <_dtoa_r+0x764>
 8007c8a:	42bb      	cmp	r3, r7
 8007c8c:	bfa8      	it	ge
 8007c8e:	463b      	movge	r3, r7
 8007c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c92:	eba9 0903 	sub.w	r9, r9, r3
 8007c96:	1aff      	subs	r7, r7, r3
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9e:	b1f3      	cbz	r3, 8007cde <_dtoa_r+0x7a6>
 8007ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 80a0 	beq.w	8007de8 <_dtoa_r+0x8b0>
 8007ca8:	2c00      	cmp	r4, #0
 8007caa:	dd10      	ble.n	8007cce <_dtoa_r+0x796>
 8007cac:	4631      	mov	r1, r6
 8007cae:	4622      	mov	r2, r4
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f000 fd1f 	bl	80086f4 <__pow5mult>
 8007cb6:	4652      	mov	r2, sl
 8007cb8:	4601      	mov	r1, r0
 8007cba:	4606      	mov	r6, r0
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f000 fc71 	bl	80085a4 <__multiply>
 8007cc2:	4680      	mov	r8, r0
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 fb56 	bl	8008378 <_Bfree>
 8007ccc:	46c2      	mov	sl, r8
 8007cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd0:	1b1a      	subs	r2, r3, r4
 8007cd2:	d004      	beq.n	8007cde <_dtoa_r+0x7a6>
 8007cd4:	4651      	mov	r1, sl
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 fd0c 	bl	80086f4 <__pow5mult>
 8007cdc:	4682      	mov	sl, r0
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 fc49 	bl	8008578 <__i2b>
 8007ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ce8:	4604      	mov	r4, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f340 8082 	ble.w	8007df4 <_dtoa_r+0x8bc>
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 fcfd 	bl	80086f4 <__pow5mult>
 8007cfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	dd7b      	ble.n	8007dfa <_dtoa_r+0x8c2>
 8007d02:	f04f 0800 	mov.w	r8, #0
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d0c:	6918      	ldr	r0, [r3, #16]
 8007d0e:	f000 fbe5 	bl	80084dc <__hi0bits>
 8007d12:	f1c0 0020 	rsb	r0, r0, #32
 8007d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d18:	4418      	add	r0, r3
 8007d1a:	f010 001f 	ands.w	r0, r0, #31
 8007d1e:	f000 8092 	beq.w	8007e46 <_dtoa_r+0x90e>
 8007d22:	f1c0 0320 	rsb	r3, r0, #32
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	f340 8085 	ble.w	8007e36 <_dtoa_r+0x8fe>
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	f1c0 001c 	rsb	r0, r0, #28
 8007d32:	4403      	add	r3, r0
 8007d34:	4481      	add	r9, r0
 8007d36:	4407      	add	r7, r0
 8007d38:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3a:	f1b9 0f00 	cmp.w	r9, #0
 8007d3e:	dd05      	ble.n	8007d4c <_dtoa_r+0x814>
 8007d40:	4651      	mov	r1, sl
 8007d42:	464a      	mov	r2, r9
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 fd2f 	bl	80087a8 <__lshift>
 8007d4a:	4682      	mov	sl, r0
 8007d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dd05      	ble.n	8007d5e <_dtoa_r+0x826>
 8007d52:	4621      	mov	r1, r4
 8007d54:	461a      	mov	r2, r3
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 fd26 	bl	80087a8 <__lshift>
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d072      	beq.n	8007e4a <_dtoa_r+0x912>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4650      	mov	r0, sl
 8007d68:	f000 fd8a 	bl	8008880 <__mcmp>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	da6c      	bge.n	8007e4a <_dtoa_r+0x912>
 8007d70:	2300      	movs	r3, #0
 8007d72:	4651      	mov	r1, sl
 8007d74:	220a      	movs	r2, #10
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 fb20 	bl	80083bc <__multadd>
 8007d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d7e:	4682      	mov	sl, r0
 8007d80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 81ac 	beq.w	80080e2 <_dtoa_r+0xbaa>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	220a      	movs	r2, #10
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 fb13 	bl	80083bc <__multadd>
 8007d96:	9b06      	ldr	r3, [sp, #24]
 8007d98:	4606      	mov	r6, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f300 8093 	bgt.w	8007ec6 <_dtoa_r+0x98e>
 8007da0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	dc59      	bgt.n	8007e5a <_dtoa_r+0x922>
 8007da6:	e08e      	b.n	8007ec6 <_dtoa_r+0x98e>
 8007da8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007daa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007dae:	e75d      	b.n	8007c6c <_dtoa_r+0x734>
 8007db0:	9b08      	ldr	r3, [sp, #32]
 8007db2:	1e5c      	subs	r4, r3, #1
 8007db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db6:	42a3      	cmp	r3, r4
 8007db8:	bfbf      	itttt	lt
 8007dba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007dbc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007dbe:	1ae3      	sublt	r3, r4, r3
 8007dc0:	18d2      	addlt	r2, r2, r3
 8007dc2:	bfa8      	it	ge
 8007dc4:	1b1c      	subge	r4, r3, r4
 8007dc6:	9b08      	ldr	r3, [sp, #32]
 8007dc8:	bfbe      	ittt	lt
 8007dca:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007dcc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007dce:	2400      	movlt	r4, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bfb5      	itete	lt
 8007dd4:	eba9 0703 	sublt.w	r7, r9, r3
 8007dd8:	464f      	movge	r7, r9
 8007dda:	2300      	movlt	r3, #0
 8007ddc:	9b08      	ldrge	r3, [sp, #32]
 8007dde:	e747      	b.n	8007c70 <_dtoa_r+0x738>
 8007de0:	464f      	mov	r7, r9
 8007de2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007de4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007de6:	e74c      	b.n	8007c82 <_dtoa_r+0x74a>
 8007de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dea:	e773      	b.n	8007cd4 <_dtoa_r+0x79c>
 8007dec:	3fe00000 	.word	0x3fe00000
 8007df0:	40240000 	.word	0x40240000
 8007df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	dc18      	bgt.n	8007e2c <_dtoa_r+0x8f4>
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	b9b3      	cbnz	r3, 8007e2c <_dtoa_r+0x8f4>
 8007dfe:	9b05      	ldr	r3, [sp, #20]
 8007e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e04:	b993      	cbnz	r3, 8007e2c <_dtoa_r+0x8f4>
 8007e06:	9b05      	ldr	r3, [sp, #20]
 8007e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e0c:	0d1b      	lsrs	r3, r3, #20
 8007e0e:	051b      	lsls	r3, r3, #20
 8007e10:	b17b      	cbz	r3, 8007e32 <_dtoa_r+0x8fa>
 8007e12:	f04f 0801 	mov.w	r8, #1
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	f109 0901 	add.w	r9, r9, #1
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f47f af6f 	bne.w	8007d06 <_dtoa_r+0x7ce>
 8007e28:	2001      	movs	r0, #1
 8007e2a:	e774      	b.n	8007d16 <_dtoa_r+0x7de>
 8007e2c:	f04f 0800 	mov.w	r8, #0
 8007e30:	e7f6      	b.n	8007e20 <_dtoa_r+0x8e8>
 8007e32:	4698      	mov	r8, r3
 8007e34:	e7f4      	b.n	8007e20 <_dtoa_r+0x8e8>
 8007e36:	d080      	beq.n	8007d3a <_dtoa_r+0x802>
 8007e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e3a:	331c      	adds	r3, #28
 8007e3c:	441a      	add	r2, r3
 8007e3e:	4499      	add	r9, r3
 8007e40:	441f      	add	r7, r3
 8007e42:	9209      	str	r2, [sp, #36]	; 0x24
 8007e44:	e779      	b.n	8007d3a <_dtoa_r+0x802>
 8007e46:	4603      	mov	r3, r0
 8007e48:	e7f6      	b.n	8007e38 <_dtoa_r+0x900>
 8007e4a:	9b08      	ldr	r3, [sp, #32]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dc34      	bgt.n	8007eba <_dtoa_r+0x982>
 8007e50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	dd31      	ble.n	8007eba <_dtoa_r+0x982>
 8007e56:	9b08      	ldr	r3, [sp, #32]
 8007e58:	9306      	str	r3, [sp, #24]
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	b963      	cbnz	r3, 8007e78 <_dtoa_r+0x940>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	2205      	movs	r2, #5
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 faaa 	bl	80083bc <__multadd>
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	f000 fd07 	bl	8008880 <__mcmp>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f73f adbf 	bgt.w	80079f6 <_dtoa_r+0x4be>
 8007e78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e7a:	9f03      	ldr	r7, [sp, #12]
 8007e7c:	ea6f 0b03 	mvn.w	fp, r3
 8007e80:	f04f 0800 	mov.w	r8, #0
 8007e84:	4621      	mov	r1, r4
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 fa76 	bl	8008378 <_Bfree>
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	f43f aead 	beq.w	8007bec <_dtoa_r+0x6b4>
 8007e92:	f1b8 0f00 	cmp.w	r8, #0
 8007e96:	d005      	beq.n	8007ea4 <_dtoa_r+0x96c>
 8007e98:	45b0      	cmp	r8, r6
 8007e9a:	d003      	beq.n	8007ea4 <_dtoa_r+0x96c>
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 fa6a 	bl	8008378 <_Bfree>
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f000 fa66 	bl	8008378 <_Bfree>
 8007eac:	e69e      	b.n	8007bec <_dtoa_r+0x6b4>
 8007eae:	2400      	movs	r4, #0
 8007eb0:	4626      	mov	r6, r4
 8007eb2:	e7e1      	b.n	8007e78 <_dtoa_r+0x940>
 8007eb4:	46c3      	mov	fp, r8
 8007eb6:	4626      	mov	r6, r4
 8007eb8:	e59d      	b.n	80079f6 <_dtoa_r+0x4be>
 8007eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80c8 	beq.w	8008052 <_dtoa_r+0xb1a>
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	9306      	str	r3, [sp, #24]
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	dd05      	ble.n	8007ed6 <_dtoa_r+0x99e>
 8007eca:	4631      	mov	r1, r6
 8007ecc:	463a      	mov	r2, r7
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f000 fc6a 	bl	80087a8 <__lshift>
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	f1b8 0f00 	cmp.w	r8, #0
 8007eda:	d05b      	beq.n	8007f94 <_dtoa_r+0xa5c>
 8007edc:	4628      	mov	r0, r5
 8007ede:	6871      	ldr	r1, [r6, #4]
 8007ee0:	f000 fa0a 	bl	80082f8 <_Balloc>
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	b928      	cbnz	r0, 8007ef4 <_dtoa_r+0x9bc>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007eee:	4b81      	ldr	r3, [pc, #516]	; (80080f4 <_dtoa_r+0xbbc>)
 8007ef0:	f7ff bb36 	b.w	8007560 <_dtoa_r+0x28>
 8007ef4:	6932      	ldr	r2, [r6, #16]
 8007ef6:	f106 010c 	add.w	r1, r6, #12
 8007efa:	3202      	adds	r2, #2
 8007efc:	0092      	lsls	r2, r2, #2
 8007efe:	300c      	adds	r0, #12
 8007f00:	f7ff fa7e 	bl	8007400 <memcpy>
 8007f04:	2201      	movs	r2, #1
 8007f06:	4639      	mov	r1, r7
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 fc4d 	bl	80087a8 <__lshift>
 8007f0e:	46b0      	mov	r8, r6
 8007f10:	4606      	mov	r6, r0
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	9a03      	ldr	r2, [sp, #12]
 8007f16:	3301      	adds	r3, #1
 8007f18:	9308      	str	r3, [sp, #32]
 8007f1a:	9b06      	ldr	r3, [sp, #24]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f20:	9b04      	ldr	r3, [sp, #16]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	930a      	str	r3, [sp, #40]	; 0x28
 8007f28:	9b08      	ldr	r3, [sp, #32]
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	4650      	mov	r0, sl
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	f7ff fa77 	bl	8007424 <quorem>
 8007f36:	4641      	mov	r1, r8
 8007f38:	9006      	str	r0, [sp, #24]
 8007f3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f3e:	4650      	mov	r0, sl
 8007f40:	f000 fc9e 	bl	8008880 <__mcmp>
 8007f44:	4632      	mov	r2, r6
 8007f46:	9009      	str	r0, [sp, #36]	; 0x24
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 fcb4 	bl	80088b8 <__mdiff>
 8007f50:	68c2      	ldr	r2, [r0, #12]
 8007f52:	4607      	mov	r7, r0
 8007f54:	bb02      	cbnz	r2, 8007f98 <_dtoa_r+0xa60>
 8007f56:	4601      	mov	r1, r0
 8007f58:	4650      	mov	r0, sl
 8007f5a:	f000 fc91 	bl	8008880 <__mcmp>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4639      	mov	r1, r7
 8007f62:	4628      	mov	r0, r5
 8007f64:	920c      	str	r2, [sp, #48]	; 0x30
 8007f66:	f000 fa07 	bl	8008378 <_Bfree>
 8007f6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f6e:	9f08      	ldr	r7, [sp, #32]
 8007f70:	ea43 0102 	orr.w	r1, r3, r2
 8007f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f76:	4319      	orrs	r1, r3
 8007f78:	d110      	bne.n	8007f9c <_dtoa_r+0xa64>
 8007f7a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f7e:	d029      	beq.n	8007fd4 <_dtoa_r+0xa9c>
 8007f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dd02      	ble.n	8007f8c <_dtoa_r+0xa54>
 8007f86:	9b06      	ldr	r3, [sp, #24]
 8007f88:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007f8c:	9b04      	ldr	r3, [sp, #16]
 8007f8e:	f883 9000 	strb.w	r9, [r3]
 8007f92:	e777      	b.n	8007e84 <_dtoa_r+0x94c>
 8007f94:	4630      	mov	r0, r6
 8007f96:	e7ba      	b.n	8007f0e <_dtoa_r+0x9d6>
 8007f98:	2201      	movs	r2, #1
 8007f9a:	e7e1      	b.n	8007f60 <_dtoa_r+0xa28>
 8007f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	db04      	blt.n	8007fac <_dtoa_r+0xa74>
 8007fa2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	d120      	bne.n	8007fee <_dtoa_r+0xab6>
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	dded      	ble.n	8007f8c <_dtoa_r+0xa54>
 8007fb0:	4651      	mov	r1, sl
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f000 fbf7 	bl	80087a8 <__lshift>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	f000 fc5f 	bl	8008880 <__mcmp>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	dc03      	bgt.n	8007fce <_dtoa_r+0xa96>
 8007fc6:	d1e1      	bne.n	8007f8c <_dtoa_r+0xa54>
 8007fc8:	f019 0f01 	tst.w	r9, #1
 8007fcc:	d0de      	beq.n	8007f8c <_dtoa_r+0xa54>
 8007fce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fd2:	d1d8      	bne.n	8007f86 <_dtoa_r+0xa4e>
 8007fd4:	2339      	movs	r3, #57	; 0x39
 8007fd6:	9a04      	ldr	r2, [sp, #16]
 8007fd8:	7013      	strb	r3, [r2, #0]
 8007fda:	463b      	mov	r3, r7
 8007fdc:	461f      	mov	r7, r3
 8007fde:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	2a39      	cmp	r2, #57	; 0x39
 8007fe6:	d06b      	beq.n	80080c0 <_dtoa_r+0xb88>
 8007fe8:	3201      	adds	r2, #1
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	e74a      	b.n	8007e84 <_dtoa_r+0x94c>
 8007fee:	2a00      	cmp	r2, #0
 8007ff0:	dd07      	ble.n	8008002 <_dtoa_r+0xaca>
 8007ff2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ff6:	d0ed      	beq.n	8007fd4 <_dtoa_r+0xa9c>
 8007ff8:	9a04      	ldr	r2, [sp, #16]
 8007ffa:	f109 0301 	add.w	r3, r9, #1
 8007ffe:	7013      	strb	r3, [r2, #0]
 8008000:	e740      	b.n	8007e84 <_dtoa_r+0x94c>
 8008002:	9b08      	ldr	r3, [sp, #32]
 8008004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008006:	f803 9c01 	strb.w	r9, [r3, #-1]
 800800a:	4293      	cmp	r3, r2
 800800c:	d042      	beq.n	8008094 <_dtoa_r+0xb5c>
 800800e:	4651      	mov	r1, sl
 8008010:	2300      	movs	r3, #0
 8008012:	220a      	movs	r2, #10
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f9d1 	bl	80083bc <__multadd>
 800801a:	45b0      	cmp	r8, r6
 800801c:	4682      	mov	sl, r0
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	f04f 020a 	mov.w	r2, #10
 8008026:	4641      	mov	r1, r8
 8008028:	4628      	mov	r0, r5
 800802a:	d107      	bne.n	800803c <_dtoa_r+0xb04>
 800802c:	f000 f9c6 	bl	80083bc <__multadd>
 8008030:	4680      	mov	r8, r0
 8008032:	4606      	mov	r6, r0
 8008034:	9b08      	ldr	r3, [sp, #32]
 8008036:	3301      	adds	r3, #1
 8008038:	9308      	str	r3, [sp, #32]
 800803a:	e775      	b.n	8007f28 <_dtoa_r+0x9f0>
 800803c:	f000 f9be 	bl	80083bc <__multadd>
 8008040:	4631      	mov	r1, r6
 8008042:	4680      	mov	r8, r0
 8008044:	2300      	movs	r3, #0
 8008046:	220a      	movs	r2, #10
 8008048:	4628      	mov	r0, r5
 800804a:	f000 f9b7 	bl	80083bc <__multadd>
 800804e:	4606      	mov	r6, r0
 8008050:	e7f0      	b.n	8008034 <_dtoa_r+0xafc>
 8008052:	9b08      	ldr	r3, [sp, #32]
 8008054:	9306      	str	r3, [sp, #24]
 8008056:	9f03      	ldr	r7, [sp, #12]
 8008058:	4621      	mov	r1, r4
 800805a:	4650      	mov	r0, sl
 800805c:	f7ff f9e2 	bl	8007424 <quorem>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008066:	f807 9b01 	strb.w	r9, [r7], #1
 800806a:	1afa      	subs	r2, r7, r3
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	4293      	cmp	r3, r2
 8008070:	dd07      	ble.n	8008082 <_dtoa_r+0xb4a>
 8008072:	4651      	mov	r1, sl
 8008074:	2300      	movs	r3, #0
 8008076:	220a      	movs	r2, #10
 8008078:	4628      	mov	r0, r5
 800807a:	f000 f99f 	bl	80083bc <__multadd>
 800807e:	4682      	mov	sl, r0
 8008080:	e7ea      	b.n	8008058 <_dtoa_r+0xb20>
 8008082:	9b06      	ldr	r3, [sp, #24]
 8008084:	f04f 0800 	mov.w	r8, #0
 8008088:	2b00      	cmp	r3, #0
 800808a:	bfcc      	ite	gt
 800808c:	461f      	movgt	r7, r3
 800808e:	2701      	movle	r7, #1
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	441f      	add	r7, r3
 8008094:	4651      	mov	r1, sl
 8008096:	2201      	movs	r2, #1
 8008098:	4628      	mov	r0, r5
 800809a:	f000 fb85 	bl	80087a8 <__lshift>
 800809e:	4621      	mov	r1, r4
 80080a0:	4682      	mov	sl, r0
 80080a2:	f000 fbed 	bl	8008880 <__mcmp>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	dc97      	bgt.n	8007fda <_dtoa_r+0xaa2>
 80080aa:	d102      	bne.n	80080b2 <_dtoa_r+0xb7a>
 80080ac:	f019 0f01 	tst.w	r9, #1
 80080b0:	d193      	bne.n	8007fda <_dtoa_r+0xaa2>
 80080b2:	463b      	mov	r3, r7
 80080b4:	461f      	mov	r7, r3
 80080b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ba:	2a30      	cmp	r2, #48	; 0x30
 80080bc:	d0fa      	beq.n	80080b4 <_dtoa_r+0xb7c>
 80080be:	e6e1      	b.n	8007e84 <_dtoa_r+0x94c>
 80080c0:	9a03      	ldr	r2, [sp, #12]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d18a      	bne.n	8007fdc <_dtoa_r+0xaa4>
 80080c6:	2331      	movs	r3, #49	; 0x31
 80080c8:	f10b 0b01 	add.w	fp, fp, #1
 80080cc:	e797      	b.n	8007ffe <_dtoa_r+0xac6>
 80080ce:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <_dtoa_r+0xbc0>)
 80080d0:	f7ff ba9f 	b.w	8007612 <_dtoa_r+0xda>
 80080d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f47f aa77 	bne.w	80075ca <_dtoa_r+0x92>
 80080dc:	4b07      	ldr	r3, [pc, #28]	; (80080fc <_dtoa_r+0xbc4>)
 80080de:	f7ff ba98 	b.w	8007612 <_dtoa_r+0xda>
 80080e2:	9b06      	ldr	r3, [sp, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dcb6      	bgt.n	8008056 <_dtoa_r+0xb1e>
 80080e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	f73f aeb5 	bgt.w	8007e5a <_dtoa_r+0x922>
 80080f0:	e7b1      	b.n	8008056 <_dtoa_r+0xb1e>
 80080f2:	bf00      	nop
 80080f4:	0800abb7 	.word	0x0800abb7
 80080f8:	0800ab12 	.word	0x0800ab12
 80080fc:	0800ab3b 	.word	0x0800ab3b

08008100 <_free_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4605      	mov	r5, r0
 8008104:	2900      	cmp	r1, #0
 8008106:	d040      	beq.n	800818a <_free_r+0x8a>
 8008108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800810c:	1f0c      	subs	r4, r1, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfb8      	it	lt
 8008112:	18e4      	addlt	r4, r4, r3
 8008114:	f000 f8e4 	bl	80082e0 <__malloc_lock>
 8008118:	4a1c      	ldr	r2, [pc, #112]	; (800818c <_free_r+0x8c>)
 800811a:	6813      	ldr	r3, [r2, #0]
 800811c:	b933      	cbnz	r3, 800812c <_free_r+0x2c>
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	6014      	str	r4, [r2, #0]
 8008122:	4628      	mov	r0, r5
 8008124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008128:	f000 b8e0 	b.w	80082ec <__malloc_unlock>
 800812c:	42a3      	cmp	r3, r4
 800812e:	d908      	bls.n	8008142 <_free_r+0x42>
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	1821      	adds	r1, r4, r0
 8008134:	428b      	cmp	r3, r1
 8008136:	bf01      	itttt	eq
 8008138:	6819      	ldreq	r1, [r3, #0]
 800813a:	685b      	ldreq	r3, [r3, #4]
 800813c:	1809      	addeq	r1, r1, r0
 800813e:	6021      	streq	r1, [r4, #0]
 8008140:	e7ed      	b.n	800811e <_free_r+0x1e>
 8008142:	461a      	mov	r2, r3
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	b10b      	cbz	r3, 800814c <_free_r+0x4c>
 8008148:	42a3      	cmp	r3, r4
 800814a:	d9fa      	bls.n	8008142 <_free_r+0x42>
 800814c:	6811      	ldr	r1, [r2, #0]
 800814e:	1850      	adds	r0, r2, r1
 8008150:	42a0      	cmp	r0, r4
 8008152:	d10b      	bne.n	800816c <_free_r+0x6c>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	4401      	add	r1, r0
 8008158:	1850      	adds	r0, r2, r1
 800815a:	4283      	cmp	r3, r0
 800815c:	6011      	str	r1, [r2, #0]
 800815e:	d1e0      	bne.n	8008122 <_free_r+0x22>
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	4408      	add	r0, r1
 8008166:	6010      	str	r0, [r2, #0]
 8008168:	6053      	str	r3, [r2, #4]
 800816a:	e7da      	b.n	8008122 <_free_r+0x22>
 800816c:	d902      	bls.n	8008174 <_free_r+0x74>
 800816e:	230c      	movs	r3, #12
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	e7d6      	b.n	8008122 <_free_r+0x22>
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	1821      	adds	r1, r4, r0
 8008178:	428b      	cmp	r3, r1
 800817a:	bf01      	itttt	eq
 800817c:	6819      	ldreq	r1, [r3, #0]
 800817e:	685b      	ldreq	r3, [r3, #4]
 8008180:	1809      	addeq	r1, r1, r0
 8008182:	6021      	streq	r1, [r4, #0]
 8008184:	6063      	str	r3, [r4, #4]
 8008186:	6054      	str	r4, [r2, #4]
 8008188:	e7cb      	b.n	8008122 <_free_r+0x22>
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	200006bc 	.word	0x200006bc

08008190 <malloc>:
 8008190:	4b02      	ldr	r3, [pc, #8]	; (800819c <malloc+0xc>)
 8008192:	4601      	mov	r1, r0
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	f000 b823 	b.w	80081e0 <_malloc_r>
 800819a:	bf00      	nop
 800819c:	200000dc 	.word	0x200000dc

080081a0 <sbrk_aligned>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	4e0e      	ldr	r6, [pc, #56]	; (80081dc <sbrk_aligned+0x3c>)
 80081a4:	460c      	mov	r4, r1
 80081a6:	6831      	ldr	r1, [r6, #0]
 80081a8:	4605      	mov	r5, r0
 80081aa:	b911      	cbnz	r1, 80081b2 <sbrk_aligned+0x12>
 80081ac:	f002 f806 	bl	800a1bc <_sbrk_r>
 80081b0:	6030      	str	r0, [r6, #0]
 80081b2:	4621      	mov	r1, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	f002 f801 	bl	800a1bc <_sbrk_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d00a      	beq.n	80081d4 <sbrk_aligned+0x34>
 80081be:	1cc4      	adds	r4, r0, #3
 80081c0:	f024 0403 	bic.w	r4, r4, #3
 80081c4:	42a0      	cmp	r0, r4
 80081c6:	d007      	beq.n	80081d8 <sbrk_aligned+0x38>
 80081c8:	1a21      	subs	r1, r4, r0
 80081ca:	4628      	mov	r0, r5
 80081cc:	f001 fff6 	bl	800a1bc <_sbrk_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d101      	bne.n	80081d8 <sbrk_aligned+0x38>
 80081d4:	f04f 34ff 	mov.w	r4, #4294967295
 80081d8:	4620      	mov	r0, r4
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	200006c0 	.word	0x200006c0

080081e0 <_malloc_r>:
 80081e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e4:	1ccd      	adds	r5, r1, #3
 80081e6:	f025 0503 	bic.w	r5, r5, #3
 80081ea:	3508      	adds	r5, #8
 80081ec:	2d0c      	cmp	r5, #12
 80081ee:	bf38      	it	cc
 80081f0:	250c      	movcc	r5, #12
 80081f2:	2d00      	cmp	r5, #0
 80081f4:	4607      	mov	r7, r0
 80081f6:	db01      	blt.n	80081fc <_malloc_r+0x1c>
 80081f8:	42a9      	cmp	r1, r5
 80081fa:	d905      	bls.n	8008208 <_malloc_r+0x28>
 80081fc:	230c      	movs	r3, #12
 80081fe:	2600      	movs	r6, #0
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	4630      	mov	r0, r6
 8008204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008208:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082dc <_malloc_r+0xfc>
 800820c:	f000 f868 	bl	80082e0 <__malloc_lock>
 8008210:	f8d8 3000 	ldr.w	r3, [r8]
 8008214:	461c      	mov	r4, r3
 8008216:	bb5c      	cbnz	r4, 8008270 <_malloc_r+0x90>
 8008218:	4629      	mov	r1, r5
 800821a:	4638      	mov	r0, r7
 800821c:	f7ff ffc0 	bl	80081a0 <sbrk_aligned>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	4604      	mov	r4, r0
 8008224:	d155      	bne.n	80082d2 <_malloc_r+0xf2>
 8008226:	f8d8 4000 	ldr.w	r4, [r8]
 800822a:	4626      	mov	r6, r4
 800822c:	2e00      	cmp	r6, #0
 800822e:	d145      	bne.n	80082bc <_malloc_r+0xdc>
 8008230:	2c00      	cmp	r4, #0
 8008232:	d048      	beq.n	80082c6 <_malloc_r+0xe6>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	4631      	mov	r1, r6
 8008238:	4638      	mov	r0, r7
 800823a:	eb04 0903 	add.w	r9, r4, r3
 800823e:	f001 ffbd 	bl	800a1bc <_sbrk_r>
 8008242:	4581      	cmp	r9, r0
 8008244:	d13f      	bne.n	80082c6 <_malloc_r+0xe6>
 8008246:	6821      	ldr	r1, [r4, #0]
 8008248:	4638      	mov	r0, r7
 800824a:	1a6d      	subs	r5, r5, r1
 800824c:	4629      	mov	r1, r5
 800824e:	f7ff ffa7 	bl	80081a0 <sbrk_aligned>
 8008252:	3001      	adds	r0, #1
 8008254:	d037      	beq.n	80082c6 <_malloc_r+0xe6>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	442b      	add	r3, r5
 800825a:	6023      	str	r3, [r4, #0]
 800825c:	f8d8 3000 	ldr.w	r3, [r8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d038      	beq.n	80082d6 <_malloc_r+0xf6>
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	42a2      	cmp	r2, r4
 8008268:	d12b      	bne.n	80082c2 <_malloc_r+0xe2>
 800826a:	2200      	movs	r2, #0
 800826c:	605a      	str	r2, [r3, #4]
 800826e:	e00f      	b.n	8008290 <_malloc_r+0xb0>
 8008270:	6822      	ldr	r2, [r4, #0]
 8008272:	1b52      	subs	r2, r2, r5
 8008274:	d41f      	bmi.n	80082b6 <_malloc_r+0xd6>
 8008276:	2a0b      	cmp	r2, #11
 8008278:	d917      	bls.n	80082aa <_malloc_r+0xca>
 800827a:	1961      	adds	r1, r4, r5
 800827c:	42a3      	cmp	r3, r4
 800827e:	6025      	str	r5, [r4, #0]
 8008280:	bf18      	it	ne
 8008282:	6059      	strne	r1, [r3, #4]
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	bf08      	it	eq
 8008288:	f8c8 1000 	streq.w	r1, [r8]
 800828c:	5162      	str	r2, [r4, r5]
 800828e:	604b      	str	r3, [r1, #4]
 8008290:	4638      	mov	r0, r7
 8008292:	f104 060b 	add.w	r6, r4, #11
 8008296:	f000 f829 	bl	80082ec <__malloc_unlock>
 800829a:	f026 0607 	bic.w	r6, r6, #7
 800829e:	1d23      	adds	r3, r4, #4
 80082a0:	1af2      	subs	r2, r6, r3
 80082a2:	d0ae      	beq.n	8008202 <_malloc_r+0x22>
 80082a4:	1b9b      	subs	r3, r3, r6
 80082a6:	50a3      	str	r3, [r4, r2]
 80082a8:	e7ab      	b.n	8008202 <_malloc_r+0x22>
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	6862      	ldr	r2, [r4, #4]
 80082ae:	d1dd      	bne.n	800826c <_malloc_r+0x8c>
 80082b0:	f8c8 2000 	str.w	r2, [r8]
 80082b4:	e7ec      	b.n	8008290 <_malloc_r+0xb0>
 80082b6:	4623      	mov	r3, r4
 80082b8:	6864      	ldr	r4, [r4, #4]
 80082ba:	e7ac      	b.n	8008216 <_malloc_r+0x36>
 80082bc:	4634      	mov	r4, r6
 80082be:	6876      	ldr	r6, [r6, #4]
 80082c0:	e7b4      	b.n	800822c <_malloc_r+0x4c>
 80082c2:	4613      	mov	r3, r2
 80082c4:	e7cc      	b.n	8008260 <_malloc_r+0x80>
 80082c6:	230c      	movs	r3, #12
 80082c8:	4638      	mov	r0, r7
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	f000 f80e 	bl	80082ec <__malloc_unlock>
 80082d0:	e797      	b.n	8008202 <_malloc_r+0x22>
 80082d2:	6025      	str	r5, [r4, #0]
 80082d4:	e7dc      	b.n	8008290 <_malloc_r+0xb0>
 80082d6:	605b      	str	r3, [r3, #4]
 80082d8:	deff      	udf	#255	; 0xff
 80082da:	bf00      	nop
 80082dc:	200006bc 	.word	0x200006bc

080082e0 <__malloc_lock>:
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <__malloc_lock+0x8>)
 80082e2:	f7ff b87d 	b.w	80073e0 <__retarget_lock_acquire_recursive>
 80082e6:	bf00      	nop
 80082e8:	200006b8 	.word	0x200006b8

080082ec <__malloc_unlock>:
 80082ec:	4801      	ldr	r0, [pc, #4]	; (80082f4 <__malloc_unlock+0x8>)
 80082ee:	f7ff b878 	b.w	80073e2 <__retarget_lock_release_recursive>
 80082f2:	bf00      	nop
 80082f4:	200006b8 	.word	0x200006b8

080082f8 <_Balloc>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	69c6      	ldr	r6, [r0, #28]
 80082fc:	4604      	mov	r4, r0
 80082fe:	460d      	mov	r5, r1
 8008300:	b976      	cbnz	r6, 8008320 <_Balloc+0x28>
 8008302:	2010      	movs	r0, #16
 8008304:	f7ff ff44 	bl	8008190 <malloc>
 8008308:	4602      	mov	r2, r0
 800830a:	61e0      	str	r0, [r4, #28]
 800830c:	b920      	cbnz	r0, 8008318 <_Balloc+0x20>
 800830e:	216b      	movs	r1, #107	; 0x6b
 8008310:	4b17      	ldr	r3, [pc, #92]	; (8008370 <_Balloc+0x78>)
 8008312:	4818      	ldr	r0, [pc, #96]	; (8008374 <_Balloc+0x7c>)
 8008314:	f001 ff68 	bl	800a1e8 <__assert_func>
 8008318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800831c:	6006      	str	r6, [r0, #0]
 800831e:	60c6      	str	r6, [r0, #12]
 8008320:	69e6      	ldr	r6, [r4, #28]
 8008322:	68f3      	ldr	r3, [r6, #12]
 8008324:	b183      	cbz	r3, 8008348 <_Balloc+0x50>
 8008326:	69e3      	ldr	r3, [r4, #28]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800832e:	b9b8      	cbnz	r0, 8008360 <_Balloc+0x68>
 8008330:	2101      	movs	r1, #1
 8008332:	fa01 f605 	lsl.w	r6, r1, r5
 8008336:	1d72      	adds	r2, r6, #5
 8008338:	4620      	mov	r0, r4
 800833a:	0092      	lsls	r2, r2, #2
 800833c:	f001 ff72 	bl	800a224 <_calloc_r>
 8008340:	b160      	cbz	r0, 800835c <_Balloc+0x64>
 8008342:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008346:	e00e      	b.n	8008366 <_Balloc+0x6e>
 8008348:	2221      	movs	r2, #33	; 0x21
 800834a:	2104      	movs	r1, #4
 800834c:	4620      	mov	r0, r4
 800834e:	f001 ff69 	bl	800a224 <_calloc_r>
 8008352:	69e3      	ldr	r3, [r4, #28]
 8008354:	60f0      	str	r0, [r6, #12]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1e4      	bne.n	8008326 <_Balloc+0x2e>
 800835c:	2000      	movs	r0, #0
 800835e:	bd70      	pop	{r4, r5, r6, pc}
 8008360:	6802      	ldr	r2, [r0, #0]
 8008362:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008366:	2300      	movs	r3, #0
 8008368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800836c:	e7f7      	b.n	800835e <_Balloc+0x66>
 800836e:	bf00      	nop
 8008370:	0800ab48 	.word	0x0800ab48
 8008374:	0800abc8 	.word	0x0800abc8

08008378 <_Bfree>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	69c6      	ldr	r6, [r0, #28]
 800837c:	4605      	mov	r5, r0
 800837e:	460c      	mov	r4, r1
 8008380:	b976      	cbnz	r6, 80083a0 <_Bfree+0x28>
 8008382:	2010      	movs	r0, #16
 8008384:	f7ff ff04 	bl	8008190 <malloc>
 8008388:	4602      	mov	r2, r0
 800838a:	61e8      	str	r0, [r5, #28]
 800838c:	b920      	cbnz	r0, 8008398 <_Bfree+0x20>
 800838e:	218f      	movs	r1, #143	; 0x8f
 8008390:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <_Bfree+0x3c>)
 8008392:	4809      	ldr	r0, [pc, #36]	; (80083b8 <_Bfree+0x40>)
 8008394:	f001 ff28 	bl	800a1e8 <__assert_func>
 8008398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800839c:	6006      	str	r6, [r0, #0]
 800839e:	60c6      	str	r6, [r0, #12]
 80083a0:	b13c      	cbz	r4, 80083b2 <_Bfree+0x3a>
 80083a2:	69eb      	ldr	r3, [r5, #28]
 80083a4:	6862      	ldr	r2, [r4, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083ac:	6021      	str	r1, [r4, #0]
 80083ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	0800ab48 	.word	0x0800ab48
 80083b8:	0800abc8 	.word	0x0800abc8

080083bc <__multadd>:
 80083bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c0:	4607      	mov	r7, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	461e      	mov	r6, r3
 80083c6:	2000      	movs	r0, #0
 80083c8:	690d      	ldr	r5, [r1, #16]
 80083ca:	f101 0c14 	add.w	ip, r1, #20
 80083ce:	f8dc 3000 	ldr.w	r3, [ip]
 80083d2:	3001      	adds	r0, #1
 80083d4:	b299      	uxth	r1, r3
 80083d6:	fb02 6101 	mla	r1, r2, r1, r6
 80083da:	0c1e      	lsrs	r6, r3, #16
 80083dc:	0c0b      	lsrs	r3, r1, #16
 80083de:	fb02 3306 	mla	r3, r2, r6, r3
 80083e2:	b289      	uxth	r1, r1
 80083e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083e8:	4285      	cmp	r5, r0
 80083ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083ee:	f84c 1b04 	str.w	r1, [ip], #4
 80083f2:	dcec      	bgt.n	80083ce <__multadd+0x12>
 80083f4:	b30e      	cbz	r6, 800843a <__multadd+0x7e>
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	dc19      	bgt.n	8008430 <__multadd+0x74>
 80083fc:	6861      	ldr	r1, [r4, #4]
 80083fe:	4638      	mov	r0, r7
 8008400:	3101      	adds	r1, #1
 8008402:	f7ff ff79 	bl	80082f8 <_Balloc>
 8008406:	4680      	mov	r8, r0
 8008408:	b928      	cbnz	r0, 8008416 <__multadd+0x5a>
 800840a:	4602      	mov	r2, r0
 800840c:	21ba      	movs	r1, #186	; 0xba
 800840e:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <__multadd+0x84>)
 8008410:	480c      	ldr	r0, [pc, #48]	; (8008444 <__multadd+0x88>)
 8008412:	f001 fee9 	bl	800a1e8 <__assert_func>
 8008416:	6922      	ldr	r2, [r4, #16]
 8008418:	f104 010c 	add.w	r1, r4, #12
 800841c:	3202      	adds	r2, #2
 800841e:	0092      	lsls	r2, r2, #2
 8008420:	300c      	adds	r0, #12
 8008422:	f7fe ffed 	bl	8007400 <memcpy>
 8008426:	4621      	mov	r1, r4
 8008428:	4638      	mov	r0, r7
 800842a:	f7ff ffa5 	bl	8008378 <_Bfree>
 800842e:	4644      	mov	r4, r8
 8008430:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008434:	3501      	adds	r5, #1
 8008436:	615e      	str	r6, [r3, #20]
 8008438:	6125      	str	r5, [r4, #16]
 800843a:	4620      	mov	r0, r4
 800843c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008440:	0800abb7 	.word	0x0800abb7
 8008444:	0800abc8 	.word	0x0800abc8

08008448 <__s2b>:
 8008448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800844c:	4615      	mov	r5, r2
 800844e:	2209      	movs	r2, #9
 8008450:	461f      	mov	r7, r3
 8008452:	3308      	adds	r3, #8
 8008454:	460c      	mov	r4, r1
 8008456:	fb93 f3f2 	sdiv	r3, r3, r2
 800845a:	4606      	mov	r6, r0
 800845c:	2201      	movs	r2, #1
 800845e:	2100      	movs	r1, #0
 8008460:	429a      	cmp	r2, r3
 8008462:	db09      	blt.n	8008478 <__s2b+0x30>
 8008464:	4630      	mov	r0, r6
 8008466:	f7ff ff47 	bl	80082f8 <_Balloc>
 800846a:	b940      	cbnz	r0, 800847e <__s2b+0x36>
 800846c:	4602      	mov	r2, r0
 800846e:	21d3      	movs	r1, #211	; 0xd3
 8008470:	4b18      	ldr	r3, [pc, #96]	; (80084d4 <__s2b+0x8c>)
 8008472:	4819      	ldr	r0, [pc, #100]	; (80084d8 <__s2b+0x90>)
 8008474:	f001 feb8 	bl	800a1e8 <__assert_func>
 8008478:	0052      	lsls	r2, r2, #1
 800847a:	3101      	adds	r1, #1
 800847c:	e7f0      	b.n	8008460 <__s2b+0x18>
 800847e:	9b08      	ldr	r3, [sp, #32]
 8008480:	2d09      	cmp	r5, #9
 8008482:	6143      	str	r3, [r0, #20]
 8008484:	f04f 0301 	mov.w	r3, #1
 8008488:	6103      	str	r3, [r0, #16]
 800848a:	dd16      	ble.n	80084ba <__s2b+0x72>
 800848c:	f104 0909 	add.w	r9, r4, #9
 8008490:	46c8      	mov	r8, r9
 8008492:	442c      	add	r4, r5
 8008494:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008498:	4601      	mov	r1, r0
 800849a:	220a      	movs	r2, #10
 800849c:	4630      	mov	r0, r6
 800849e:	3b30      	subs	r3, #48	; 0x30
 80084a0:	f7ff ff8c 	bl	80083bc <__multadd>
 80084a4:	45a0      	cmp	r8, r4
 80084a6:	d1f5      	bne.n	8008494 <__s2b+0x4c>
 80084a8:	f1a5 0408 	sub.w	r4, r5, #8
 80084ac:	444c      	add	r4, r9
 80084ae:	1b2d      	subs	r5, r5, r4
 80084b0:	1963      	adds	r3, r4, r5
 80084b2:	42bb      	cmp	r3, r7
 80084b4:	db04      	blt.n	80084c0 <__s2b+0x78>
 80084b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ba:	2509      	movs	r5, #9
 80084bc:	340a      	adds	r4, #10
 80084be:	e7f6      	b.n	80084ae <__s2b+0x66>
 80084c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084c4:	4601      	mov	r1, r0
 80084c6:	220a      	movs	r2, #10
 80084c8:	4630      	mov	r0, r6
 80084ca:	3b30      	subs	r3, #48	; 0x30
 80084cc:	f7ff ff76 	bl	80083bc <__multadd>
 80084d0:	e7ee      	b.n	80084b0 <__s2b+0x68>
 80084d2:	bf00      	nop
 80084d4:	0800abb7 	.word	0x0800abb7
 80084d8:	0800abc8 	.word	0x0800abc8

080084dc <__hi0bits>:
 80084dc:	0c02      	lsrs	r2, r0, #16
 80084de:	0412      	lsls	r2, r2, #16
 80084e0:	4603      	mov	r3, r0
 80084e2:	b9ca      	cbnz	r2, 8008518 <__hi0bits+0x3c>
 80084e4:	0403      	lsls	r3, r0, #16
 80084e6:	2010      	movs	r0, #16
 80084e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084ec:	bf04      	itt	eq
 80084ee:	021b      	lsleq	r3, r3, #8
 80084f0:	3008      	addeq	r0, #8
 80084f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084f6:	bf04      	itt	eq
 80084f8:	011b      	lsleq	r3, r3, #4
 80084fa:	3004      	addeq	r0, #4
 80084fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008500:	bf04      	itt	eq
 8008502:	009b      	lsleq	r3, r3, #2
 8008504:	3002      	addeq	r0, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	db05      	blt.n	8008516 <__hi0bits+0x3a>
 800850a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800850e:	f100 0001 	add.w	r0, r0, #1
 8008512:	bf08      	it	eq
 8008514:	2020      	moveq	r0, #32
 8008516:	4770      	bx	lr
 8008518:	2000      	movs	r0, #0
 800851a:	e7e5      	b.n	80084e8 <__hi0bits+0xc>

0800851c <__lo0bits>:
 800851c:	6803      	ldr	r3, [r0, #0]
 800851e:	4602      	mov	r2, r0
 8008520:	f013 0007 	ands.w	r0, r3, #7
 8008524:	d00b      	beq.n	800853e <__lo0bits+0x22>
 8008526:	07d9      	lsls	r1, r3, #31
 8008528:	d421      	bmi.n	800856e <__lo0bits+0x52>
 800852a:	0798      	lsls	r0, r3, #30
 800852c:	bf49      	itett	mi
 800852e:	085b      	lsrmi	r3, r3, #1
 8008530:	089b      	lsrpl	r3, r3, #2
 8008532:	2001      	movmi	r0, #1
 8008534:	6013      	strmi	r3, [r2, #0]
 8008536:	bf5c      	itt	pl
 8008538:	2002      	movpl	r0, #2
 800853a:	6013      	strpl	r3, [r2, #0]
 800853c:	4770      	bx	lr
 800853e:	b299      	uxth	r1, r3
 8008540:	b909      	cbnz	r1, 8008546 <__lo0bits+0x2a>
 8008542:	2010      	movs	r0, #16
 8008544:	0c1b      	lsrs	r3, r3, #16
 8008546:	b2d9      	uxtb	r1, r3
 8008548:	b909      	cbnz	r1, 800854e <__lo0bits+0x32>
 800854a:	3008      	adds	r0, #8
 800854c:	0a1b      	lsrs	r3, r3, #8
 800854e:	0719      	lsls	r1, r3, #28
 8008550:	bf04      	itt	eq
 8008552:	091b      	lsreq	r3, r3, #4
 8008554:	3004      	addeq	r0, #4
 8008556:	0799      	lsls	r1, r3, #30
 8008558:	bf04      	itt	eq
 800855a:	089b      	lsreq	r3, r3, #2
 800855c:	3002      	addeq	r0, #2
 800855e:	07d9      	lsls	r1, r3, #31
 8008560:	d403      	bmi.n	800856a <__lo0bits+0x4e>
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	f100 0001 	add.w	r0, r0, #1
 8008568:	d003      	beq.n	8008572 <__lo0bits+0x56>
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	4770      	bx	lr
 800856e:	2000      	movs	r0, #0
 8008570:	4770      	bx	lr
 8008572:	2020      	movs	r0, #32
 8008574:	4770      	bx	lr
	...

08008578 <__i2b>:
 8008578:	b510      	push	{r4, lr}
 800857a:	460c      	mov	r4, r1
 800857c:	2101      	movs	r1, #1
 800857e:	f7ff febb 	bl	80082f8 <_Balloc>
 8008582:	4602      	mov	r2, r0
 8008584:	b928      	cbnz	r0, 8008592 <__i2b+0x1a>
 8008586:	f240 1145 	movw	r1, #325	; 0x145
 800858a:	4b04      	ldr	r3, [pc, #16]	; (800859c <__i2b+0x24>)
 800858c:	4804      	ldr	r0, [pc, #16]	; (80085a0 <__i2b+0x28>)
 800858e:	f001 fe2b 	bl	800a1e8 <__assert_func>
 8008592:	2301      	movs	r3, #1
 8008594:	6144      	str	r4, [r0, #20]
 8008596:	6103      	str	r3, [r0, #16]
 8008598:	bd10      	pop	{r4, pc}
 800859a:	bf00      	nop
 800859c:	0800abb7 	.word	0x0800abb7
 80085a0:	0800abc8 	.word	0x0800abc8

080085a4 <__multiply>:
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	4691      	mov	r9, r2
 80085aa:	690a      	ldr	r2, [r1, #16]
 80085ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085b0:	460c      	mov	r4, r1
 80085b2:	429a      	cmp	r2, r3
 80085b4:	bfbe      	ittt	lt
 80085b6:	460b      	movlt	r3, r1
 80085b8:	464c      	movlt	r4, r9
 80085ba:	4699      	movlt	r9, r3
 80085bc:	6927      	ldr	r7, [r4, #16]
 80085be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	6861      	ldr	r1, [r4, #4]
 80085c6:	eb07 060a 	add.w	r6, r7, sl
 80085ca:	42b3      	cmp	r3, r6
 80085cc:	b085      	sub	sp, #20
 80085ce:	bfb8      	it	lt
 80085d0:	3101      	addlt	r1, #1
 80085d2:	f7ff fe91 	bl	80082f8 <_Balloc>
 80085d6:	b930      	cbnz	r0, 80085e6 <__multiply+0x42>
 80085d8:	4602      	mov	r2, r0
 80085da:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80085de:	4b43      	ldr	r3, [pc, #268]	; (80086ec <__multiply+0x148>)
 80085e0:	4843      	ldr	r0, [pc, #268]	; (80086f0 <__multiply+0x14c>)
 80085e2:	f001 fe01 	bl	800a1e8 <__assert_func>
 80085e6:	f100 0514 	add.w	r5, r0, #20
 80085ea:	462b      	mov	r3, r5
 80085ec:	2200      	movs	r2, #0
 80085ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085f2:	4543      	cmp	r3, r8
 80085f4:	d321      	bcc.n	800863a <__multiply+0x96>
 80085f6:	f104 0314 	add.w	r3, r4, #20
 80085fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085fe:	f109 0314 	add.w	r3, r9, #20
 8008602:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008606:	9202      	str	r2, [sp, #8]
 8008608:	1b3a      	subs	r2, r7, r4
 800860a:	3a15      	subs	r2, #21
 800860c:	f022 0203 	bic.w	r2, r2, #3
 8008610:	3204      	adds	r2, #4
 8008612:	f104 0115 	add.w	r1, r4, #21
 8008616:	428f      	cmp	r7, r1
 8008618:	bf38      	it	cc
 800861a:	2204      	movcc	r2, #4
 800861c:	9201      	str	r2, [sp, #4]
 800861e:	9a02      	ldr	r2, [sp, #8]
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	429a      	cmp	r2, r3
 8008624:	d80c      	bhi.n	8008640 <__multiply+0x9c>
 8008626:	2e00      	cmp	r6, #0
 8008628:	dd03      	ble.n	8008632 <__multiply+0x8e>
 800862a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800862e:	2b00      	cmp	r3, #0
 8008630:	d05a      	beq.n	80086e8 <__multiply+0x144>
 8008632:	6106      	str	r6, [r0, #16]
 8008634:	b005      	add	sp, #20
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	f843 2b04 	str.w	r2, [r3], #4
 800863e:	e7d8      	b.n	80085f2 <__multiply+0x4e>
 8008640:	f8b3 a000 	ldrh.w	sl, [r3]
 8008644:	f1ba 0f00 	cmp.w	sl, #0
 8008648:	d023      	beq.n	8008692 <__multiply+0xee>
 800864a:	46a9      	mov	r9, r5
 800864c:	f04f 0c00 	mov.w	ip, #0
 8008650:	f104 0e14 	add.w	lr, r4, #20
 8008654:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008658:	f8d9 1000 	ldr.w	r1, [r9]
 800865c:	fa1f fb82 	uxth.w	fp, r2
 8008660:	b289      	uxth	r1, r1
 8008662:	fb0a 110b 	mla	r1, sl, fp, r1
 8008666:	4461      	add	r1, ip
 8008668:	f8d9 c000 	ldr.w	ip, [r9]
 800866c:	0c12      	lsrs	r2, r2, #16
 800866e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008672:	fb0a c202 	mla	r2, sl, r2, ip
 8008676:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800867a:	b289      	uxth	r1, r1
 800867c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008680:	4577      	cmp	r7, lr
 8008682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008686:	f849 1b04 	str.w	r1, [r9], #4
 800868a:	d8e3      	bhi.n	8008654 <__multiply+0xb0>
 800868c:	9a01      	ldr	r2, [sp, #4]
 800868e:	f845 c002 	str.w	ip, [r5, r2]
 8008692:	9a03      	ldr	r2, [sp, #12]
 8008694:	3304      	adds	r3, #4
 8008696:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800869a:	f1b9 0f00 	cmp.w	r9, #0
 800869e:	d021      	beq.n	80086e4 <__multiply+0x140>
 80086a0:	46ae      	mov	lr, r5
 80086a2:	f04f 0a00 	mov.w	sl, #0
 80086a6:	6829      	ldr	r1, [r5, #0]
 80086a8:	f104 0c14 	add.w	ip, r4, #20
 80086ac:	f8bc b000 	ldrh.w	fp, [ip]
 80086b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086b4:	b289      	uxth	r1, r1
 80086b6:	fb09 220b 	mla	r2, r9, fp, r2
 80086ba:	4452      	add	r2, sl
 80086bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086c0:	f84e 1b04 	str.w	r1, [lr], #4
 80086c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80086c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086cc:	f8be 1000 	ldrh.w	r1, [lr]
 80086d0:	4567      	cmp	r7, ip
 80086d2:	fb09 110a 	mla	r1, r9, sl, r1
 80086d6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80086da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086de:	d8e5      	bhi.n	80086ac <__multiply+0x108>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	50a9      	str	r1, [r5, r2]
 80086e4:	3504      	adds	r5, #4
 80086e6:	e79a      	b.n	800861e <__multiply+0x7a>
 80086e8:	3e01      	subs	r6, #1
 80086ea:	e79c      	b.n	8008626 <__multiply+0x82>
 80086ec:	0800abb7 	.word	0x0800abb7
 80086f0:	0800abc8 	.word	0x0800abc8

080086f4 <__pow5mult>:
 80086f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	4615      	mov	r5, r2
 80086fa:	f012 0203 	ands.w	r2, r2, #3
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	d007      	beq.n	8008714 <__pow5mult+0x20>
 8008704:	4c25      	ldr	r4, [pc, #148]	; (800879c <__pow5mult+0xa8>)
 8008706:	3a01      	subs	r2, #1
 8008708:	2300      	movs	r3, #0
 800870a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800870e:	f7ff fe55 	bl	80083bc <__multadd>
 8008712:	4607      	mov	r7, r0
 8008714:	10ad      	asrs	r5, r5, #2
 8008716:	d03d      	beq.n	8008794 <__pow5mult+0xa0>
 8008718:	69f4      	ldr	r4, [r6, #28]
 800871a:	b97c      	cbnz	r4, 800873c <__pow5mult+0x48>
 800871c:	2010      	movs	r0, #16
 800871e:	f7ff fd37 	bl	8008190 <malloc>
 8008722:	4602      	mov	r2, r0
 8008724:	61f0      	str	r0, [r6, #28]
 8008726:	b928      	cbnz	r0, 8008734 <__pow5mult+0x40>
 8008728:	f240 11b3 	movw	r1, #435	; 0x1b3
 800872c:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <__pow5mult+0xac>)
 800872e:	481d      	ldr	r0, [pc, #116]	; (80087a4 <__pow5mult+0xb0>)
 8008730:	f001 fd5a 	bl	800a1e8 <__assert_func>
 8008734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008738:	6004      	str	r4, [r0, #0]
 800873a:	60c4      	str	r4, [r0, #12]
 800873c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008744:	b94c      	cbnz	r4, 800875a <__pow5mult+0x66>
 8008746:	f240 2171 	movw	r1, #625	; 0x271
 800874a:	4630      	mov	r0, r6
 800874c:	f7ff ff14 	bl	8008578 <__i2b>
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	f8c8 0008 	str.w	r0, [r8, #8]
 8008758:	6003      	str	r3, [r0, #0]
 800875a:	f04f 0900 	mov.w	r9, #0
 800875e:	07eb      	lsls	r3, r5, #31
 8008760:	d50a      	bpl.n	8008778 <__pow5mult+0x84>
 8008762:	4639      	mov	r1, r7
 8008764:	4622      	mov	r2, r4
 8008766:	4630      	mov	r0, r6
 8008768:	f7ff ff1c 	bl	80085a4 <__multiply>
 800876c:	4680      	mov	r8, r0
 800876e:	4639      	mov	r1, r7
 8008770:	4630      	mov	r0, r6
 8008772:	f7ff fe01 	bl	8008378 <_Bfree>
 8008776:	4647      	mov	r7, r8
 8008778:	106d      	asrs	r5, r5, #1
 800877a:	d00b      	beq.n	8008794 <__pow5mult+0xa0>
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	b938      	cbnz	r0, 8008790 <__pow5mult+0x9c>
 8008780:	4622      	mov	r2, r4
 8008782:	4621      	mov	r1, r4
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff ff0d 	bl	80085a4 <__multiply>
 800878a:	6020      	str	r0, [r4, #0]
 800878c:	f8c0 9000 	str.w	r9, [r0]
 8008790:	4604      	mov	r4, r0
 8008792:	e7e4      	b.n	800875e <__pow5mult+0x6a>
 8008794:	4638      	mov	r0, r7
 8008796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879a:	bf00      	nop
 800879c:	0800ad18 	.word	0x0800ad18
 80087a0:	0800ab48 	.word	0x0800ab48
 80087a4:	0800abc8 	.word	0x0800abc8

080087a8 <__lshift>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	460c      	mov	r4, r1
 80087ae:	4607      	mov	r7, r0
 80087b0:	4691      	mov	r9, r2
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	6849      	ldr	r1, [r1, #4]
 80087b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087c0:	f108 0601 	add.w	r6, r8, #1
 80087c4:	42b3      	cmp	r3, r6
 80087c6:	db0b      	blt.n	80087e0 <__lshift+0x38>
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff fd95 	bl	80082f8 <_Balloc>
 80087ce:	4605      	mov	r5, r0
 80087d0:	b948      	cbnz	r0, 80087e6 <__lshift+0x3e>
 80087d2:	4602      	mov	r2, r0
 80087d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80087d8:	4b27      	ldr	r3, [pc, #156]	; (8008878 <__lshift+0xd0>)
 80087da:	4828      	ldr	r0, [pc, #160]	; (800887c <__lshift+0xd4>)
 80087dc:	f001 fd04 	bl	800a1e8 <__assert_func>
 80087e0:	3101      	adds	r1, #1
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	e7ee      	b.n	80087c4 <__lshift+0x1c>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f100 0114 	add.w	r1, r0, #20
 80087ec:	f100 0210 	add.w	r2, r0, #16
 80087f0:	4618      	mov	r0, r3
 80087f2:	4553      	cmp	r3, sl
 80087f4:	db33      	blt.n	800885e <__lshift+0xb6>
 80087f6:	6920      	ldr	r0, [r4, #16]
 80087f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087fc:	f104 0314 	add.w	r3, r4, #20
 8008800:	f019 091f 	ands.w	r9, r9, #31
 8008804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800880c:	d02b      	beq.n	8008866 <__lshift+0xbe>
 800880e:	468a      	mov	sl, r1
 8008810:	2200      	movs	r2, #0
 8008812:	f1c9 0e20 	rsb	lr, r9, #32
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	fa00 f009 	lsl.w	r0, r0, r9
 800881c:	4310      	orrs	r0, r2
 800881e:	f84a 0b04 	str.w	r0, [sl], #4
 8008822:	f853 2b04 	ldr.w	r2, [r3], #4
 8008826:	459c      	cmp	ip, r3
 8008828:	fa22 f20e 	lsr.w	r2, r2, lr
 800882c:	d8f3      	bhi.n	8008816 <__lshift+0x6e>
 800882e:	ebac 0304 	sub.w	r3, ip, r4
 8008832:	3b15      	subs	r3, #21
 8008834:	f023 0303 	bic.w	r3, r3, #3
 8008838:	3304      	adds	r3, #4
 800883a:	f104 0015 	add.w	r0, r4, #21
 800883e:	4584      	cmp	ip, r0
 8008840:	bf38      	it	cc
 8008842:	2304      	movcc	r3, #4
 8008844:	50ca      	str	r2, [r1, r3]
 8008846:	b10a      	cbz	r2, 800884c <__lshift+0xa4>
 8008848:	f108 0602 	add.w	r6, r8, #2
 800884c:	3e01      	subs	r6, #1
 800884e:	4638      	mov	r0, r7
 8008850:	4621      	mov	r1, r4
 8008852:	612e      	str	r6, [r5, #16]
 8008854:	f7ff fd90 	bl	8008378 <_Bfree>
 8008858:	4628      	mov	r0, r5
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008862:	3301      	adds	r3, #1
 8008864:	e7c5      	b.n	80087f2 <__lshift+0x4a>
 8008866:	3904      	subs	r1, #4
 8008868:	f853 2b04 	ldr.w	r2, [r3], #4
 800886c:	459c      	cmp	ip, r3
 800886e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008872:	d8f9      	bhi.n	8008868 <__lshift+0xc0>
 8008874:	e7ea      	b.n	800884c <__lshift+0xa4>
 8008876:	bf00      	nop
 8008878:	0800abb7 	.word	0x0800abb7
 800887c:	0800abc8 	.word	0x0800abc8

08008880 <__mcmp>:
 8008880:	4603      	mov	r3, r0
 8008882:	690a      	ldr	r2, [r1, #16]
 8008884:	6900      	ldr	r0, [r0, #16]
 8008886:	b530      	push	{r4, r5, lr}
 8008888:	1a80      	subs	r0, r0, r2
 800888a:	d10d      	bne.n	80088a8 <__mcmp+0x28>
 800888c:	3314      	adds	r3, #20
 800888e:	3114      	adds	r1, #20
 8008890:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008894:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800889c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088a0:	4295      	cmp	r5, r2
 80088a2:	d002      	beq.n	80088aa <__mcmp+0x2a>
 80088a4:	d304      	bcc.n	80088b0 <__mcmp+0x30>
 80088a6:	2001      	movs	r0, #1
 80088a8:	bd30      	pop	{r4, r5, pc}
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	d3f4      	bcc.n	8008898 <__mcmp+0x18>
 80088ae:	e7fb      	b.n	80088a8 <__mcmp+0x28>
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	e7f8      	b.n	80088a8 <__mcmp+0x28>
	...

080088b8 <__mdiff>:
 80088b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	460d      	mov	r5, r1
 80088be:	4607      	mov	r7, r0
 80088c0:	4611      	mov	r1, r2
 80088c2:	4628      	mov	r0, r5
 80088c4:	4614      	mov	r4, r2
 80088c6:	f7ff ffdb 	bl	8008880 <__mcmp>
 80088ca:	1e06      	subs	r6, r0, #0
 80088cc:	d111      	bne.n	80088f2 <__mdiff+0x3a>
 80088ce:	4631      	mov	r1, r6
 80088d0:	4638      	mov	r0, r7
 80088d2:	f7ff fd11 	bl	80082f8 <_Balloc>
 80088d6:	4602      	mov	r2, r0
 80088d8:	b928      	cbnz	r0, 80088e6 <__mdiff+0x2e>
 80088da:	f240 2137 	movw	r1, #567	; 0x237
 80088de:	4b3a      	ldr	r3, [pc, #232]	; (80089c8 <__mdiff+0x110>)
 80088e0:	483a      	ldr	r0, [pc, #232]	; (80089cc <__mdiff+0x114>)
 80088e2:	f001 fc81 	bl	800a1e8 <__assert_func>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80088ec:	4610      	mov	r0, r2
 80088ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f2:	bfa4      	itt	ge
 80088f4:	4623      	movge	r3, r4
 80088f6:	462c      	movge	r4, r5
 80088f8:	4638      	mov	r0, r7
 80088fa:	6861      	ldr	r1, [r4, #4]
 80088fc:	bfa6      	itte	ge
 80088fe:	461d      	movge	r5, r3
 8008900:	2600      	movge	r6, #0
 8008902:	2601      	movlt	r6, #1
 8008904:	f7ff fcf8 	bl	80082f8 <_Balloc>
 8008908:	4602      	mov	r2, r0
 800890a:	b918      	cbnz	r0, 8008914 <__mdiff+0x5c>
 800890c:	f240 2145 	movw	r1, #581	; 0x245
 8008910:	4b2d      	ldr	r3, [pc, #180]	; (80089c8 <__mdiff+0x110>)
 8008912:	e7e5      	b.n	80088e0 <__mdiff+0x28>
 8008914:	f102 0814 	add.w	r8, r2, #20
 8008918:	46c2      	mov	sl, r8
 800891a:	f04f 0c00 	mov.w	ip, #0
 800891e:	6927      	ldr	r7, [r4, #16]
 8008920:	60c6      	str	r6, [r0, #12]
 8008922:	692e      	ldr	r6, [r5, #16]
 8008924:	f104 0014 	add.w	r0, r4, #20
 8008928:	f105 0914 	add.w	r9, r5, #20
 800892c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008930:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008934:	3410      	adds	r4, #16
 8008936:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800893a:	f859 3b04 	ldr.w	r3, [r9], #4
 800893e:	fa1f f18b 	uxth.w	r1, fp
 8008942:	4461      	add	r1, ip
 8008944:	fa1f fc83 	uxth.w	ip, r3
 8008948:	0c1b      	lsrs	r3, r3, #16
 800894a:	eba1 010c 	sub.w	r1, r1, ip
 800894e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008952:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008956:	b289      	uxth	r1, r1
 8008958:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800895c:	454e      	cmp	r6, r9
 800895e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008962:	f84a 1b04 	str.w	r1, [sl], #4
 8008966:	d8e6      	bhi.n	8008936 <__mdiff+0x7e>
 8008968:	1b73      	subs	r3, r6, r5
 800896a:	3b15      	subs	r3, #21
 800896c:	f023 0303 	bic.w	r3, r3, #3
 8008970:	3515      	adds	r5, #21
 8008972:	3304      	adds	r3, #4
 8008974:	42ae      	cmp	r6, r5
 8008976:	bf38      	it	cc
 8008978:	2304      	movcc	r3, #4
 800897a:	4418      	add	r0, r3
 800897c:	4443      	add	r3, r8
 800897e:	461e      	mov	r6, r3
 8008980:	4605      	mov	r5, r0
 8008982:	4575      	cmp	r5, lr
 8008984:	d30e      	bcc.n	80089a4 <__mdiff+0xec>
 8008986:	f10e 0103 	add.w	r1, lr, #3
 800898a:	1a09      	subs	r1, r1, r0
 800898c:	f021 0103 	bic.w	r1, r1, #3
 8008990:	3803      	subs	r0, #3
 8008992:	4586      	cmp	lr, r0
 8008994:	bf38      	it	cc
 8008996:	2100      	movcc	r1, #0
 8008998:	440b      	add	r3, r1
 800899a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800899e:	b189      	cbz	r1, 80089c4 <__mdiff+0x10c>
 80089a0:	6117      	str	r7, [r2, #16]
 80089a2:	e7a3      	b.n	80088ec <__mdiff+0x34>
 80089a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80089a8:	fa1f f188 	uxth.w	r1, r8
 80089ac:	4461      	add	r1, ip
 80089ae:	140c      	asrs	r4, r1, #16
 80089b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089b4:	b289      	uxth	r1, r1
 80089b6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089ba:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80089be:	f846 1b04 	str.w	r1, [r6], #4
 80089c2:	e7de      	b.n	8008982 <__mdiff+0xca>
 80089c4:	3f01      	subs	r7, #1
 80089c6:	e7e8      	b.n	800899a <__mdiff+0xe2>
 80089c8:	0800abb7 	.word	0x0800abb7
 80089cc:	0800abc8 	.word	0x0800abc8

080089d0 <__ulp>:
 80089d0:	4b0e      	ldr	r3, [pc, #56]	; (8008a0c <__ulp+0x3c>)
 80089d2:	400b      	ands	r3, r1
 80089d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dc08      	bgt.n	80089ee <__ulp+0x1e>
 80089dc:	425b      	negs	r3, r3
 80089de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80089e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80089e6:	da04      	bge.n	80089f2 <__ulp+0x22>
 80089e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089ec:	4113      	asrs	r3, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	e008      	b.n	8008a04 <__ulp+0x34>
 80089f2:	f1a2 0314 	sub.w	r3, r2, #20
 80089f6:	2b1e      	cmp	r3, #30
 80089f8:	bfd6      	itet	le
 80089fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80089fe:	2201      	movgt	r2, #1
 8008a00:	40da      	lsrle	r2, r3
 8008a02:	2300      	movs	r3, #0
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	7ff00000 	.word	0x7ff00000

08008a10 <__b2d>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	6905      	ldr	r5, [r0, #16]
 8008a14:	f100 0714 	add.w	r7, r0, #20
 8008a18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008a1c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008a20:	1f2e      	subs	r6, r5, #4
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff fd5a 	bl	80084dc <__hi0bits>
 8008a28:	f1c0 0220 	rsb	r2, r0, #32
 8008a2c:	280a      	cmp	r0, #10
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008a9c <__b2d+0x8c>
 8008a34:	600a      	str	r2, [r1, #0]
 8008a36:	dc12      	bgt.n	8008a5e <__b2d+0x4e>
 8008a38:	f1c0 0e0b 	rsb	lr, r0, #11
 8008a3c:	fa24 f20e 	lsr.w	r2, r4, lr
 8008a40:	42b7      	cmp	r7, r6
 8008a42:	ea42 010c 	orr.w	r1, r2, ip
 8008a46:	bf2c      	ite	cs
 8008a48:	2200      	movcs	r2, #0
 8008a4a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008a4e:	3315      	adds	r3, #21
 8008a50:	fa04 f303 	lsl.w	r3, r4, r3
 8008a54:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a5e:	42b7      	cmp	r7, r6
 8008a60:	bf2e      	itee	cs
 8008a62:	2200      	movcs	r2, #0
 8008a64:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008a68:	f1a5 0608 	subcc.w	r6, r5, #8
 8008a6c:	3b0b      	subs	r3, #11
 8008a6e:	d012      	beq.n	8008a96 <__b2d+0x86>
 8008a70:	f1c3 0520 	rsb	r5, r3, #32
 8008a74:	fa22 f105 	lsr.w	r1, r2, r5
 8008a78:	409c      	lsls	r4, r3
 8008a7a:	430c      	orrs	r4, r1
 8008a7c:	42be      	cmp	r6, r7
 8008a7e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8008a82:	bf94      	ite	ls
 8008a84:	2400      	movls	r4, #0
 8008a86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008a8a:	409a      	lsls	r2, r3
 8008a8c:	40ec      	lsrs	r4, r5
 8008a8e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008a92:	4322      	orrs	r2, r4
 8008a94:	e7e1      	b.n	8008a5a <__b2d+0x4a>
 8008a96:	ea44 010c 	orr.w	r1, r4, ip
 8008a9a:	e7de      	b.n	8008a5a <__b2d+0x4a>
 8008a9c:	3ff00000 	.word	0x3ff00000

08008aa0 <__d2b>:
 8008aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	4617      	mov	r7, r2
 8008aa6:	461c      	mov	r4, r3
 8008aa8:	9e08      	ldr	r6, [sp, #32]
 8008aaa:	f7ff fc25 	bl	80082f8 <_Balloc>
 8008aae:	4605      	mov	r5, r0
 8008ab0:	b930      	cbnz	r0, 8008ac0 <__d2b+0x20>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	f240 310f 	movw	r1, #783	; 0x30f
 8008ab8:	4b22      	ldr	r3, [pc, #136]	; (8008b44 <__d2b+0xa4>)
 8008aba:	4823      	ldr	r0, [pc, #140]	; (8008b48 <__d2b+0xa8>)
 8008abc:	f001 fb94 	bl	800a1e8 <__assert_func>
 8008ac0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008ac4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008ac8:	bb24      	cbnz	r4, 8008b14 <__d2b+0x74>
 8008aca:	2f00      	cmp	r7, #0
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	d026      	beq.n	8008b1e <__d2b+0x7e>
 8008ad0:	4668      	mov	r0, sp
 8008ad2:	9700      	str	r7, [sp, #0]
 8008ad4:	f7ff fd22 	bl	800851c <__lo0bits>
 8008ad8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008adc:	b1e8      	cbz	r0, 8008b1a <__d2b+0x7a>
 8008ade:	f1c0 0320 	rsb	r3, r0, #32
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	430b      	orrs	r3, r1
 8008ae8:	40c2      	lsrs	r2, r0
 8008aea:	616b      	str	r3, [r5, #20]
 8008aec:	9201      	str	r2, [sp, #4]
 8008aee:	9b01      	ldr	r3, [sp, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bf14      	ite	ne
 8008af4:	2102      	movne	r1, #2
 8008af6:	2101      	moveq	r1, #1
 8008af8:	61ab      	str	r3, [r5, #24]
 8008afa:	6129      	str	r1, [r5, #16]
 8008afc:	b1bc      	cbz	r4, 8008b2e <__d2b+0x8e>
 8008afe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008b02:	4404      	add	r4, r0
 8008b04:	6034      	str	r4, [r6, #0]
 8008b06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0c:	6018      	str	r0, [r3, #0]
 8008b0e:	4628      	mov	r0, r5
 8008b10:	b003      	add	sp, #12
 8008b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b18:	e7d7      	b.n	8008aca <__d2b+0x2a>
 8008b1a:	6169      	str	r1, [r5, #20]
 8008b1c:	e7e7      	b.n	8008aee <__d2b+0x4e>
 8008b1e:	a801      	add	r0, sp, #4
 8008b20:	f7ff fcfc 	bl	800851c <__lo0bits>
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	2101      	movs	r1, #1
 8008b28:	616b      	str	r3, [r5, #20]
 8008b2a:	3020      	adds	r0, #32
 8008b2c:	e7e5      	b.n	8008afa <__d2b+0x5a>
 8008b2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b32:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008b36:	6030      	str	r0, [r6, #0]
 8008b38:	6918      	ldr	r0, [r3, #16]
 8008b3a:	f7ff fccf 	bl	80084dc <__hi0bits>
 8008b3e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b42:	e7e2      	b.n	8008b0a <__d2b+0x6a>
 8008b44:	0800abb7 	.word	0x0800abb7
 8008b48:	0800abc8 	.word	0x0800abc8

08008b4c <__ratio>:
 8008b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	4688      	mov	r8, r1
 8008b52:	4669      	mov	r1, sp
 8008b54:	4681      	mov	r9, r0
 8008b56:	f7ff ff5b 	bl	8008a10 <__b2d>
 8008b5a:	460f      	mov	r7, r1
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	460d      	mov	r5, r1
 8008b60:	4640      	mov	r0, r8
 8008b62:	a901      	add	r1, sp, #4
 8008b64:	f7ff ff54 	bl	8008a10 <__b2d>
 8008b68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b6c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b70:	468b      	mov	fp, r1
 8008b72:	eba3 0c02 	sub.w	ip, r3, r2
 8008b76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bfd5      	itete	le
 8008b84:	460a      	movle	r2, r1
 8008b86:	462a      	movgt	r2, r5
 8008b88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b8c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b90:	bfd8      	it	le
 8008b92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b96:	465b      	mov	r3, fp
 8008b98:	4602      	mov	r2, r0
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7f7 fdc5 	bl	800072c <__aeabi_ddiv>
 8008ba2:	b003      	add	sp, #12
 8008ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ba8 <__copybits>:
 8008ba8:	3901      	subs	r1, #1
 8008baa:	b570      	push	{r4, r5, r6, lr}
 8008bac:	1149      	asrs	r1, r1, #5
 8008bae:	6914      	ldr	r4, [r2, #16]
 8008bb0:	3101      	adds	r1, #1
 8008bb2:	f102 0314 	add.w	r3, r2, #20
 8008bb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008bba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bbe:	1f05      	subs	r5, r0, #4
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d30c      	bcc.n	8008bde <__copybits+0x36>
 8008bc4:	1aa3      	subs	r3, r4, r2
 8008bc6:	3b11      	subs	r3, #17
 8008bc8:	f023 0303 	bic.w	r3, r3, #3
 8008bcc:	3211      	adds	r2, #17
 8008bce:	42a2      	cmp	r2, r4
 8008bd0:	bf88      	it	hi
 8008bd2:	2300      	movhi	r3, #0
 8008bd4:	4418      	add	r0, r3
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4288      	cmp	r0, r1
 8008bda:	d305      	bcc.n	8008be8 <__copybits+0x40>
 8008bdc:	bd70      	pop	{r4, r5, r6, pc}
 8008bde:	f853 6b04 	ldr.w	r6, [r3], #4
 8008be2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008be6:	e7eb      	b.n	8008bc0 <__copybits+0x18>
 8008be8:	f840 3b04 	str.w	r3, [r0], #4
 8008bec:	e7f4      	b.n	8008bd8 <__copybits+0x30>

08008bee <__any_on>:
 8008bee:	f100 0214 	add.w	r2, r0, #20
 8008bf2:	6900      	ldr	r0, [r0, #16]
 8008bf4:	114b      	asrs	r3, r1, #5
 8008bf6:	4298      	cmp	r0, r3
 8008bf8:	b510      	push	{r4, lr}
 8008bfa:	db11      	blt.n	8008c20 <__any_on+0x32>
 8008bfc:	dd0a      	ble.n	8008c14 <__any_on+0x26>
 8008bfe:	f011 011f 	ands.w	r1, r1, #31
 8008c02:	d007      	beq.n	8008c14 <__any_on+0x26>
 8008c04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c08:	fa24 f001 	lsr.w	r0, r4, r1
 8008c0c:	fa00 f101 	lsl.w	r1, r0, r1
 8008c10:	428c      	cmp	r4, r1
 8008c12:	d10b      	bne.n	8008c2c <__any_on+0x3e>
 8008c14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d803      	bhi.n	8008c24 <__any_on+0x36>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	bd10      	pop	{r4, pc}
 8008c20:	4603      	mov	r3, r0
 8008c22:	e7f7      	b.n	8008c14 <__any_on+0x26>
 8008c24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d0f5      	beq.n	8008c18 <__any_on+0x2a>
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	e7f6      	b.n	8008c1e <__any_on+0x30>

08008c30 <sulp>:
 8008c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c34:	460f      	mov	r7, r1
 8008c36:	4690      	mov	r8, r2
 8008c38:	f7ff feca 	bl	80089d0 <__ulp>
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	f1b8 0f00 	cmp.w	r8, #0
 8008c44:	d011      	beq.n	8008c6a <sulp+0x3a>
 8008c46:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008c4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	dd0b      	ble.n	8008c6a <sulp+0x3a>
 8008c52:	2400      	movs	r4, #0
 8008c54:	051b      	lsls	r3, r3, #20
 8008c56:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c5a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c5e:	4622      	mov	r2, r4
 8008c60:	462b      	mov	r3, r5
 8008c62:	f7f7 fc39 	bl	80004d8 <__aeabi_dmul>
 8008c66:	4604      	mov	r4, r0
 8008c68:	460d      	mov	r5, r1
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c72:	0000      	movs	r0, r0
 8008c74:	0000      	movs	r0, r0
	...

08008c78 <_strtod_l>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	b09f      	sub	sp, #124	; 0x7c
 8008c7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c80:	2200      	movs	r2, #0
 8008c82:	4604      	mov	r4, r0
 8008c84:	921a      	str	r2, [sp, #104]	; 0x68
 8008c86:	460d      	mov	r5, r1
 8008c88:	f04f 0800 	mov.w	r8, #0
 8008c8c:	f04f 0900 	mov.w	r9, #0
 8008c90:	460a      	mov	r2, r1
 8008c92:	9219      	str	r2, [sp, #100]	; 0x64
 8008c94:	7811      	ldrb	r1, [r2, #0]
 8008c96:	292b      	cmp	r1, #43	; 0x2b
 8008c98:	d04a      	beq.n	8008d30 <_strtod_l+0xb8>
 8008c9a:	d838      	bhi.n	8008d0e <_strtod_l+0x96>
 8008c9c:	290d      	cmp	r1, #13
 8008c9e:	d832      	bhi.n	8008d06 <_strtod_l+0x8e>
 8008ca0:	2908      	cmp	r1, #8
 8008ca2:	d832      	bhi.n	8008d0a <_strtod_l+0x92>
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	d03b      	beq.n	8008d20 <_strtod_l+0xa8>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	920e      	str	r2, [sp, #56]	; 0x38
 8008cac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008cae:	7832      	ldrb	r2, [r6, #0]
 8008cb0:	2a30      	cmp	r2, #48	; 0x30
 8008cb2:	f040 80b2 	bne.w	8008e1a <_strtod_l+0x1a2>
 8008cb6:	7872      	ldrb	r2, [r6, #1]
 8008cb8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008cbc:	2a58      	cmp	r2, #88	; 0x58
 8008cbe:	d16e      	bne.n	8008d9e <_strtod_l+0x126>
 8008cc0:	9302      	str	r3, [sp, #8]
 8008cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	ab1a      	add	r3, sp, #104	; 0x68
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	4a8c      	ldr	r2, [pc, #560]	; (8008f00 <_strtod_l+0x288>)
 8008cce:	ab1b      	add	r3, sp, #108	; 0x6c
 8008cd0:	a919      	add	r1, sp, #100	; 0x64
 8008cd2:	f001 fb23 	bl	800a31c <__gethex>
 8008cd6:	f010 070f 	ands.w	r7, r0, #15
 8008cda:	4605      	mov	r5, r0
 8008cdc:	d005      	beq.n	8008cea <_strtod_l+0x72>
 8008cde:	2f06      	cmp	r7, #6
 8008ce0:	d128      	bne.n	8008d34 <_strtod_l+0xbc>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	3601      	adds	r6, #1
 8008ce6:	9619      	str	r6, [sp, #100]	; 0x64
 8008ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8008cea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 85a0 	bne.w	8009832 <_strtod_l+0xbba>
 8008cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cf4:	b1cb      	cbz	r3, 8008d2a <_strtod_l+0xb2>
 8008cf6:	4642      	mov	r2, r8
 8008cf8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4619      	mov	r1, r3
 8008d00:	b01f      	add	sp, #124	; 0x7c
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	2920      	cmp	r1, #32
 8008d08:	d1ce      	bne.n	8008ca8 <_strtod_l+0x30>
 8008d0a:	3201      	adds	r2, #1
 8008d0c:	e7c1      	b.n	8008c92 <_strtod_l+0x1a>
 8008d0e:	292d      	cmp	r1, #45	; 0x2d
 8008d10:	d1ca      	bne.n	8008ca8 <_strtod_l+0x30>
 8008d12:	2101      	movs	r1, #1
 8008d14:	910e      	str	r1, [sp, #56]	; 0x38
 8008d16:	1c51      	adds	r1, r2, #1
 8008d18:	9119      	str	r1, [sp, #100]	; 0x64
 8008d1a:	7852      	ldrb	r2, [r2, #1]
 8008d1c:	2a00      	cmp	r2, #0
 8008d1e:	d1c5      	bne.n	8008cac <_strtod_l+0x34>
 8008d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d22:	9519      	str	r5, [sp, #100]	; 0x64
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f040 8582 	bne.w	800982e <_strtod_l+0xbb6>
 8008d2a:	4642      	mov	r2, r8
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	e7e5      	b.n	8008cfc <_strtod_l+0x84>
 8008d30:	2100      	movs	r1, #0
 8008d32:	e7ef      	b.n	8008d14 <_strtod_l+0x9c>
 8008d34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d36:	b13a      	cbz	r2, 8008d48 <_strtod_l+0xd0>
 8008d38:	2135      	movs	r1, #53	; 0x35
 8008d3a:	a81c      	add	r0, sp, #112	; 0x70
 8008d3c:	f7ff ff34 	bl	8008ba8 <__copybits>
 8008d40:	4620      	mov	r0, r4
 8008d42:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d44:	f7ff fb18 	bl	8008378 <_Bfree>
 8008d48:	3f01      	subs	r7, #1
 8008d4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d4c:	2f04      	cmp	r7, #4
 8008d4e:	d806      	bhi.n	8008d5e <_strtod_l+0xe6>
 8008d50:	e8df f007 	tbb	[pc, r7]
 8008d54:	201d0314 	.word	0x201d0314
 8008d58:	14          	.byte	0x14
 8008d59:	00          	.byte	0x00
 8008d5a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008d5e:	05e9      	lsls	r1, r5, #23
 8008d60:	bf48      	it	mi
 8008d62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008d66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d6a:	0d1b      	lsrs	r3, r3, #20
 8008d6c:	051b      	lsls	r3, r3, #20
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1bb      	bne.n	8008cea <_strtod_l+0x72>
 8008d72:	f7fe fb0b 	bl	800738c <__errno>
 8008d76:	2322      	movs	r3, #34	; 0x22
 8008d78:	6003      	str	r3, [r0, #0]
 8008d7a:	e7b6      	b.n	8008cea <_strtod_l+0x72>
 8008d7c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d80:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008d84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008d8c:	e7e7      	b.n	8008d5e <_strtod_l+0xe6>
 8008d8e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008f04 <_strtod_l+0x28c>
 8008d92:	e7e4      	b.n	8008d5e <_strtod_l+0xe6>
 8008d94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008d98:	f04f 38ff 	mov.w	r8, #4294967295
 8008d9c:	e7df      	b.n	8008d5e <_strtod_l+0xe6>
 8008d9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	9219      	str	r2, [sp, #100]	; 0x64
 8008da4:	785b      	ldrb	r3, [r3, #1]
 8008da6:	2b30      	cmp	r3, #48	; 0x30
 8008da8:	d0f9      	beq.n	8008d9e <_strtod_l+0x126>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d09d      	beq.n	8008cea <_strtod_l+0x72>
 8008dae:	2301      	movs	r3, #1
 8008db0:	f04f 0a00 	mov.w	sl, #0
 8008db4:	220a      	movs	r2, #10
 8008db6:	46d3      	mov	fp, sl
 8008db8:	9305      	str	r3, [sp, #20]
 8008dba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dbc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dc2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008dc4:	7806      	ldrb	r6, [r0, #0]
 8008dc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008dca:	b2d9      	uxtb	r1, r3
 8008dcc:	2909      	cmp	r1, #9
 8008dce:	d926      	bls.n	8008e1e <_strtod_l+0x1a6>
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	494d      	ldr	r1, [pc, #308]	; (8008f08 <_strtod_l+0x290>)
 8008dd4:	f001 f9bd 	bl	800a152 <strncmp>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d030      	beq.n	8008e3e <_strtod_l+0x1c6>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	4632      	mov	r2, r6
 8008de0:	4603      	mov	r3, r0
 8008de2:	465e      	mov	r6, fp
 8008de4:	9008      	str	r0, [sp, #32]
 8008de6:	2a65      	cmp	r2, #101	; 0x65
 8008de8:	d001      	beq.n	8008dee <_strtod_l+0x176>
 8008dea:	2a45      	cmp	r2, #69	; 0x45
 8008dec:	d113      	bne.n	8008e16 <_strtod_l+0x19e>
 8008dee:	b91e      	cbnz	r6, 8008df8 <_strtod_l+0x180>
 8008df0:	9a05      	ldr	r2, [sp, #20]
 8008df2:	4302      	orrs	r2, r0
 8008df4:	d094      	beq.n	8008d20 <_strtod_l+0xa8>
 8008df6:	2600      	movs	r6, #0
 8008df8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008dfa:	1c6a      	adds	r2, r5, #1
 8008dfc:	9219      	str	r2, [sp, #100]	; 0x64
 8008dfe:	786a      	ldrb	r2, [r5, #1]
 8008e00:	2a2b      	cmp	r2, #43	; 0x2b
 8008e02:	d074      	beq.n	8008eee <_strtod_l+0x276>
 8008e04:	2a2d      	cmp	r2, #45	; 0x2d
 8008e06:	d078      	beq.n	8008efa <_strtod_l+0x282>
 8008e08:	f04f 0c00 	mov.w	ip, #0
 8008e0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e10:	2909      	cmp	r1, #9
 8008e12:	d97f      	bls.n	8008f14 <_strtod_l+0x29c>
 8008e14:	9519      	str	r5, [sp, #100]	; 0x64
 8008e16:	2700      	movs	r7, #0
 8008e18:	e09e      	b.n	8008f58 <_strtod_l+0x2e0>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e7c8      	b.n	8008db0 <_strtod_l+0x138>
 8008e1e:	f1bb 0f08 	cmp.w	fp, #8
 8008e22:	bfd8      	it	le
 8008e24:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008e26:	f100 0001 	add.w	r0, r0, #1
 8008e2a:	bfd6      	itet	le
 8008e2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e30:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008e34:	930a      	strle	r3, [sp, #40]	; 0x28
 8008e36:	f10b 0b01 	add.w	fp, fp, #1
 8008e3a:	9019      	str	r0, [sp, #100]	; 0x64
 8008e3c:	e7c1      	b.n	8008dc2 <_strtod_l+0x14a>
 8008e3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	9219      	str	r2, [sp, #100]	; 0x64
 8008e44:	785a      	ldrb	r2, [r3, #1]
 8008e46:	f1bb 0f00 	cmp.w	fp, #0
 8008e4a:	d037      	beq.n	8008ebc <_strtod_l+0x244>
 8008e4c:	465e      	mov	r6, fp
 8008e4e:	9008      	str	r0, [sp, #32]
 8008e50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e54:	2b09      	cmp	r3, #9
 8008e56:	d912      	bls.n	8008e7e <_strtod_l+0x206>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e7c4      	b.n	8008de6 <_strtod_l+0x16e>
 8008e5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e5e:	3001      	adds	r0, #1
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	9219      	str	r2, [sp, #100]	; 0x64
 8008e64:	785a      	ldrb	r2, [r3, #1]
 8008e66:	2a30      	cmp	r2, #48	; 0x30
 8008e68:	d0f8      	beq.n	8008e5c <_strtod_l+0x1e4>
 8008e6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e6e:	2b08      	cmp	r3, #8
 8008e70:	f200 84e4 	bhi.w	800983c <_strtod_l+0xbc4>
 8008e74:	9008      	str	r0, [sp, #32]
 8008e76:	2000      	movs	r0, #0
 8008e78:	4606      	mov	r6, r0
 8008e7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e7e:	3a30      	subs	r2, #48	; 0x30
 8008e80:	f100 0301 	add.w	r3, r0, #1
 8008e84:	d014      	beq.n	8008eb0 <_strtod_l+0x238>
 8008e86:	9908      	ldr	r1, [sp, #32]
 8008e88:	eb00 0c06 	add.w	ip, r0, r6
 8008e8c:	4419      	add	r1, r3
 8008e8e:	9108      	str	r1, [sp, #32]
 8008e90:	4633      	mov	r3, r6
 8008e92:	210a      	movs	r1, #10
 8008e94:	4563      	cmp	r3, ip
 8008e96:	d113      	bne.n	8008ec0 <_strtod_l+0x248>
 8008e98:	1833      	adds	r3, r6, r0
 8008e9a:	2b08      	cmp	r3, #8
 8008e9c:	f106 0601 	add.w	r6, r6, #1
 8008ea0:	4406      	add	r6, r0
 8008ea2:	dc1a      	bgt.n	8008eda <_strtod_l+0x262>
 8008ea4:	230a      	movs	r3, #10
 8008ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ea8:	fb03 2301 	mla	r3, r3, r1, r2
 8008eac:	930a      	str	r3, [sp, #40]	; 0x28
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	1c51      	adds	r1, r2, #1
 8008eb6:	9119      	str	r1, [sp, #100]	; 0x64
 8008eb8:	7852      	ldrb	r2, [r2, #1]
 8008eba:	e7c9      	b.n	8008e50 <_strtod_l+0x1d8>
 8008ebc:	4658      	mov	r0, fp
 8008ebe:	e7d2      	b.n	8008e66 <_strtod_l+0x1ee>
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	f103 0301 	add.w	r3, r3, #1
 8008ec6:	dc03      	bgt.n	8008ed0 <_strtod_l+0x258>
 8008ec8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008eca:	434f      	muls	r7, r1
 8008ecc:	970a      	str	r7, [sp, #40]	; 0x28
 8008ece:	e7e1      	b.n	8008e94 <_strtod_l+0x21c>
 8008ed0:	2b10      	cmp	r3, #16
 8008ed2:	bfd8      	it	le
 8008ed4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008ed8:	e7dc      	b.n	8008e94 <_strtod_l+0x21c>
 8008eda:	2e10      	cmp	r6, #16
 8008edc:	bfdc      	itt	le
 8008ede:	230a      	movle	r3, #10
 8008ee0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008ee4:	e7e3      	b.n	8008eae <_strtod_l+0x236>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9308      	str	r3, [sp, #32]
 8008eea:	2301      	movs	r3, #1
 8008eec:	e780      	b.n	8008df0 <_strtod_l+0x178>
 8008eee:	f04f 0c00 	mov.w	ip, #0
 8008ef2:	1caa      	adds	r2, r5, #2
 8008ef4:	9219      	str	r2, [sp, #100]	; 0x64
 8008ef6:	78aa      	ldrb	r2, [r5, #2]
 8008ef8:	e788      	b.n	8008e0c <_strtod_l+0x194>
 8008efa:	f04f 0c01 	mov.w	ip, #1
 8008efe:	e7f8      	b.n	8008ef2 <_strtod_l+0x27a>
 8008f00:	0800ad28 	.word	0x0800ad28
 8008f04:	7ff00000 	.word	0x7ff00000
 8008f08:	0800ad24 	.word	0x0800ad24
 8008f0c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f0e:	1c51      	adds	r1, r2, #1
 8008f10:	9119      	str	r1, [sp, #100]	; 0x64
 8008f12:	7852      	ldrb	r2, [r2, #1]
 8008f14:	2a30      	cmp	r2, #48	; 0x30
 8008f16:	d0f9      	beq.n	8008f0c <_strtod_l+0x294>
 8008f18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f1c:	2908      	cmp	r1, #8
 8008f1e:	f63f af7a 	bhi.w	8008e16 <_strtod_l+0x19e>
 8008f22:	3a30      	subs	r2, #48	; 0x30
 8008f24:	9209      	str	r2, [sp, #36]	; 0x24
 8008f26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f28:	920c      	str	r2, [sp, #48]	; 0x30
 8008f2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f2c:	1c57      	adds	r7, r2, #1
 8008f2e:	9719      	str	r7, [sp, #100]	; 0x64
 8008f30:	7852      	ldrb	r2, [r2, #1]
 8008f32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008f36:	f1be 0f09 	cmp.w	lr, #9
 8008f3a:	d938      	bls.n	8008fae <_strtod_l+0x336>
 8008f3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f3e:	1a7f      	subs	r7, r7, r1
 8008f40:	2f08      	cmp	r7, #8
 8008f42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008f46:	dc03      	bgt.n	8008f50 <_strtod_l+0x2d8>
 8008f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f4a:	428f      	cmp	r7, r1
 8008f4c:	bfa8      	it	ge
 8008f4e:	460f      	movge	r7, r1
 8008f50:	f1bc 0f00 	cmp.w	ip, #0
 8008f54:	d000      	beq.n	8008f58 <_strtod_l+0x2e0>
 8008f56:	427f      	negs	r7, r7
 8008f58:	2e00      	cmp	r6, #0
 8008f5a:	d14f      	bne.n	8008ffc <_strtod_l+0x384>
 8008f5c:	9905      	ldr	r1, [sp, #20]
 8008f5e:	4301      	orrs	r1, r0
 8008f60:	f47f aec3 	bne.w	8008cea <_strtod_l+0x72>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f47f aedb 	bne.w	8008d20 <_strtod_l+0xa8>
 8008f6a:	2a69      	cmp	r2, #105	; 0x69
 8008f6c:	d029      	beq.n	8008fc2 <_strtod_l+0x34a>
 8008f6e:	dc26      	bgt.n	8008fbe <_strtod_l+0x346>
 8008f70:	2a49      	cmp	r2, #73	; 0x49
 8008f72:	d026      	beq.n	8008fc2 <_strtod_l+0x34a>
 8008f74:	2a4e      	cmp	r2, #78	; 0x4e
 8008f76:	f47f aed3 	bne.w	8008d20 <_strtod_l+0xa8>
 8008f7a:	499a      	ldr	r1, [pc, #616]	; (80091e4 <_strtod_l+0x56c>)
 8008f7c:	a819      	add	r0, sp, #100	; 0x64
 8008f7e:	f001 fc0f 	bl	800a7a0 <__match>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f43f aecc 	beq.w	8008d20 <_strtod_l+0xa8>
 8008f88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b28      	cmp	r3, #40	; 0x28
 8008f8e:	d12f      	bne.n	8008ff0 <_strtod_l+0x378>
 8008f90:	4995      	ldr	r1, [pc, #596]	; (80091e8 <_strtod_l+0x570>)
 8008f92:	aa1c      	add	r2, sp, #112	; 0x70
 8008f94:	a819      	add	r0, sp, #100	; 0x64
 8008f96:	f001 fc17 	bl	800a7c8 <__hexnan>
 8008f9a:	2805      	cmp	r0, #5
 8008f9c:	d128      	bne.n	8008ff0 <_strtod_l+0x378>
 8008f9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fa0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008fa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008fa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008fac:	e69d      	b.n	8008cea <_strtod_l+0x72>
 8008fae:	210a      	movs	r1, #10
 8008fb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fb2:	fb01 2107 	mla	r1, r1, r7, r2
 8008fb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008fba:	9209      	str	r2, [sp, #36]	; 0x24
 8008fbc:	e7b5      	b.n	8008f2a <_strtod_l+0x2b2>
 8008fbe:	2a6e      	cmp	r2, #110	; 0x6e
 8008fc0:	e7d9      	b.n	8008f76 <_strtod_l+0x2fe>
 8008fc2:	498a      	ldr	r1, [pc, #552]	; (80091ec <_strtod_l+0x574>)
 8008fc4:	a819      	add	r0, sp, #100	; 0x64
 8008fc6:	f001 fbeb 	bl	800a7a0 <__match>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	f43f aea8 	beq.w	8008d20 <_strtod_l+0xa8>
 8008fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fd2:	4987      	ldr	r1, [pc, #540]	; (80091f0 <_strtod_l+0x578>)
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	a819      	add	r0, sp, #100	; 0x64
 8008fd8:	9319      	str	r3, [sp, #100]	; 0x64
 8008fda:	f001 fbe1 	bl	800a7a0 <__match>
 8008fde:	b910      	cbnz	r0, 8008fe6 <_strtod_l+0x36e>
 8008fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	9319      	str	r3, [sp, #100]	; 0x64
 8008fe6:	f04f 0800 	mov.w	r8, #0
 8008fea:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80091f4 <_strtod_l+0x57c>
 8008fee:	e67c      	b.n	8008cea <_strtod_l+0x72>
 8008ff0:	4881      	ldr	r0, [pc, #516]	; (80091f8 <_strtod_l+0x580>)
 8008ff2:	f001 f8f3 	bl	800a1dc <nan>
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	4689      	mov	r9, r1
 8008ffa:	e676      	b.n	8008cea <_strtod_l+0x72>
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	f1bb 0f00 	cmp.w	fp, #0
 8009002:	bf08      	it	eq
 8009004:	46b3      	moveq	fp, r6
 8009006:	1afb      	subs	r3, r7, r3
 8009008:	2e10      	cmp	r6, #16
 800900a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800900c:	4635      	mov	r5, r6
 800900e:	9309      	str	r3, [sp, #36]	; 0x24
 8009010:	bfa8      	it	ge
 8009012:	2510      	movge	r5, #16
 8009014:	f7f7 f9e6 	bl	80003e4 <__aeabi_ui2d>
 8009018:	2e09      	cmp	r6, #9
 800901a:	4680      	mov	r8, r0
 800901c:	4689      	mov	r9, r1
 800901e:	dd13      	ble.n	8009048 <_strtod_l+0x3d0>
 8009020:	4b76      	ldr	r3, [pc, #472]	; (80091fc <_strtod_l+0x584>)
 8009022:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009026:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800902a:	f7f7 fa55 	bl	80004d8 <__aeabi_dmul>
 800902e:	4680      	mov	r8, r0
 8009030:	4650      	mov	r0, sl
 8009032:	4689      	mov	r9, r1
 8009034:	f7f7 f9d6 	bl	80003e4 <__aeabi_ui2d>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4640      	mov	r0, r8
 800903e:	4649      	mov	r1, r9
 8009040:	f7f7 f894 	bl	800016c <__adddf3>
 8009044:	4680      	mov	r8, r0
 8009046:	4689      	mov	r9, r1
 8009048:	2e0f      	cmp	r6, #15
 800904a:	dc36      	bgt.n	80090ba <_strtod_l+0x442>
 800904c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904e:	2b00      	cmp	r3, #0
 8009050:	f43f ae4b 	beq.w	8008cea <_strtod_l+0x72>
 8009054:	dd22      	ble.n	800909c <_strtod_l+0x424>
 8009056:	2b16      	cmp	r3, #22
 8009058:	dc09      	bgt.n	800906e <_strtod_l+0x3f6>
 800905a:	4968      	ldr	r1, [pc, #416]	; (80091fc <_strtod_l+0x584>)
 800905c:	4642      	mov	r2, r8
 800905e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009062:	464b      	mov	r3, r9
 8009064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009068:	f7f7 fa36 	bl	80004d8 <__aeabi_dmul>
 800906c:	e7c3      	b.n	8008ff6 <_strtod_l+0x37e>
 800906e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009070:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009074:	4293      	cmp	r3, r2
 8009076:	db20      	blt.n	80090ba <_strtod_l+0x442>
 8009078:	4c60      	ldr	r4, [pc, #384]	; (80091fc <_strtod_l+0x584>)
 800907a:	f1c6 060f 	rsb	r6, r6, #15
 800907e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009082:	4642      	mov	r2, r8
 8009084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009088:	464b      	mov	r3, r9
 800908a:	f7f7 fa25 	bl	80004d8 <__aeabi_dmul>
 800908e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009090:	1b9e      	subs	r6, r3, r6
 8009092:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009096:	e9d4 2300 	ldrd	r2, r3, [r4]
 800909a:	e7e5      	b.n	8009068 <_strtod_l+0x3f0>
 800909c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909e:	3316      	adds	r3, #22
 80090a0:	db0b      	blt.n	80090ba <_strtod_l+0x442>
 80090a2:	9b08      	ldr	r3, [sp, #32]
 80090a4:	4640      	mov	r0, r8
 80090a6:	1bdf      	subs	r7, r3, r7
 80090a8:	4b54      	ldr	r3, [pc, #336]	; (80091fc <_strtod_l+0x584>)
 80090aa:	4649      	mov	r1, r9
 80090ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80090b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b4:	f7f7 fb3a 	bl	800072c <__aeabi_ddiv>
 80090b8:	e79d      	b.n	8008ff6 <_strtod_l+0x37e>
 80090ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090bc:	1b75      	subs	r5, r6, r5
 80090be:	441d      	add	r5, r3
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	dd70      	ble.n	80091a6 <_strtod_l+0x52e>
 80090c4:	f015 030f 	ands.w	r3, r5, #15
 80090c8:	d00a      	beq.n	80090e0 <_strtod_l+0x468>
 80090ca:	494c      	ldr	r1, [pc, #304]	; (80091fc <_strtod_l+0x584>)
 80090cc:	4642      	mov	r2, r8
 80090ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090d6:	464b      	mov	r3, r9
 80090d8:	f7f7 f9fe 	bl	80004d8 <__aeabi_dmul>
 80090dc:	4680      	mov	r8, r0
 80090de:	4689      	mov	r9, r1
 80090e0:	f035 050f 	bics.w	r5, r5, #15
 80090e4:	d04d      	beq.n	8009182 <_strtod_l+0x50a>
 80090e6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80090ea:	dd22      	ble.n	8009132 <_strtod_l+0x4ba>
 80090ec:	2600      	movs	r6, #0
 80090ee:	46b3      	mov	fp, r6
 80090f0:	960b      	str	r6, [sp, #44]	; 0x2c
 80090f2:	9608      	str	r6, [sp, #32]
 80090f4:	2322      	movs	r3, #34	; 0x22
 80090f6:	f04f 0800 	mov.w	r8, #0
 80090fa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80091f4 <_strtod_l+0x57c>
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009102:	2b00      	cmp	r3, #0
 8009104:	f43f adf1 	beq.w	8008cea <_strtod_l+0x72>
 8009108:	4620      	mov	r0, r4
 800910a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800910c:	f7ff f934 	bl	8008378 <_Bfree>
 8009110:	4620      	mov	r0, r4
 8009112:	9908      	ldr	r1, [sp, #32]
 8009114:	f7ff f930 	bl	8008378 <_Bfree>
 8009118:	4659      	mov	r1, fp
 800911a:	4620      	mov	r0, r4
 800911c:	f7ff f92c 	bl	8008378 <_Bfree>
 8009120:	4620      	mov	r0, r4
 8009122:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009124:	f7ff f928 	bl	8008378 <_Bfree>
 8009128:	4631      	mov	r1, r6
 800912a:	4620      	mov	r0, r4
 800912c:	f7ff f924 	bl	8008378 <_Bfree>
 8009130:	e5db      	b.n	8008cea <_strtod_l+0x72>
 8009132:	4b33      	ldr	r3, [pc, #204]	; (8009200 <_strtod_l+0x588>)
 8009134:	4640      	mov	r0, r8
 8009136:	9305      	str	r3, [sp, #20]
 8009138:	2300      	movs	r3, #0
 800913a:	4649      	mov	r1, r9
 800913c:	469a      	mov	sl, r3
 800913e:	112d      	asrs	r5, r5, #4
 8009140:	2d01      	cmp	r5, #1
 8009142:	dc21      	bgt.n	8009188 <_strtod_l+0x510>
 8009144:	b10b      	cbz	r3, 800914a <_strtod_l+0x4d2>
 8009146:	4680      	mov	r8, r0
 8009148:	4689      	mov	r9, r1
 800914a:	492d      	ldr	r1, [pc, #180]	; (8009200 <_strtod_l+0x588>)
 800914c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009150:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009154:	4642      	mov	r2, r8
 8009156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800915a:	464b      	mov	r3, r9
 800915c:	f7f7 f9bc 	bl	80004d8 <__aeabi_dmul>
 8009160:	4b24      	ldr	r3, [pc, #144]	; (80091f4 <_strtod_l+0x57c>)
 8009162:	460a      	mov	r2, r1
 8009164:	400b      	ands	r3, r1
 8009166:	4927      	ldr	r1, [pc, #156]	; (8009204 <_strtod_l+0x58c>)
 8009168:	4680      	mov	r8, r0
 800916a:	428b      	cmp	r3, r1
 800916c:	d8be      	bhi.n	80090ec <_strtod_l+0x474>
 800916e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009172:	428b      	cmp	r3, r1
 8009174:	bf86      	itte	hi
 8009176:	f04f 38ff 	movhi.w	r8, #4294967295
 800917a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009208 <_strtod_l+0x590>
 800917e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009182:	2300      	movs	r3, #0
 8009184:	9305      	str	r3, [sp, #20]
 8009186:	e07b      	b.n	8009280 <_strtod_l+0x608>
 8009188:	07ea      	lsls	r2, r5, #31
 800918a:	d505      	bpl.n	8009198 <_strtod_l+0x520>
 800918c:	9b05      	ldr	r3, [sp, #20]
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f7f7 f9a1 	bl	80004d8 <__aeabi_dmul>
 8009196:	2301      	movs	r3, #1
 8009198:	9a05      	ldr	r2, [sp, #20]
 800919a:	f10a 0a01 	add.w	sl, sl, #1
 800919e:	3208      	adds	r2, #8
 80091a0:	106d      	asrs	r5, r5, #1
 80091a2:	9205      	str	r2, [sp, #20]
 80091a4:	e7cc      	b.n	8009140 <_strtod_l+0x4c8>
 80091a6:	d0ec      	beq.n	8009182 <_strtod_l+0x50a>
 80091a8:	426d      	negs	r5, r5
 80091aa:	f015 020f 	ands.w	r2, r5, #15
 80091ae:	d00a      	beq.n	80091c6 <_strtod_l+0x54e>
 80091b0:	4b12      	ldr	r3, [pc, #72]	; (80091fc <_strtod_l+0x584>)
 80091b2:	4640      	mov	r0, r8
 80091b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091b8:	4649      	mov	r1, r9
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f7 fab5 	bl	800072c <__aeabi_ddiv>
 80091c2:	4680      	mov	r8, r0
 80091c4:	4689      	mov	r9, r1
 80091c6:	112d      	asrs	r5, r5, #4
 80091c8:	d0db      	beq.n	8009182 <_strtod_l+0x50a>
 80091ca:	2d1f      	cmp	r5, #31
 80091cc:	dd1e      	ble.n	800920c <_strtod_l+0x594>
 80091ce:	2600      	movs	r6, #0
 80091d0:	46b3      	mov	fp, r6
 80091d2:	960b      	str	r6, [sp, #44]	; 0x2c
 80091d4:	9608      	str	r6, [sp, #32]
 80091d6:	2322      	movs	r3, #34	; 0x22
 80091d8:	f04f 0800 	mov.w	r8, #0
 80091dc:	f04f 0900 	mov.w	r9, #0
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	e78d      	b.n	8009100 <_strtod_l+0x488>
 80091e4:	0800ab0f 	.word	0x0800ab0f
 80091e8:	0800ad3c 	.word	0x0800ad3c
 80091ec:	0800ab07 	.word	0x0800ab07
 80091f0:	0800ab3e 	.word	0x0800ab3e
 80091f4:	7ff00000 	.word	0x7ff00000
 80091f8:	0800aecd 	.word	0x0800aecd
 80091fc:	0800ac50 	.word	0x0800ac50
 8009200:	0800ac28 	.word	0x0800ac28
 8009204:	7ca00000 	.word	0x7ca00000
 8009208:	7fefffff 	.word	0x7fefffff
 800920c:	f015 0310 	ands.w	r3, r5, #16
 8009210:	bf18      	it	ne
 8009212:	236a      	movne	r3, #106	; 0x6a
 8009214:	4640      	mov	r0, r8
 8009216:	9305      	str	r3, [sp, #20]
 8009218:	4649      	mov	r1, r9
 800921a:	2300      	movs	r3, #0
 800921c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80094e8 <_strtod_l+0x870>
 8009220:	07ea      	lsls	r2, r5, #31
 8009222:	d504      	bpl.n	800922e <_strtod_l+0x5b6>
 8009224:	e9da 2300 	ldrd	r2, r3, [sl]
 8009228:	f7f7 f956 	bl	80004d8 <__aeabi_dmul>
 800922c:	2301      	movs	r3, #1
 800922e:	106d      	asrs	r5, r5, #1
 8009230:	f10a 0a08 	add.w	sl, sl, #8
 8009234:	d1f4      	bne.n	8009220 <_strtod_l+0x5a8>
 8009236:	b10b      	cbz	r3, 800923c <_strtod_l+0x5c4>
 8009238:	4680      	mov	r8, r0
 800923a:	4689      	mov	r9, r1
 800923c:	9b05      	ldr	r3, [sp, #20]
 800923e:	b1bb      	cbz	r3, 8009270 <_strtod_l+0x5f8>
 8009240:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009244:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009248:	2b00      	cmp	r3, #0
 800924a:	4649      	mov	r1, r9
 800924c:	dd10      	ble.n	8009270 <_strtod_l+0x5f8>
 800924e:	2b1f      	cmp	r3, #31
 8009250:	f340 8128 	ble.w	80094a4 <_strtod_l+0x82c>
 8009254:	2b34      	cmp	r3, #52	; 0x34
 8009256:	bfd8      	it	le
 8009258:	f04f 33ff 	movle.w	r3, #4294967295
 800925c:	f04f 0800 	mov.w	r8, #0
 8009260:	bfcf      	iteee	gt
 8009262:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009266:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800926a:	4093      	lslle	r3, r2
 800926c:	ea03 0901 	andle.w	r9, r3, r1
 8009270:	2200      	movs	r2, #0
 8009272:	2300      	movs	r3, #0
 8009274:	4640      	mov	r0, r8
 8009276:	4649      	mov	r1, r9
 8009278:	f7f7 fb96 	bl	80009a8 <__aeabi_dcmpeq>
 800927c:	2800      	cmp	r0, #0
 800927e:	d1a6      	bne.n	80091ce <_strtod_l+0x556>
 8009280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009282:	465a      	mov	r2, fp
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4620      	mov	r0, r4
 8009288:	4633      	mov	r3, r6
 800928a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800928c:	f7ff f8dc 	bl	8008448 <__s2b>
 8009290:	900b      	str	r0, [sp, #44]	; 0x2c
 8009292:	2800      	cmp	r0, #0
 8009294:	f43f af2a 	beq.w	80090ec <_strtod_l+0x474>
 8009298:	2600      	movs	r6, #0
 800929a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800929c:	9b08      	ldr	r3, [sp, #32]
 800929e:	2a00      	cmp	r2, #0
 80092a0:	eba3 0307 	sub.w	r3, r3, r7
 80092a4:	bfa8      	it	ge
 80092a6:	2300      	movge	r3, #0
 80092a8:	46b3      	mov	fp, r6
 80092aa:	9312      	str	r3, [sp, #72]	; 0x48
 80092ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80092b0:	9316      	str	r3, [sp, #88]	; 0x58
 80092b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b4:	4620      	mov	r0, r4
 80092b6:	6859      	ldr	r1, [r3, #4]
 80092b8:	f7ff f81e 	bl	80082f8 <_Balloc>
 80092bc:	9008      	str	r0, [sp, #32]
 80092be:	2800      	cmp	r0, #0
 80092c0:	f43f af18 	beq.w	80090f4 <_strtod_l+0x47c>
 80092c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c6:	300c      	adds	r0, #12
 80092c8:	691a      	ldr	r2, [r3, #16]
 80092ca:	f103 010c 	add.w	r1, r3, #12
 80092ce:	3202      	adds	r2, #2
 80092d0:	0092      	lsls	r2, r2, #2
 80092d2:	f7fe f895 	bl	8007400 <memcpy>
 80092d6:	ab1c      	add	r3, sp, #112	; 0x70
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	ab1b      	add	r3, sp, #108	; 0x6c
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	4642      	mov	r2, r8
 80092e0:	464b      	mov	r3, r9
 80092e2:	4620      	mov	r0, r4
 80092e4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80092e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80092ec:	f7ff fbd8 	bl	8008aa0 <__d2b>
 80092f0:	901a      	str	r0, [sp, #104]	; 0x68
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f aefe 	beq.w	80090f4 <_strtod_l+0x47c>
 80092f8:	2101      	movs	r1, #1
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7ff f93c 	bl	8008578 <__i2b>
 8009300:	4683      	mov	fp, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	f43f aef6 	beq.w	80090f4 <_strtod_l+0x47c>
 8009308:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800930a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800930c:	2f00      	cmp	r7, #0
 800930e:	bfab      	itete	ge
 8009310:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009312:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009314:	eb07 0a03 	addge.w	sl, r7, r3
 8009318:	1bdd      	sublt	r5, r3, r7
 800931a:	9b05      	ldr	r3, [sp, #20]
 800931c:	bfa8      	it	ge
 800931e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009320:	eba7 0703 	sub.w	r7, r7, r3
 8009324:	4417      	add	r7, r2
 8009326:	4b71      	ldr	r3, [pc, #452]	; (80094ec <_strtod_l+0x874>)
 8009328:	f107 37ff 	add.w	r7, r7, #4294967295
 800932c:	bfb8      	it	lt
 800932e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009332:	429f      	cmp	r7, r3
 8009334:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009338:	f280 80c7 	bge.w	80094ca <_strtod_l+0x852>
 800933c:	1bdb      	subs	r3, r3, r7
 800933e:	2b1f      	cmp	r3, #31
 8009340:	f04f 0101 	mov.w	r1, #1
 8009344:	eba2 0203 	sub.w	r2, r2, r3
 8009348:	f300 80b3 	bgt.w	80094b2 <_strtod_l+0x83a>
 800934c:	fa01 f303 	lsl.w	r3, r1, r3
 8009350:	9313      	str	r3, [sp, #76]	; 0x4c
 8009352:	2300      	movs	r3, #0
 8009354:	9310      	str	r3, [sp, #64]	; 0x40
 8009356:	eb0a 0702 	add.w	r7, sl, r2
 800935a:	9b05      	ldr	r3, [sp, #20]
 800935c:	45ba      	cmp	sl, r7
 800935e:	4415      	add	r5, r2
 8009360:	441d      	add	r5, r3
 8009362:	4653      	mov	r3, sl
 8009364:	bfa8      	it	ge
 8009366:	463b      	movge	r3, r7
 8009368:	42ab      	cmp	r3, r5
 800936a:	bfa8      	it	ge
 800936c:	462b      	movge	r3, r5
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfc2      	ittt	gt
 8009372:	1aff      	subgt	r7, r7, r3
 8009374:	1aed      	subgt	r5, r5, r3
 8009376:	ebaa 0a03 	subgt.w	sl, sl, r3
 800937a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800937c:	2b00      	cmp	r3, #0
 800937e:	dd17      	ble.n	80093b0 <_strtod_l+0x738>
 8009380:	4659      	mov	r1, fp
 8009382:	461a      	mov	r2, r3
 8009384:	4620      	mov	r0, r4
 8009386:	f7ff f9b5 	bl	80086f4 <__pow5mult>
 800938a:	4683      	mov	fp, r0
 800938c:	2800      	cmp	r0, #0
 800938e:	f43f aeb1 	beq.w	80090f4 <_strtod_l+0x47c>
 8009392:	4601      	mov	r1, r0
 8009394:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009396:	4620      	mov	r0, r4
 8009398:	f7ff f904 	bl	80085a4 <__multiply>
 800939c:	900a      	str	r0, [sp, #40]	; 0x28
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f aea8 	beq.w	80090f4 <_strtod_l+0x47c>
 80093a4:	4620      	mov	r0, r4
 80093a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093a8:	f7fe ffe6 	bl	8008378 <_Bfree>
 80093ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ae:	931a      	str	r3, [sp, #104]	; 0x68
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	f300 808f 	bgt.w	80094d4 <_strtod_l+0x85c>
 80093b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	dd08      	ble.n	80093ce <_strtod_l+0x756>
 80093bc:	4620      	mov	r0, r4
 80093be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80093c0:	9908      	ldr	r1, [sp, #32]
 80093c2:	f7ff f997 	bl	80086f4 <__pow5mult>
 80093c6:	9008      	str	r0, [sp, #32]
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f43f ae93 	beq.w	80090f4 <_strtod_l+0x47c>
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	dd08      	ble.n	80093e4 <_strtod_l+0x76c>
 80093d2:	462a      	mov	r2, r5
 80093d4:	4620      	mov	r0, r4
 80093d6:	9908      	ldr	r1, [sp, #32]
 80093d8:	f7ff f9e6 	bl	80087a8 <__lshift>
 80093dc:	9008      	str	r0, [sp, #32]
 80093de:	2800      	cmp	r0, #0
 80093e0:	f43f ae88 	beq.w	80090f4 <_strtod_l+0x47c>
 80093e4:	f1ba 0f00 	cmp.w	sl, #0
 80093e8:	dd08      	ble.n	80093fc <_strtod_l+0x784>
 80093ea:	4659      	mov	r1, fp
 80093ec:	4652      	mov	r2, sl
 80093ee:	4620      	mov	r0, r4
 80093f0:	f7ff f9da 	bl	80087a8 <__lshift>
 80093f4:	4683      	mov	fp, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f43f ae7c 	beq.w	80090f4 <_strtod_l+0x47c>
 80093fc:	4620      	mov	r0, r4
 80093fe:	9a08      	ldr	r2, [sp, #32]
 8009400:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009402:	f7ff fa59 	bl	80088b8 <__mdiff>
 8009406:	4606      	mov	r6, r0
 8009408:	2800      	cmp	r0, #0
 800940a:	f43f ae73 	beq.w	80090f4 <_strtod_l+0x47c>
 800940e:	2500      	movs	r5, #0
 8009410:	68c3      	ldr	r3, [r0, #12]
 8009412:	4659      	mov	r1, fp
 8009414:	60c5      	str	r5, [r0, #12]
 8009416:	930a      	str	r3, [sp, #40]	; 0x28
 8009418:	f7ff fa32 	bl	8008880 <__mcmp>
 800941c:	42a8      	cmp	r0, r5
 800941e:	da6b      	bge.n	80094f8 <_strtod_l+0x880>
 8009420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009422:	ea53 0308 	orrs.w	r3, r3, r8
 8009426:	f040 808f 	bne.w	8009548 <_strtod_l+0x8d0>
 800942a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800942e:	2b00      	cmp	r3, #0
 8009430:	f040 808a 	bne.w	8009548 <_strtod_l+0x8d0>
 8009434:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009438:	0d1b      	lsrs	r3, r3, #20
 800943a:	051b      	lsls	r3, r3, #20
 800943c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009440:	f240 8082 	bls.w	8009548 <_strtod_l+0x8d0>
 8009444:	6973      	ldr	r3, [r6, #20]
 8009446:	b913      	cbnz	r3, 800944e <_strtod_l+0x7d6>
 8009448:	6933      	ldr	r3, [r6, #16]
 800944a:	2b01      	cmp	r3, #1
 800944c:	dd7c      	ble.n	8009548 <_strtod_l+0x8d0>
 800944e:	4631      	mov	r1, r6
 8009450:	2201      	movs	r2, #1
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff f9a8 	bl	80087a8 <__lshift>
 8009458:	4659      	mov	r1, fp
 800945a:	4606      	mov	r6, r0
 800945c:	f7ff fa10 	bl	8008880 <__mcmp>
 8009460:	2800      	cmp	r0, #0
 8009462:	dd71      	ble.n	8009548 <_strtod_l+0x8d0>
 8009464:	9905      	ldr	r1, [sp, #20]
 8009466:	464b      	mov	r3, r9
 8009468:	4a21      	ldr	r2, [pc, #132]	; (80094f0 <_strtod_l+0x878>)
 800946a:	2900      	cmp	r1, #0
 800946c:	f000 808d 	beq.w	800958a <_strtod_l+0x912>
 8009470:	ea02 0109 	and.w	r1, r2, r9
 8009474:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009478:	f300 8087 	bgt.w	800958a <_strtod_l+0x912>
 800947c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009480:	f77f aea9 	ble.w	80091d6 <_strtod_l+0x55e>
 8009484:	4640      	mov	r0, r8
 8009486:	4649      	mov	r1, r9
 8009488:	4b1a      	ldr	r3, [pc, #104]	; (80094f4 <_strtod_l+0x87c>)
 800948a:	2200      	movs	r2, #0
 800948c:	f7f7 f824 	bl	80004d8 <__aeabi_dmul>
 8009490:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <_strtod_l+0x878>)
 8009492:	4680      	mov	r8, r0
 8009494:	400b      	ands	r3, r1
 8009496:	4689      	mov	r9, r1
 8009498:	2b00      	cmp	r3, #0
 800949a:	f47f ae35 	bne.w	8009108 <_strtod_l+0x490>
 800949e:	2322      	movs	r3, #34	; 0x22
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	e631      	b.n	8009108 <_strtod_l+0x490>
 80094a4:	f04f 32ff 	mov.w	r2, #4294967295
 80094a8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ac:	ea03 0808 	and.w	r8, r3, r8
 80094b0:	e6de      	b.n	8009270 <_strtod_l+0x5f8>
 80094b2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80094b6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80094ba:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80094be:	37e2      	adds	r7, #226	; 0xe2
 80094c0:	fa01 f307 	lsl.w	r3, r1, r7
 80094c4:	9310      	str	r3, [sp, #64]	; 0x40
 80094c6:	9113      	str	r1, [sp, #76]	; 0x4c
 80094c8:	e745      	b.n	8009356 <_strtod_l+0x6de>
 80094ca:	2300      	movs	r3, #0
 80094cc:	9310      	str	r3, [sp, #64]	; 0x40
 80094ce:	2301      	movs	r3, #1
 80094d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80094d2:	e740      	b.n	8009356 <_strtod_l+0x6de>
 80094d4:	463a      	mov	r2, r7
 80094d6:	4620      	mov	r0, r4
 80094d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094da:	f7ff f965 	bl	80087a8 <__lshift>
 80094de:	901a      	str	r0, [sp, #104]	; 0x68
 80094e0:	2800      	cmp	r0, #0
 80094e2:	f47f af68 	bne.w	80093b6 <_strtod_l+0x73e>
 80094e6:	e605      	b.n	80090f4 <_strtod_l+0x47c>
 80094e8:	0800ad50 	.word	0x0800ad50
 80094ec:	fffffc02 	.word	0xfffffc02
 80094f0:	7ff00000 	.word	0x7ff00000
 80094f4:	39500000 	.word	0x39500000
 80094f8:	46ca      	mov	sl, r9
 80094fa:	d165      	bne.n	80095c8 <_strtod_l+0x950>
 80094fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009502:	b352      	cbz	r2, 800955a <_strtod_l+0x8e2>
 8009504:	4a9e      	ldr	r2, [pc, #632]	; (8009780 <_strtod_l+0xb08>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d12a      	bne.n	8009560 <_strtod_l+0x8e8>
 800950a:	9b05      	ldr	r3, [sp, #20]
 800950c:	4641      	mov	r1, r8
 800950e:	b1fb      	cbz	r3, 8009550 <_strtod_l+0x8d8>
 8009510:	4b9c      	ldr	r3, [pc, #624]	; (8009784 <_strtod_l+0xb0c>)
 8009512:	f04f 32ff 	mov.w	r2, #4294967295
 8009516:	ea09 0303 	and.w	r3, r9, r3
 800951a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800951e:	d81a      	bhi.n	8009556 <_strtod_l+0x8de>
 8009520:	0d1b      	lsrs	r3, r3, #20
 8009522:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	4299      	cmp	r1, r3
 800952c:	d118      	bne.n	8009560 <_strtod_l+0x8e8>
 800952e:	4b96      	ldr	r3, [pc, #600]	; (8009788 <_strtod_l+0xb10>)
 8009530:	459a      	cmp	sl, r3
 8009532:	d102      	bne.n	800953a <_strtod_l+0x8c2>
 8009534:	3101      	adds	r1, #1
 8009536:	f43f addd 	beq.w	80090f4 <_strtod_l+0x47c>
 800953a:	f04f 0800 	mov.w	r8, #0
 800953e:	4b91      	ldr	r3, [pc, #580]	; (8009784 <_strtod_l+0xb0c>)
 8009540:	ea0a 0303 	and.w	r3, sl, r3
 8009544:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009548:	9b05      	ldr	r3, [sp, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d19a      	bne.n	8009484 <_strtod_l+0x80c>
 800954e:	e5db      	b.n	8009108 <_strtod_l+0x490>
 8009550:	f04f 33ff 	mov.w	r3, #4294967295
 8009554:	e7e9      	b.n	800952a <_strtod_l+0x8b2>
 8009556:	4613      	mov	r3, r2
 8009558:	e7e7      	b.n	800952a <_strtod_l+0x8b2>
 800955a:	ea53 0308 	orrs.w	r3, r3, r8
 800955e:	d081      	beq.n	8009464 <_strtod_l+0x7ec>
 8009560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009562:	b1e3      	cbz	r3, 800959e <_strtod_l+0x926>
 8009564:	ea13 0f0a 	tst.w	r3, sl
 8009568:	d0ee      	beq.n	8009548 <_strtod_l+0x8d0>
 800956a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956c:	4640      	mov	r0, r8
 800956e:	4649      	mov	r1, r9
 8009570:	9a05      	ldr	r2, [sp, #20]
 8009572:	b1c3      	cbz	r3, 80095a6 <_strtod_l+0x92e>
 8009574:	f7ff fb5c 	bl	8008c30 <sulp>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800957e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009580:	f7f6 fdf4 	bl	800016c <__adddf3>
 8009584:	4680      	mov	r8, r0
 8009586:	4689      	mov	r9, r1
 8009588:	e7de      	b.n	8009548 <_strtod_l+0x8d0>
 800958a:	4013      	ands	r3, r2
 800958c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009590:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009594:	f04f 38ff 	mov.w	r8, #4294967295
 8009598:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800959c:	e7d4      	b.n	8009548 <_strtod_l+0x8d0>
 800959e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095a0:	ea13 0f08 	tst.w	r3, r8
 80095a4:	e7e0      	b.n	8009568 <_strtod_l+0x8f0>
 80095a6:	f7ff fb43 	bl	8008c30 <sulp>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80095b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80095b2:	f7f6 fdd9 	bl	8000168 <__aeabi_dsub>
 80095b6:	2200      	movs	r2, #0
 80095b8:	2300      	movs	r3, #0
 80095ba:	4680      	mov	r8, r0
 80095bc:	4689      	mov	r9, r1
 80095be:	f7f7 f9f3 	bl	80009a8 <__aeabi_dcmpeq>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d0c0      	beq.n	8009548 <_strtod_l+0x8d0>
 80095c6:	e606      	b.n	80091d6 <_strtod_l+0x55e>
 80095c8:	4659      	mov	r1, fp
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7ff fabe 	bl	8008b4c <__ratio>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80095d8:	2200      	movs	r2, #0
 80095da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095de:	f7f7 f9f7 	bl	80009d0 <__aeabi_dcmple>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d06f      	beq.n	80096c6 <_strtod_l+0xa4e>
 80095e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d17c      	bne.n	80096e6 <_strtod_l+0xa6e>
 80095ec:	f1b8 0f00 	cmp.w	r8, #0
 80095f0:	d159      	bne.n	80096a6 <_strtod_l+0xa2e>
 80095f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d17b      	bne.n	80096f2 <_strtod_l+0xa7a>
 80095fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095fe:	2200      	movs	r2, #0
 8009600:	4b62      	ldr	r3, [pc, #392]	; (800978c <_strtod_l+0xb14>)
 8009602:	f7f7 f9db 	bl	80009bc <__aeabi_dcmplt>
 8009606:	2800      	cmp	r0, #0
 8009608:	d15a      	bne.n	80096c0 <_strtod_l+0xa48>
 800960a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800960e:	2200      	movs	r2, #0
 8009610:	4b5f      	ldr	r3, [pc, #380]	; (8009790 <_strtod_l+0xb18>)
 8009612:	f7f6 ff61 	bl	80004d8 <__aeabi_dmul>
 8009616:	4605      	mov	r5, r0
 8009618:	460f      	mov	r7, r1
 800961a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800961e:	9506      	str	r5, [sp, #24]
 8009620:	9307      	str	r3, [sp, #28]
 8009622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009626:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800962a:	4b56      	ldr	r3, [pc, #344]	; (8009784 <_strtod_l+0xb0c>)
 800962c:	4a55      	ldr	r2, [pc, #340]	; (8009784 <_strtod_l+0xb0c>)
 800962e:	ea0a 0303 	and.w	r3, sl, r3
 8009632:	9313      	str	r3, [sp, #76]	; 0x4c
 8009634:	4b57      	ldr	r3, [pc, #348]	; (8009794 <_strtod_l+0xb1c>)
 8009636:	ea0a 0202 	and.w	r2, sl, r2
 800963a:	429a      	cmp	r2, r3
 800963c:	f040 80b0 	bne.w	80097a0 <_strtod_l+0xb28>
 8009640:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009644:	4640      	mov	r0, r8
 8009646:	4649      	mov	r1, r9
 8009648:	f7ff f9c2 	bl	80089d0 <__ulp>
 800964c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009650:	f7f6 ff42 	bl	80004d8 <__aeabi_dmul>
 8009654:	4642      	mov	r2, r8
 8009656:	464b      	mov	r3, r9
 8009658:	f7f6 fd88 	bl	800016c <__adddf3>
 800965c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009784 <_strtod_l+0xb0c>
 8009660:	4a4d      	ldr	r2, [pc, #308]	; (8009798 <_strtod_l+0xb20>)
 8009662:	ea01 0a0a 	and.w	sl, r1, sl
 8009666:	4592      	cmp	sl, r2
 8009668:	4680      	mov	r8, r0
 800966a:	d948      	bls.n	80096fe <_strtod_l+0xa86>
 800966c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800966e:	4b46      	ldr	r3, [pc, #280]	; (8009788 <_strtod_l+0xb10>)
 8009670:	429a      	cmp	r2, r3
 8009672:	d103      	bne.n	800967c <_strtod_l+0xa04>
 8009674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009676:	3301      	adds	r3, #1
 8009678:	f43f ad3c 	beq.w	80090f4 <_strtod_l+0x47c>
 800967c:	f04f 38ff 	mov.w	r8, #4294967295
 8009680:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009788 <_strtod_l+0xb10>
 8009684:	4620      	mov	r0, r4
 8009686:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009688:	f7fe fe76 	bl	8008378 <_Bfree>
 800968c:	4620      	mov	r0, r4
 800968e:	9908      	ldr	r1, [sp, #32]
 8009690:	f7fe fe72 	bl	8008378 <_Bfree>
 8009694:	4659      	mov	r1, fp
 8009696:	4620      	mov	r0, r4
 8009698:	f7fe fe6e 	bl	8008378 <_Bfree>
 800969c:	4631      	mov	r1, r6
 800969e:	4620      	mov	r0, r4
 80096a0:	f7fe fe6a 	bl	8008378 <_Bfree>
 80096a4:	e605      	b.n	80092b2 <_strtod_l+0x63a>
 80096a6:	f1b8 0f01 	cmp.w	r8, #1
 80096aa:	d103      	bne.n	80096b4 <_strtod_l+0xa3c>
 80096ac:	f1b9 0f00 	cmp.w	r9, #0
 80096b0:	f43f ad91 	beq.w	80091d6 <_strtod_l+0x55e>
 80096b4:	2200      	movs	r2, #0
 80096b6:	4b39      	ldr	r3, [pc, #228]	; (800979c <_strtod_l+0xb24>)
 80096b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80096ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80096be:	e016      	b.n	80096ee <_strtod_l+0xa76>
 80096c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80096c2:	4f33      	ldr	r7, [pc, #204]	; (8009790 <_strtod_l+0xb18>)
 80096c4:	e7a9      	b.n	800961a <_strtod_l+0x9a2>
 80096c6:	4b32      	ldr	r3, [pc, #200]	; (8009790 <_strtod_l+0xb18>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096ce:	f7f6 ff03 	bl	80004d8 <__aeabi_dmul>
 80096d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d4:	4605      	mov	r5, r0
 80096d6:	460f      	mov	r7, r1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d09e      	beq.n	800961a <_strtod_l+0x9a2>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80096e4:	e79d      	b.n	8009622 <_strtod_l+0x9aa>
 80096e6:	2200      	movs	r2, #0
 80096e8:	4b28      	ldr	r3, [pc, #160]	; (800978c <_strtod_l+0xb14>)
 80096ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80096ee:	4f27      	ldr	r7, [pc, #156]	; (800978c <_strtod_l+0xb14>)
 80096f0:	e797      	b.n	8009622 <_strtod_l+0x9aa>
 80096f2:	2200      	movs	r2, #0
 80096f4:	4b29      	ldr	r3, [pc, #164]	; (800979c <_strtod_l+0xb24>)
 80096f6:	4645      	mov	r5, r8
 80096f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80096fc:	e7f7      	b.n	80096ee <_strtod_l+0xa76>
 80096fe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009702:	9b05      	ldr	r3, [sp, #20]
 8009704:	46ca      	mov	sl, r9
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1bc      	bne.n	8009684 <_strtod_l+0xa0c>
 800970a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800970e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009710:	0d1b      	lsrs	r3, r3, #20
 8009712:	051b      	lsls	r3, r3, #20
 8009714:	429a      	cmp	r2, r3
 8009716:	d1b5      	bne.n	8009684 <_strtod_l+0xa0c>
 8009718:	4628      	mov	r0, r5
 800971a:	4639      	mov	r1, r7
 800971c:	f7f7 fcf8 	bl	8001110 <__aeabi_d2lz>
 8009720:	f7f6 feac 	bl	800047c <__aeabi_l2d>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4628      	mov	r0, r5
 800972a:	4639      	mov	r1, r7
 800972c:	f7f6 fd1c 	bl	8000168 <__aeabi_dsub>
 8009730:	460b      	mov	r3, r1
 8009732:	4602      	mov	r2, r0
 8009734:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009738:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800973c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973e:	ea4a 0a08 	orr.w	sl, sl, r8
 8009742:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009746:	d06c      	beq.n	8009822 <_strtod_l+0xbaa>
 8009748:	a309      	add	r3, pc, #36	; (adr r3, 8009770 <_strtod_l+0xaf8>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f7 f935 	bl	80009bc <__aeabi_dcmplt>
 8009752:	2800      	cmp	r0, #0
 8009754:	f47f acd8 	bne.w	8009108 <_strtod_l+0x490>
 8009758:	a307      	add	r3, pc, #28	; (adr r3, 8009778 <_strtod_l+0xb00>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009762:	f7f7 f949 	bl	80009f8 <__aeabi_dcmpgt>
 8009766:	2800      	cmp	r0, #0
 8009768:	d08c      	beq.n	8009684 <_strtod_l+0xa0c>
 800976a:	e4cd      	b.n	8009108 <_strtod_l+0x490>
 800976c:	f3af 8000 	nop.w
 8009770:	94a03595 	.word	0x94a03595
 8009774:	3fdfffff 	.word	0x3fdfffff
 8009778:	35afe535 	.word	0x35afe535
 800977c:	3fe00000 	.word	0x3fe00000
 8009780:	000fffff 	.word	0x000fffff
 8009784:	7ff00000 	.word	0x7ff00000
 8009788:	7fefffff 	.word	0x7fefffff
 800978c:	3ff00000 	.word	0x3ff00000
 8009790:	3fe00000 	.word	0x3fe00000
 8009794:	7fe00000 	.word	0x7fe00000
 8009798:	7c9fffff 	.word	0x7c9fffff
 800979c:	bff00000 	.word	0xbff00000
 80097a0:	9b05      	ldr	r3, [sp, #20]
 80097a2:	b333      	cbz	r3, 80097f2 <_strtod_l+0xb7a>
 80097a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097aa:	d822      	bhi.n	80097f2 <_strtod_l+0xb7a>
 80097ac:	a328      	add	r3, pc, #160	; (adr r3, 8009850 <_strtod_l+0xbd8>)
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	4628      	mov	r0, r5
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f7 f90b 	bl	80009d0 <__aeabi_dcmple>
 80097ba:	b1a0      	cbz	r0, 80097e6 <_strtod_l+0xb6e>
 80097bc:	4639      	mov	r1, r7
 80097be:	4628      	mov	r0, r5
 80097c0:	f7f7 f962 	bl	8000a88 <__aeabi_d2uiz>
 80097c4:	2801      	cmp	r0, #1
 80097c6:	bf38      	it	cc
 80097c8:	2001      	movcc	r0, #1
 80097ca:	f7f6 fe0b 	bl	80003e4 <__aeabi_ui2d>
 80097ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d0:	4605      	mov	r5, r0
 80097d2:	460f      	mov	r7, r1
 80097d4:	bb03      	cbnz	r3, 8009818 <_strtod_l+0xba0>
 80097d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097da:	9014      	str	r0, [sp, #80]	; 0x50
 80097dc:	9315      	str	r3, [sp, #84]	; 0x54
 80097de:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80097e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80097e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097ea:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80097ee:	1a9b      	subs	r3, r3, r2
 80097f0:	9311      	str	r3, [sp, #68]	; 0x44
 80097f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80097f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80097f6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80097fa:	f7ff f8e9 	bl	80089d0 <__ulp>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4640      	mov	r0, r8
 8009804:	4649      	mov	r1, r9
 8009806:	f7f6 fe67 	bl	80004d8 <__aeabi_dmul>
 800980a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800980c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800980e:	f7f6 fcad 	bl	800016c <__adddf3>
 8009812:	4680      	mov	r8, r0
 8009814:	4689      	mov	r9, r1
 8009816:	e774      	b.n	8009702 <_strtod_l+0xa8a>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009820:	e7dd      	b.n	80097de <_strtod_l+0xb66>
 8009822:	a30d      	add	r3, pc, #52	; (adr r3, 8009858 <_strtod_l+0xbe0>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f7 f8c8 	bl	80009bc <__aeabi_dcmplt>
 800982c:	e79b      	b.n	8009766 <_strtod_l+0xaee>
 800982e:	2300      	movs	r3, #0
 8009830:	930e      	str	r3, [sp, #56]	; 0x38
 8009832:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009834:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	f7ff ba5b 	b.w	8008cf2 <_strtod_l+0x7a>
 800983c:	2a65      	cmp	r2, #101	; 0x65
 800983e:	f43f ab52 	beq.w	8008ee6 <_strtod_l+0x26e>
 8009842:	2a45      	cmp	r2, #69	; 0x45
 8009844:	f43f ab4f 	beq.w	8008ee6 <_strtod_l+0x26e>
 8009848:	2301      	movs	r3, #1
 800984a:	f7ff bb87 	b.w	8008f5c <_strtod_l+0x2e4>
 800984e:	bf00      	nop
 8009850:	ffc00000 	.word	0xffc00000
 8009854:	41dfffff 	.word	0x41dfffff
 8009858:	94a03595 	.word	0x94a03595
 800985c:	3fcfffff 	.word	0x3fcfffff

08009860 <_strtod_r>:
 8009860:	4b01      	ldr	r3, [pc, #4]	; (8009868 <_strtod_r+0x8>)
 8009862:	f7ff ba09 	b.w	8008c78 <_strtod_l>
 8009866:	bf00      	nop
 8009868:	200000e0 	.word	0x200000e0

0800986c <_strtol_l.constprop.0>:
 800986c:	2b01      	cmp	r3, #1
 800986e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009872:	4686      	mov	lr, r0
 8009874:	4690      	mov	r8, r2
 8009876:	d001      	beq.n	800987c <_strtol_l.constprop.0+0x10>
 8009878:	2b24      	cmp	r3, #36	; 0x24
 800987a:	d906      	bls.n	800988a <_strtol_l.constprop.0+0x1e>
 800987c:	f7fd fd86 	bl	800738c <__errno>
 8009880:	2316      	movs	r3, #22
 8009882:	6003      	str	r3, [r0, #0]
 8009884:	2000      	movs	r0, #0
 8009886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988a:	460d      	mov	r5, r1
 800988c:	4835      	ldr	r0, [pc, #212]	; (8009964 <_strtol_l.constprop.0+0xf8>)
 800988e:	462a      	mov	r2, r5
 8009890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009894:	5d06      	ldrb	r6, [r0, r4]
 8009896:	f016 0608 	ands.w	r6, r6, #8
 800989a:	d1f8      	bne.n	800988e <_strtol_l.constprop.0+0x22>
 800989c:	2c2d      	cmp	r4, #45	; 0x2d
 800989e:	d12e      	bne.n	80098fe <_strtol_l.constprop.0+0x92>
 80098a0:	2601      	movs	r6, #1
 80098a2:	782c      	ldrb	r4, [r5, #0]
 80098a4:	1c95      	adds	r5, r2, #2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d057      	beq.n	800995a <_strtol_l.constprop.0+0xee>
 80098aa:	2b10      	cmp	r3, #16
 80098ac:	d109      	bne.n	80098c2 <_strtol_l.constprop.0+0x56>
 80098ae:	2c30      	cmp	r4, #48	; 0x30
 80098b0:	d107      	bne.n	80098c2 <_strtol_l.constprop.0+0x56>
 80098b2:	782a      	ldrb	r2, [r5, #0]
 80098b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80098b8:	2a58      	cmp	r2, #88	; 0x58
 80098ba:	d149      	bne.n	8009950 <_strtol_l.constprop.0+0xe4>
 80098bc:	2310      	movs	r3, #16
 80098be:	786c      	ldrb	r4, [r5, #1]
 80098c0:	3502      	adds	r5, #2
 80098c2:	2200      	movs	r2, #0
 80098c4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80098c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80098cc:	fbbc f9f3 	udiv	r9, ip, r3
 80098d0:	4610      	mov	r0, r2
 80098d2:	fb03 ca19 	mls	sl, r3, r9, ip
 80098d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80098da:	2f09      	cmp	r7, #9
 80098dc:	d814      	bhi.n	8009908 <_strtol_l.constprop.0+0x9c>
 80098de:	463c      	mov	r4, r7
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	dd20      	ble.n	8009926 <_strtol_l.constprop.0+0xba>
 80098e4:	1c57      	adds	r7, r2, #1
 80098e6:	d007      	beq.n	80098f8 <_strtol_l.constprop.0+0x8c>
 80098e8:	4581      	cmp	r9, r0
 80098ea:	d319      	bcc.n	8009920 <_strtol_l.constprop.0+0xb4>
 80098ec:	d101      	bne.n	80098f2 <_strtol_l.constprop.0+0x86>
 80098ee:	45a2      	cmp	sl, r4
 80098f0:	db16      	blt.n	8009920 <_strtol_l.constprop.0+0xb4>
 80098f2:	2201      	movs	r2, #1
 80098f4:	fb00 4003 	mla	r0, r0, r3, r4
 80098f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098fc:	e7eb      	b.n	80098d6 <_strtol_l.constprop.0+0x6a>
 80098fe:	2c2b      	cmp	r4, #43	; 0x2b
 8009900:	bf04      	itt	eq
 8009902:	782c      	ldrbeq	r4, [r5, #0]
 8009904:	1c95      	addeq	r5, r2, #2
 8009906:	e7ce      	b.n	80098a6 <_strtol_l.constprop.0+0x3a>
 8009908:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800990c:	2f19      	cmp	r7, #25
 800990e:	d801      	bhi.n	8009914 <_strtol_l.constprop.0+0xa8>
 8009910:	3c37      	subs	r4, #55	; 0x37
 8009912:	e7e5      	b.n	80098e0 <_strtol_l.constprop.0+0x74>
 8009914:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009918:	2f19      	cmp	r7, #25
 800991a:	d804      	bhi.n	8009926 <_strtol_l.constprop.0+0xba>
 800991c:	3c57      	subs	r4, #87	; 0x57
 800991e:	e7df      	b.n	80098e0 <_strtol_l.constprop.0+0x74>
 8009920:	f04f 32ff 	mov.w	r2, #4294967295
 8009924:	e7e8      	b.n	80098f8 <_strtol_l.constprop.0+0x8c>
 8009926:	1c53      	adds	r3, r2, #1
 8009928:	d108      	bne.n	800993c <_strtol_l.constprop.0+0xd0>
 800992a:	2322      	movs	r3, #34	; 0x22
 800992c:	4660      	mov	r0, ip
 800992e:	f8ce 3000 	str.w	r3, [lr]
 8009932:	f1b8 0f00 	cmp.w	r8, #0
 8009936:	d0a6      	beq.n	8009886 <_strtol_l.constprop.0+0x1a>
 8009938:	1e69      	subs	r1, r5, #1
 800993a:	e006      	b.n	800994a <_strtol_l.constprop.0+0xde>
 800993c:	b106      	cbz	r6, 8009940 <_strtol_l.constprop.0+0xd4>
 800993e:	4240      	negs	r0, r0
 8009940:	f1b8 0f00 	cmp.w	r8, #0
 8009944:	d09f      	beq.n	8009886 <_strtol_l.constprop.0+0x1a>
 8009946:	2a00      	cmp	r2, #0
 8009948:	d1f6      	bne.n	8009938 <_strtol_l.constprop.0+0xcc>
 800994a:	f8c8 1000 	str.w	r1, [r8]
 800994e:	e79a      	b.n	8009886 <_strtol_l.constprop.0+0x1a>
 8009950:	2430      	movs	r4, #48	; 0x30
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1b5      	bne.n	80098c2 <_strtol_l.constprop.0+0x56>
 8009956:	2308      	movs	r3, #8
 8009958:	e7b3      	b.n	80098c2 <_strtol_l.constprop.0+0x56>
 800995a:	2c30      	cmp	r4, #48	; 0x30
 800995c:	d0a9      	beq.n	80098b2 <_strtol_l.constprop.0+0x46>
 800995e:	230a      	movs	r3, #10
 8009960:	e7af      	b.n	80098c2 <_strtol_l.constprop.0+0x56>
 8009962:	bf00      	nop
 8009964:	0800ad79 	.word	0x0800ad79

08009968 <_strtol_r>:
 8009968:	f7ff bf80 	b.w	800986c <_strtol_l.constprop.0>

0800996c <__ssputs_r>:
 800996c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009970:	461f      	mov	r7, r3
 8009972:	688e      	ldr	r6, [r1, #8]
 8009974:	4682      	mov	sl, r0
 8009976:	42be      	cmp	r6, r7
 8009978:	460c      	mov	r4, r1
 800997a:	4690      	mov	r8, r2
 800997c:	680b      	ldr	r3, [r1, #0]
 800997e:	d82c      	bhi.n	80099da <__ssputs_r+0x6e>
 8009980:	898a      	ldrh	r2, [r1, #12]
 8009982:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009986:	d026      	beq.n	80099d6 <__ssputs_r+0x6a>
 8009988:	6965      	ldr	r5, [r4, #20]
 800998a:	6909      	ldr	r1, [r1, #16]
 800998c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009990:	eba3 0901 	sub.w	r9, r3, r1
 8009994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009998:	1c7b      	adds	r3, r7, #1
 800999a:	444b      	add	r3, r9
 800999c:	106d      	asrs	r5, r5, #1
 800999e:	429d      	cmp	r5, r3
 80099a0:	bf38      	it	cc
 80099a2:	461d      	movcc	r5, r3
 80099a4:	0553      	lsls	r3, r2, #21
 80099a6:	d527      	bpl.n	80099f8 <__ssputs_r+0x8c>
 80099a8:	4629      	mov	r1, r5
 80099aa:	f7fe fc19 	bl	80081e0 <_malloc_r>
 80099ae:	4606      	mov	r6, r0
 80099b0:	b360      	cbz	r0, 8009a0c <__ssputs_r+0xa0>
 80099b2:	464a      	mov	r2, r9
 80099b4:	6921      	ldr	r1, [r4, #16]
 80099b6:	f7fd fd23 	bl	8007400 <memcpy>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c4:	81a3      	strh	r3, [r4, #12]
 80099c6:	6126      	str	r6, [r4, #16]
 80099c8:	444e      	add	r6, r9
 80099ca:	6026      	str	r6, [r4, #0]
 80099cc:	463e      	mov	r6, r7
 80099ce:	6165      	str	r5, [r4, #20]
 80099d0:	eba5 0509 	sub.w	r5, r5, r9
 80099d4:	60a5      	str	r5, [r4, #8]
 80099d6:	42be      	cmp	r6, r7
 80099d8:	d900      	bls.n	80099dc <__ssputs_r+0x70>
 80099da:	463e      	mov	r6, r7
 80099dc:	4632      	mov	r2, r6
 80099de:	4641      	mov	r1, r8
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	f000 fb9c 	bl	800a11e <memmove>
 80099e6:	2000      	movs	r0, #0
 80099e8:	68a3      	ldr	r3, [r4, #8]
 80099ea:	1b9b      	subs	r3, r3, r6
 80099ec:	60a3      	str	r3, [r4, #8]
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	4433      	add	r3, r6
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f8:	462a      	mov	r2, r5
 80099fa:	f000 ff92 	bl	800a922 <_realloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d1e0      	bne.n	80099c6 <__ssputs_r+0x5a>
 8009a04:	4650      	mov	r0, sl
 8009a06:	6921      	ldr	r1, [r4, #16]
 8009a08:	f7fe fb7a 	bl	8008100 <_free_r>
 8009a0c:	230c      	movs	r3, #12
 8009a0e:	f8ca 3000 	str.w	r3, [sl]
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	e7e9      	b.n	80099f4 <__ssputs_r+0x88>

08009a20 <_svfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	4698      	mov	r8, r3
 8009a26:	898b      	ldrh	r3, [r1, #12]
 8009a28:	4607      	mov	r7, r0
 8009a2a:	061b      	lsls	r3, r3, #24
 8009a2c:	460d      	mov	r5, r1
 8009a2e:	4614      	mov	r4, r2
 8009a30:	b09d      	sub	sp, #116	; 0x74
 8009a32:	d50e      	bpl.n	8009a52 <_svfiprintf_r+0x32>
 8009a34:	690b      	ldr	r3, [r1, #16]
 8009a36:	b963      	cbnz	r3, 8009a52 <_svfiprintf_r+0x32>
 8009a38:	2140      	movs	r1, #64	; 0x40
 8009a3a:	f7fe fbd1 	bl	80081e0 <_malloc_r>
 8009a3e:	6028      	str	r0, [r5, #0]
 8009a40:	6128      	str	r0, [r5, #16]
 8009a42:	b920      	cbnz	r0, 8009a4e <_svfiprintf_r+0x2e>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e0d0      	b.n	8009bf0 <_svfiprintf_r+0x1d0>
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	616b      	str	r3, [r5, #20]
 8009a52:	2300      	movs	r3, #0
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	2320      	movs	r3, #32
 8009a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a5c:	2330      	movs	r3, #48	; 0x30
 8009a5e:	f04f 0901 	mov.w	r9, #1
 8009a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a66:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009c08 <_svfiprintf_r+0x1e8>
 8009a6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a6e:	4623      	mov	r3, r4
 8009a70:	469a      	mov	sl, r3
 8009a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a76:	b10a      	cbz	r2, 8009a7c <_svfiprintf_r+0x5c>
 8009a78:	2a25      	cmp	r2, #37	; 0x25
 8009a7a:	d1f9      	bne.n	8009a70 <_svfiprintf_r+0x50>
 8009a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a80:	d00b      	beq.n	8009a9a <_svfiprintf_r+0x7a>
 8009a82:	465b      	mov	r3, fp
 8009a84:	4622      	mov	r2, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ff6f 	bl	800996c <__ssputs_r>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f000 80a9 	beq.w	8009be6 <_svfiprintf_r+0x1c6>
 8009a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a96:	445a      	add	r2, fp
 8009a98:	9209      	str	r2, [sp, #36]	; 0x24
 8009a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 80a1 	beq.w	8009be6 <_svfiprintf_r+0x1c6>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aae:	f10a 0a01 	add.w	sl, sl, #1
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	9307      	str	r3, [sp, #28]
 8009ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aba:	931a      	str	r3, [sp, #104]	; 0x68
 8009abc:	4654      	mov	r4, sl
 8009abe:	2205      	movs	r2, #5
 8009ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac4:	4850      	ldr	r0, [pc, #320]	; (8009c08 <_svfiprintf_r+0x1e8>)
 8009ac6:	f7fd fc8d 	bl	80073e4 <memchr>
 8009aca:	9a04      	ldr	r2, [sp, #16]
 8009acc:	b9d8      	cbnz	r0, 8009b06 <_svfiprintf_r+0xe6>
 8009ace:	06d0      	lsls	r0, r2, #27
 8009ad0:	bf44      	itt	mi
 8009ad2:	2320      	movmi	r3, #32
 8009ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad8:	0711      	lsls	r1, r2, #28
 8009ada:	bf44      	itt	mi
 8009adc:	232b      	movmi	r3, #43	; 0x2b
 8009ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae8:	d015      	beq.n	8009b16 <_svfiprintf_r+0xf6>
 8009aea:	4654      	mov	r4, sl
 8009aec:	2000      	movs	r0, #0
 8009aee:	f04f 0c0a 	mov.w	ip, #10
 8009af2:	9a07      	ldr	r2, [sp, #28]
 8009af4:	4621      	mov	r1, r4
 8009af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009afa:	3b30      	subs	r3, #48	; 0x30
 8009afc:	2b09      	cmp	r3, #9
 8009afe:	d94d      	bls.n	8009b9c <_svfiprintf_r+0x17c>
 8009b00:	b1b0      	cbz	r0, 8009b30 <_svfiprintf_r+0x110>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e014      	b.n	8009b30 <_svfiprintf_r+0x110>
 8009b06:	eba0 0308 	sub.w	r3, r0, r8
 8009b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	46a2      	mov	sl, r4
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	e7d2      	b.n	8009abc <_svfiprintf_r+0x9c>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	1d19      	adds	r1, r3, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	9103      	str	r1, [sp, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfbb      	ittet	lt
 8009b22:	425b      	neglt	r3, r3
 8009b24:	f042 0202 	orrlt.w	r2, r2, #2
 8009b28:	9307      	strge	r3, [sp, #28]
 8009b2a:	9307      	strlt	r3, [sp, #28]
 8009b2c:	bfb8      	it	lt
 8009b2e:	9204      	strlt	r2, [sp, #16]
 8009b30:	7823      	ldrb	r3, [r4, #0]
 8009b32:	2b2e      	cmp	r3, #46	; 0x2e
 8009b34:	d10c      	bne.n	8009b50 <_svfiprintf_r+0x130>
 8009b36:	7863      	ldrb	r3, [r4, #1]
 8009b38:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3a:	d134      	bne.n	8009ba6 <_svfiprintf_r+0x186>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	3402      	adds	r4, #2
 8009b40:	1d1a      	adds	r2, r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	9203      	str	r2, [sp, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfb8      	it	lt
 8009b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009c0c <_svfiprintf_r+0x1ec>
 8009b54:	2203      	movs	r2, #3
 8009b56:	4650      	mov	r0, sl
 8009b58:	7821      	ldrb	r1, [r4, #0]
 8009b5a:	f7fd fc43 	bl	80073e4 <memchr>
 8009b5e:	b138      	cbz	r0, 8009b70 <_svfiprintf_r+0x150>
 8009b60:	2240      	movs	r2, #64	; 0x40
 8009b62:	9b04      	ldr	r3, [sp, #16]
 8009b64:	eba0 000a 	sub.w	r0, r0, sl
 8009b68:	4082      	lsls	r2, r0
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	3401      	adds	r4, #1
 8009b6e:	9304      	str	r3, [sp, #16]
 8009b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b74:	2206      	movs	r2, #6
 8009b76:	4826      	ldr	r0, [pc, #152]	; (8009c10 <_svfiprintf_r+0x1f0>)
 8009b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b7c:	f7fd fc32 	bl	80073e4 <memchr>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d038      	beq.n	8009bf6 <_svfiprintf_r+0x1d6>
 8009b84:	4b23      	ldr	r3, [pc, #140]	; (8009c14 <_svfiprintf_r+0x1f4>)
 8009b86:	bb1b      	cbnz	r3, 8009bd0 <_svfiprintf_r+0x1b0>
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	3307      	adds	r3, #7
 8009b8c:	f023 0307 	bic.w	r3, r3, #7
 8009b90:	3308      	adds	r3, #8
 8009b92:	9303      	str	r3, [sp, #12]
 8009b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b96:	4433      	add	r3, r6
 8009b98:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9a:	e768      	b.n	8009a6e <_svfiprintf_r+0x4e>
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	2001      	movs	r0, #1
 8009ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba4:	e7a6      	b.n	8009af4 <_svfiprintf_r+0xd4>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f04f 0c0a 	mov.w	ip, #10
 8009bac:	4619      	mov	r1, r3
 8009bae:	3401      	adds	r4, #1
 8009bb0:	9305      	str	r3, [sp, #20]
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb8:	3a30      	subs	r2, #48	; 0x30
 8009bba:	2a09      	cmp	r2, #9
 8009bbc:	d903      	bls.n	8009bc6 <_svfiprintf_r+0x1a6>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0c6      	beq.n	8009b50 <_svfiprintf_r+0x130>
 8009bc2:	9105      	str	r1, [sp, #20]
 8009bc4:	e7c4      	b.n	8009b50 <_svfiprintf_r+0x130>
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	2301      	movs	r3, #1
 8009bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bce:	e7f0      	b.n	8009bb2 <_svfiprintf_r+0x192>
 8009bd0:	ab03      	add	r3, sp, #12
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <_svfiprintf_r+0x1f8>)
 8009bda:	a904      	add	r1, sp, #16
 8009bdc:	f7fc fb96 	bl	800630c <_printf_float>
 8009be0:	1c42      	adds	r2, r0, #1
 8009be2:	4606      	mov	r6, r0
 8009be4:	d1d6      	bne.n	8009b94 <_svfiprintf_r+0x174>
 8009be6:	89ab      	ldrh	r3, [r5, #12]
 8009be8:	065b      	lsls	r3, r3, #25
 8009bea:	f53f af2d 	bmi.w	8009a48 <_svfiprintf_r+0x28>
 8009bee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf0:	b01d      	add	sp, #116	; 0x74
 8009bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf6:	ab03      	add	r3, sp, #12
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <_svfiprintf_r+0x1f8>)
 8009c00:	a904      	add	r1, sp, #16
 8009c02:	f7fc fe23 	bl	800684c <_printf_i>
 8009c06:	e7eb      	b.n	8009be0 <_svfiprintf_r+0x1c0>
 8009c08:	0800ae79 	.word	0x0800ae79
 8009c0c:	0800ae7f 	.word	0x0800ae7f
 8009c10:	0800ae83 	.word	0x0800ae83
 8009c14:	0800630d 	.word	0x0800630d
 8009c18:	0800996d 	.word	0x0800996d

08009c1c <__sfputc_r>:
 8009c1c:	6893      	ldr	r3, [r2, #8]
 8009c1e:	b410      	push	{r4}
 8009c20:	3b01      	subs	r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	6093      	str	r3, [r2, #8]
 8009c26:	da07      	bge.n	8009c38 <__sfputc_r+0x1c>
 8009c28:	6994      	ldr	r4, [r2, #24]
 8009c2a:	42a3      	cmp	r3, r4
 8009c2c:	db01      	blt.n	8009c32 <__sfputc_r+0x16>
 8009c2e:	290a      	cmp	r1, #10
 8009c30:	d102      	bne.n	8009c38 <__sfputc_r+0x1c>
 8009c32:	bc10      	pop	{r4}
 8009c34:	f7fd bac3 	b.w	80071be <__swbuf_r>
 8009c38:	6813      	ldr	r3, [r2, #0]
 8009c3a:	1c58      	adds	r0, r3, #1
 8009c3c:	6010      	str	r0, [r2, #0]
 8009c3e:	7019      	strb	r1, [r3, #0]
 8009c40:	4608      	mov	r0, r1
 8009c42:	bc10      	pop	{r4}
 8009c44:	4770      	bx	lr

08009c46 <__sfputs_r>:
 8009c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c48:	4606      	mov	r6, r0
 8009c4a:	460f      	mov	r7, r1
 8009c4c:	4614      	mov	r4, r2
 8009c4e:	18d5      	adds	r5, r2, r3
 8009c50:	42ac      	cmp	r4, r5
 8009c52:	d101      	bne.n	8009c58 <__sfputs_r+0x12>
 8009c54:	2000      	movs	r0, #0
 8009c56:	e007      	b.n	8009c68 <__sfputs_r+0x22>
 8009c58:	463a      	mov	r2, r7
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c60:	f7ff ffdc 	bl	8009c1c <__sfputc_r>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d1f3      	bne.n	8009c50 <__sfputs_r+0xa>
 8009c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c6c <_vfiprintf_r>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	460d      	mov	r5, r1
 8009c72:	4614      	mov	r4, r2
 8009c74:	4698      	mov	r8, r3
 8009c76:	4606      	mov	r6, r0
 8009c78:	b09d      	sub	sp, #116	; 0x74
 8009c7a:	b118      	cbz	r0, 8009c84 <_vfiprintf_r+0x18>
 8009c7c:	6a03      	ldr	r3, [r0, #32]
 8009c7e:	b90b      	cbnz	r3, 8009c84 <_vfiprintf_r+0x18>
 8009c80:	f7fd f98e 	bl	8006fa0 <__sinit>
 8009c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c86:	07d9      	lsls	r1, r3, #31
 8009c88:	d405      	bmi.n	8009c96 <_vfiprintf_r+0x2a>
 8009c8a:	89ab      	ldrh	r3, [r5, #12]
 8009c8c:	059a      	lsls	r2, r3, #22
 8009c8e:	d402      	bmi.n	8009c96 <_vfiprintf_r+0x2a>
 8009c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c92:	f7fd fba5 	bl	80073e0 <__retarget_lock_acquire_recursive>
 8009c96:	89ab      	ldrh	r3, [r5, #12]
 8009c98:	071b      	lsls	r3, r3, #28
 8009c9a:	d501      	bpl.n	8009ca0 <_vfiprintf_r+0x34>
 8009c9c:	692b      	ldr	r3, [r5, #16]
 8009c9e:	b99b      	cbnz	r3, 8009cc8 <_vfiprintf_r+0x5c>
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7fd fac8 	bl	8007238 <__swsetup_r>
 8009ca8:	b170      	cbz	r0, 8009cc8 <_vfiprintf_r+0x5c>
 8009caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cac:	07dc      	lsls	r4, r3, #31
 8009cae:	d504      	bpl.n	8009cba <_vfiprintf_r+0x4e>
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	b01d      	add	sp, #116	; 0x74
 8009cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cba:	89ab      	ldrh	r3, [r5, #12]
 8009cbc:	0598      	lsls	r0, r3, #22
 8009cbe:	d4f7      	bmi.n	8009cb0 <_vfiprintf_r+0x44>
 8009cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc2:	f7fd fb8e 	bl	80073e2 <__retarget_lock_release_recursive>
 8009cc6:	e7f3      	b.n	8009cb0 <_vfiprintf_r+0x44>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	9309      	str	r3, [sp, #36]	; 0x24
 8009ccc:	2320      	movs	r3, #32
 8009cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd2:	2330      	movs	r3, #48	; 0x30
 8009cd4:	f04f 0901 	mov.w	r9, #1
 8009cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009e8c <_vfiprintf_r+0x220>
 8009ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ce4:	4623      	mov	r3, r4
 8009ce6:	469a      	mov	sl, r3
 8009ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cec:	b10a      	cbz	r2, 8009cf2 <_vfiprintf_r+0x86>
 8009cee:	2a25      	cmp	r2, #37	; 0x25
 8009cf0:	d1f9      	bne.n	8009ce6 <_vfiprintf_r+0x7a>
 8009cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf6:	d00b      	beq.n	8009d10 <_vfiprintf_r+0xa4>
 8009cf8:	465b      	mov	r3, fp
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7ff ffa1 	bl	8009c46 <__sfputs_r>
 8009d04:	3001      	adds	r0, #1
 8009d06:	f000 80a9 	beq.w	8009e5c <_vfiprintf_r+0x1f0>
 8009d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d0c:	445a      	add	r2, fp
 8009d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d10:	f89a 3000 	ldrb.w	r3, [sl]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 80a1 	beq.w	8009e5c <_vfiprintf_r+0x1f0>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d24:	f10a 0a01 	add.w	sl, sl, #1
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	9307      	str	r3, [sp, #28]
 8009d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d30:	931a      	str	r3, [sp, #104]	; 0x68
 8009d32:	4654      	mov	r4, sl
 8009d34:	2205      	movs	r2, #5
 8009d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3a:	4854      	ldr	r0, [pc, #336]	; (8009e8c <_vfiprintf_r+0x220>)
 8009d3c:	f7fd fb52 	bl	80073e4 <memchr>
 8009d40:	9a04      	ldr	r2, [sp, #16]
 8009d42:	b9d8      	cbnz	r0, 8009d7c <_vfiprintf_r+0x110>
 8009d44:	06d1      	lsls	r1, r2, #27
 8009d46:	bf44      	itt	mi
 8009d48:	2320      	movmi	r3, #32
 8009d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d4e:	0713      	lsls	r3, r2, #28
 8009d50:	bf44      	itt	mi
 8009d52:	232b      	movmi	r3, #43	; 0x2b
 8009d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d58:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d5e:	d015      	beq.n	8009d8c <_vfiprintf_r+0x120>
 8009d60:	4654      	mov	r4, sl
 8009d62:	2000      	movs	r0, #0
 8009d64:	f04f 0c0a 	mov.w	ip, #10
 8009d68:	9a07      	ldr	r2, [sp, #28]
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d70:	3b30      	subs	r3, #48	; 0x30
 8009d72:	2b09      	cmp	r3, #9
 8009d74:	d94d      	bls.n	8009e12 <_vfiprintf_r+0x1a6>
 8009d76:	b1b0      	cbz	r0, 8009da6 <_vfiprintf_r+0x13a>
 8009d78:	9207      	str	r2, [sp, #28]
 8009d7a:	e014      	b.n	8009da6 <_vfiprintf_r+0x13a>
 8009d7c:	eba0 0308 	sub.w	r3, r0, r8
 8009d80:	fa09 f303 	lsl.w	r3, r9, r3
 8009d84:	4313      	orrs	r3, r2
 8009d86:	46a2      	mov	sl, r4
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	e7d2      	b.n	8009d32 <_vfiprintf_r+0xc6>
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	1d19      	adds	r1, r3, #4
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	9103      	str	r1, [sp, #12]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bfbb      	ittet	lt
 8009d98:	425b      	neglt	r3, r3
 8009d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d9e:	9307      	strge	r3, [sp, #28]
 8009da0:	9307      	strlt	r3, [sp, #28]
 8009da2:	bfb8      	it	lt
 8009da4:	9204      	strlt	r2, [sp, #16]
 8009da6:	7823      	ldrb	r3, [r4, #0]
 8009da8:	2b2e      	cmp	r3, #46	; 0x2e
 8009daa:	d10c      	bne.n	8009dc6 <_vfiprintf_r+0x15a>
 8009dac:	7863      	ldrb	r3, [r4, #1]
 8009dae:	2b2a      	cmp	r3, #42	; 0x2a
 8009db0:	d134      	bne.n	8009e1c <_vfiprintf_r+0x1b0>
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	3402      	adds	r4, #2
 8009db6:	1d1a      	adds	r2, r3, #4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	9203      	str	r2, [sp, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bfb8      	it	lt
 8009dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e90 <_vfiprintf_r+0x224>
 8009dca:	2203      	movs	r2, #3
 8009dcc:	4650      	mov	r0, sl
 8009dce:	7821      	ldrb	r1, [r4, #0]
 8009dd0:	f7fd fb08 	bl	80073e4 <memchr>
 8009dd4:	b138      	cbz	r0, 8009de6 <_vfiprintf_r+0x17a>
 8009dd6:	2240      	movs	r2, #64	; 0x40
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	eba0 000a 	sub.w	r0, r0, sl
 8009dde:	4082      	lsls	r2, r0
 8009de0:	4313      	orrs	r3, r2
 8009de2:	3401      	adds	r4, #1
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dea:	2206      	movs	r2, #6
 8009dec:	4829      	ldr	r0, [pc, #164]	; (8009e94 <_vfiprintf_r+0x228>)
 8009dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df2:	f7fd faf7 	bl	80073e4 <memchr>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d03f      	beq.n	8009e7a <_vfiprintf_r+0x20e>
 8009dfa:	4b27      	ldr	r3, [pc, #156]	; (8009e98 <_vfiprintf_r+0x22c>)
 8009dfc:	bb1b      	cbnz	r3, 8009e46 <_vfiprintf_r+0x1da>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	3307      	adds	r3, #7
 8009e02:	f023 0307 	bic.w	r3, r3, #7
 8009e06:	3308      	adds	r3, #8
 8009e08:	9303      	str	r3, [sp, #12]
 8009e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0c:	443b      	add	r3, r7
 8009e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e10:	e768      	b.n	8009ce4 <_vfiprintf_r+0x78>
 8009e12:	460c      	mov	r4, r1
 8009e14:	2001      	movs	r0, #1
 8009e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e1a:	e7a6      	b.n	8009d6a <_vfiprintf_r+0xfe>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f04f 0c0a 	mov.w	ip, #10
 8009e22:	4619      	mov	r1, r3
 8009e24:	3401      	adds	r4, #1
 8009e26:	9305      	str	r3, [sp, #20]
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e2e:	3a30      	subs	r2, #48	; 0x30
 8009e30:	2a09      	cmp	r2, #9
 8009e32:	d903      	bls.n	8009e3c <_vfiprintf_r+0x1d0>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0c6      	beq.n	8009dc6 <_vfiprintf_r+0x15a>
 8009e38:	9105      	str	r1, [sp, #20]
 8009e3a:	e7c4      	b.n	8009dc6 <_vfiprintf_r+0x15a>
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	2301      	movs	r3, #1
 8009e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e44:	e7f0      	b.n	8009e28 <_vfiprintf_r+0x1bc>
 8009e46:	ab03      	add	r3, sp, #12
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	462a      	mov	r2, r5
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <_vfiprintf_r+0x230>)
 8009e50:	a904      	add	r1, sp, #16
 8009e52:	f7fc fa5b 	bl	800630c <_printf_float>
 8009e56:	4607      	mov	r7, r0
 8009e58:	1c78      	adds	r0, r7, #1
 8009e5a:	d1d6      	bne.n	8009e0a <_vfiprintf_r+0x19e>
 8009e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e5e:	07d9      	lsls	r1, r3, #31
 8009e60:	d405      	bmi.n	8009e6e <_vfiprintf_r+0x202>
 8009e62:	89ab      	ldrh	r3, [r5, #12]
 8009e64:	059a      	lsls	r2, r3, #22
 8009e66:	d402      	bmi.n	8009e6e <_vfiprintf_r+0x202>
 8009e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e6a:	f7fd faba 	bl	80073e2 <__retarget_lock_release_recursive>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	065b      	lsls	r3, r3, #25
 8009e72:	f53f af1d 	bmi.w	8009cb0 <_vfiprintf_r+0x44>
 8009e76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e78:	e71c      	b.n	8009cb4 <_vfiprintf_r+0x48>
 8009e7a:	ab03      	add	r3, sp, #12
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	462a      	mov	r2, r5
 8009e80:	4630      	mov	r0, r6
 8009e82:	4b06      	ldr	r3, [pc, #24]	; (8009e9c <_vfiprintf_r+0x230>)
 8009e84:	a904      	add	r1, sp, #16
 8009e86:	f7fc fce1 	bl	800684c <_printf_i>
 8009e8a:	e7e4      	b.n	8009e56 <_vfiprintf_r+0x1ea>
 8009e8c:	0800ae79 	.word	0x0800ae79
 8009e90:	0800ae7f 	.word	0x0800ae7f
 8009e94:	0800ae83 	.word	0x0800ae83
 8009e98:	0800630d 	.word	0x0800630d
 8009e9c:	08009c47 	.word	0x08009c47

08009ea0 <__sflush_r>:
 8009ea0:	898a      	ldrh	r2, [r1, #12]
 8009ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	0710      	lsls	r0, r2, #28
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	d457      	bmi.n	8009f5c <__sflush_r+0xbc>
 8009eac:	684b      	ldr	r3, [r1, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dc04      	bgt.n	8009ebc <__sflush_r+0x1c>
 8009eb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dc01      	bgt.n	8009ebc <__sflush_r+0x1c>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ebe:	2e00      	cmp	r6, #0
 8009ec0:	d0fa      	beq.n	8009eb8 <__sflush_r+0x18>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ec8:	682f      	ldr	r7, [r5, #0]
 8009eca:	6a21      	ldr	r1, [r4, #32]
 8009ecc:	602b      	str	r3, [r5, #0]
 8009ece:	d032      	beq.n	8009f36 <__sflush_r+0x96>
 8009ed0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	075a      	lsls	r2, r3, #29
 8009ed6:	d505      	bpl.n	8009ee4 <__sflush_r+0x44>
 8009ed8:	6863      	ldr	r3, [r4, #4]
 8009eda:	1ac0      	subs	r0, r0, r3
 8009edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ede:	b10b      	cbz	r3, 8009ee4 <__sflush_r+0x44>
 8009ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ee2:	1ac0      	subs	r0, r0, r3
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eea:	4628      	mov	r0, r5
 8009eec:	6a21      	ldr	r1, [r4, #32]
 8009eee:	47b0      	blx	r6
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	d106      	bne.n	8009f04 <__sflush_r+0x64>
 8009ef6:	6829      	ldr	r1, [r5, #0]
 8009ef8:	291d      	cmp	r1, #29
 8009efa:	d82b      	bhi.n	8009f54 <__sflush_r+0xb4>
 8009efc:	4a28      	ldr	r2, [pc, #160]	; (8009fa0 <__sflush_r+0x100>)
 8009efe:	410a      	asrs	r2, r1
 8009f00:	07d6      	lsls	r6, r2, #31
 8009f02:	d427      	bmi.n	8009f54 <__sflush_r+0xb4>
 8009f04:	2200      	movs	r2, #0
 8009f06:	6062      	str	r2, [r4, #4]
 8009f08:	6922      	ldr	r2, [r4, #16]
 8009f0a:	04d9      	lsls	r1, r3, #19
 8009f0c:	6022      	str	r2, [r4, #0]
 8009f0e:	d504      	bpl.n	8009f1a <__sflush_r+0x7a>
 8009f10:	1c42      	adds	r2, r0, #1
 8009f12:	d101      	bne.n	8009f18 <__sflush_r+0x78>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b903      	cbnz	r3, 8009f1a <__sflush_r+0x7a>
 8009f18:	6560      	str	r0, [r4, #84]	; 0x54
 8009f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f1c:	602f      	str	r7, [r5, #0]
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d0ca      	beq.n	8009eb8 <__sflush_r+0x18>
 8009f22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f26:	4299      	cmp	r1, r3
 8009f28:	d002      	beq.n	8009f30 <__sflush_r+0x90>
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f7fe f8e8 	bl	8008100 <_free_r>
 8009f30:	2000      	movs	r0, #0
 8009f32:	6360      	str	r0, [r4, #52]	; 0x34
 8009f34:	e7c1      	b.n	8009eba <__sflush_r+0x1a>
 8009f36:	2301      	movs	r3, #1
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b0      	blx	r6
 8009f3c:	1c41      	adds	r1, r0, #1
 8009f3e:	d1c8      	bne.n	8009ed2 <__sflush_r+0x32>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0c5      	beq.n	8009ed2 <__sflush_r+0x32>
 8009f46:	2b1d      	cmp	r3, #29
 8009f48:	d001      	beq.n	8009f4e <__sflush_r+0xae>
 8009f4a:	2b16      	cmp	r3, #22
 8009f4c:	d101      	bne.n	8009f52 <__sflush_r+0xb2>
 8009f4e:	602f      	str	r7, [r5, #0]
 8009f50:	e7b2      	b.n	8009eb8 <__sflush_r+0x18>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	e7ae      	b.n	8009eba <__sflush_r+0x1a>
 8009f5c:	690f      	ldr	r7, [r1, #16]
 8009f5e:	2f00      	cmp	r7, #0
 8009f60:	d0aa      	beq.n	8009eb8 <__sflush_r+0x18>
 8009f62:	0793      	lsls	r3, r2, #30
 8009f64:	bf18      	it	ne
 8009f66:	2300      	movne	r3, #0
 8009f68:	680e      	ldr	r6, [r1, #0]
 8009f6a:	bf08      	it	eq
 8009f6c:	694b      	ldreq	r3, [r1, #20]
 8009f6e:	1bf6      	subs	r6, r6, r7
 8009f70:	600f      	str	r7, [r1, #0]
 8009f72:	608b      	str	r3, [r1, #8]
 8009f74:	2e00      	cmp	r6, #0
 8009f76:	dd9f      	ble.n	8009eb8 <__sflush_r+0x18>
 8009f78:	4633      	mov	r3, r6
 8009f7a:	463a      	mov	r2, r7
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	6a21      	ldr	r1, [r4, #32]
 8009f80:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009f84:	47e0      	blx	ip
 8009f86:	2800      	cmp	r0, #0
 8009f88:	dc06      	bgt.n	8009f98 <__sflush_r+0xf8>
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f94:	81a3      	strh	r3, [r4, #12]
 8009f96:	e790      	b.n	8009eba <__sflush_r+0x1a>
 8009f98:	4407      	add	r7, r0
 8009f9a:	1a36      	subs	r6, r6, r0
 8009f9c:	e7ea      	b.n	8009f74 <__sflush_r+0xd4>
 8009f9e:	bf00      	nop
 8009fa0:	dfbffffe 	.word	0xdfbffffe

08009fa4 <_fflush_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	690b      	ldr	r3, [r1, #16]
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	b913      	cbnz	r3, 8009fb4 <_fflush_r+0x10>
 8009fae:	2500      	movs	r5, #0
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	b118      	cbz	r0, 8009fbe <_fflush_r+0x1a>
 8009fb6:	6a03      	ldr	r3, [r0, #32]
 8009fb8:	b90b      	cbnz	r3, 8009fbe <_fflush_r+0x1a>
 8009fba:	f7fc fff1 	bl	8006fa0 <__sinit>
 8009fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0f3      	beq.n	8009fae <_fflush_r+0xa>
 8009fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fc8:	07d0      	lsls	r0, r2, #31
 8009fca:	d404      	bmi.n	8009fd6 <_fflush_r+0x32>
 8009fcc:	0599      	lsls	r1, r3, #22
 8009fce:	d402      	bmi.n	8009fd6 <_fflush_r+0x32>
 8009fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fd2:	f7fd fa05 	bl	80073e0 <__retarget_lock_acquire_recursive>
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	4621      	mov	r1, r4
 8009fda:	f7ff ff61 	bl	8009ea0 <__sflush_r>
 8009fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	07da      	lsls	r2, r3, #31
 8009fe4:	d4e4      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	059b      	lsls	r3, r3, #22
 8009fea:	d4e1      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fee:	f7fd f9f8 	bl	80073e2 <__retarget_lock_release_recursive>
 8009ff2:	e7dd      	b.n	8009fb0 <_fflush_r+0xc>

08009ff4 <__swhatbuf_r>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffc:	4615      	mov	r5, r2
 8009ffe:	2900      	cmp	r1, #0
 800a000:	461e      	mov	r6, r3
 800a002:	b096      	sub	sp, #88	; 0x58
 800a004:	da0c      	bge.n	800a020 <__swhatbuf_r+0x2c>
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	2100      	movs	r1, #0
 800a00a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a00e:	bf0c      	ite	eq
 800a010:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a014:	2340      	movne	r3, #64	; 0x40
 800a016:	2000      	movs	r0, #0
 800a018:	6031      	str	r1, [r6, #0]
 800a01a:	602b      	str	r3, [r5, #0]
 800a01c:	b016      	add	sp, #88	; 0x58
 800a01e:	bd70      	pop	{r4, r5, r6, pc}
 800a020:	466a      	mov	r2, sp
 800a022:	f000 f8a9 	bl	800a178 <_fstat_r>
 800a026:	2800      	cmp	r0, #0
 800a028:	dbed      	blt.n	800a006 <__swhatbuf_r+0x12>
 800a02a:	9901      	ldr	r1, [sp, #4]
 800a02c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a030:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a034:	4259      	negs	r1, r3
 800a036:	4159      	adcs	r1, r3
 800a038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a03c:	e7eb      	b.n	800a016 <__swhatbuf_r+0x22>

0800a03e <__smakebuf_r>:
 800a03e:	898b      	ldrh	r3, [r1, #12]
 800a040:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a042:	079d      	lsls	r5, r3, #30
 800a044:	4606      	mov	r6, r0
 800a046:	460c      	mov	r4, r1
 800a048:	d507      	bpl.n	800a05a <__smakebuf_r+0x1c>
 800a04a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a04e:	6023      	str	r3, [r4, #0]
 800a050:	6123      	str	r3, [r4, #16]
 800a052:	2301      	movs	r3, #1
 800a054:	6163      	str	r3, [r4, #20]
 800a056:	b002      	add	sp, #8
 800a058:	bd70      	pop	{r4, r5, r6, pc}
 800a05a:	466a      	mov	r2, sp
 800a05c:	ab01      	add	r3, sp, #4
 800a05e:	f7ff ffc9 	bl	8009ff4 <__swhatbuf_r>
 800a062:	9900      	ldr	r1, [sp, #0]
 800a064:	4605      	mov	r5, r0
 800a066:	4630      	mov	r0, r6
 800a068:	f7fe f8ba 	bl	80081e0 <_malloc_r>
 800a06c:	b948      	cbnz	r0, 800a082 <__smakebuf_r+0x44>
 800a06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a072:	059a      	lsls	r2, r3, #22
 800a074:	d4ef      	bmi.n	800a056 <__smakebuf_r+0x18>
 800a076:	f023 0303 	bic.w	r3, r3, #3
 800a07a:	f043 0302 	orr.w	r3, r3, #2
 800a07e:	81a3      	strh	r3, [r4, #12]
 800a080:	e7e3      	b.n	800a04a <__smakebuf_r+0xc>
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	6020      	str	r0, [r4, #0]
 800a086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a08a:	81a3      	strh	r3, [r4, #12]
 800a08c:	9b00      	ldr	r3, [sp, #0]
 800a08e:	6120      	str	r0, [r4, #16]
 800a090:	6163      	str	r3, [r4, #20]
 800a092:	9b01      	ldr	r3, [sp, #4]
 800a094:	b15b      	cbz	r3, 800a0ae <__smakebuf_r+0x70>
 800a096:	4630      	mov	r0, r6
 800a098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a09c:	f000 f87e 	bl	800a19c <_isatty_r>
 800a0a0:	b128      	cbz	r0, 800a0ae <__smakebuf_r+0x70>
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	f043 0301 	orr.w	r3, r3, #1
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	431d      	orrs	r5, r3
 800a0b2:	81a5      	strh	r5, [r4, #12]
 800a0b4:	e7cf      	b.n	800a056 <__smakebuf_r+0x18>

0800a0b6 <_putc_r>:
 800a0b6:	b570      	push	{r4, r5, r6, lr}
 800a0b8:	460d      	mov	r5, r1
 800a0ba:	4614      	mov	r4, r2
 800a0bc:	4606      	mov	r6, r0
 800a0be:	b118      	cbz	r0, 800a0c8 <_putc_r+0x12>
 800a0c0:	6a03      	ldr	r3, [r0, #32]
 800a0c2:	b90b      	cbnz	r3, 800a0c8 <_putc_r+0x12>
 800a0c4:	f7fc ff6c 	bl	8006fa0 <__sinit>
 800a0c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0ca:	07d8      	lsls	r0, r3, #31
 800a0cc:	d405      	bmi.n	800a0da <_putc_r+0x24>
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	0599      	lsls	r1, r3, #22
 800a0d2:	d402      	bmi.n	800a0da <_putc_r+0x24>
 800a0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0d6:	f7fd f983 	bl	80073e0 <__retarget_lock_acquire_recursive>
 800a0da:	68a3      	ldr	r3, [r4, #8]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	60a3      	str	r3, [r4, #8]
 800a0e2:	da05      	bge.n	800a0f0 <_putc_r+0x3a>
 800a0e4:	69a2      	ldr	r2, [r4, #24]
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	db12      	blt.n	800a110 <_putc_r+0x5a>
 800a0ea:	b2eb      	uxtb	r3, r5
 800a0ec:	2b0a      	cmp	r3, #10
 800a0ee:	d00f      	beq.n	800a110 <_putc_r+0x5a>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	6022      	str	r2, [r4, #0]
 800a0f6:	701d      	strb	r5, [r3, #0]
 800a0f8:	b2ed      	uxtb	r5, r5
 800a0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0fc:	07da      	lsls	r2, r3, #31
 800a0fe:	d405      	bmi.n	800a10c <_putc_r+0x56>
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	059b      	lsls	r3, r3, #22
 800a104:	d402      	bmi.n	800a10c <_putc_r+0x56>
 800a106:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a108:	f7fd f96b 	bl	80073e2 <__retarget_lock_release_recursive>
 800a10c:	4628      	mov	r0, r5
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	4629      	mov	r1, r5
 800a112:	4622      	mov	r2, r4
 800a114:	4630      	mov	r0, r6
 800a116:	f7fd f852 	bl	80071be <__swbuf_r>
 800a11a:	4605      	mov	r5, r0
 800a11c:	e7ed      	b.n	800a0fa <_putc_r+0x44>

0800a11e <memmove>:
 800a11e:	4288      	cmp	r0, r1
 800a120:	b510      	push	{r4, lr}
 800a122:	eb01 0402 	add.w	r4, r1, r2
 800a126:	d902      	bls.n	800a12e <memmove+0x10>
 800a128:	4284      	cmp	r4, r0
 800a12a:	4623      	mov	r3, r4
 800a12c:	d807      	bhi.n	800a13e <memmove+0x20>
 800a12e:	1e43      	subs	r3, r0, #1
 800a130:	42a1      	cmp	r1, r4
 800a132:	d008      	beq.n	800a146 <memmove+0x28>
 800a134:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a138:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a13c:	e7f8      	b.n	800a130 <memmove+0x12>
 800a13e:	4601      	mov	r1, r0
 800a140:	4402      	add	r2, r0
 800a142:	428a      	cmp	r2, r1
 800a144:	d100      	bne.n	800a148 <memmove+0x2a>
 800a146:	bd10      	pop	{r4, pc}
 800a148:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a14c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a150:	e7f7      	b.n	800a142 <memmove+0x24>

0800a152 <strncmp>:
 800a152:	b510      	push	{r4, lr}
 800a154:	b16a      	cbz	r2, 800a172 <strncmp+0x20>
 800a156:	3901      	subs	r1, #1
 800a158:	1884      	adds	r4, r0, r2
 800a15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a15e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a162:	429a      	cmp	r2, r3
 800a164:	d103      	bne.n	800a16e <strncmp+0x1c>
 800a166:	42a0      	cmp	r0, r4
 800a168:	d001      	beq.n	800a16e <strncmp+0x1c>
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	d1f5      	bne.n	800a15a <strncmp+0x8>
 800a16e:	1ad0      	subs	r0, r2, r3
 800a170:	bd10      	pop	{r4, pc}
 800a172:	4610      	mov	r0, r2
 800a174:	e7fc      	b.n	800a170 <strncmp+0x1e>
	...

0800a178 <_fstat_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	2300      	movs	r3, #0
 800a17c:	4d06      	ldr	r5, [pc, #24]	; (800a198 <_fstat_r+0x20>)
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	4611      	mov	r1, r2
 800a184:	602b      	str	r3, [r5, #0]
 800a186:	f7f8 fa9e 	bl	80026c6 <_fstat>
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	d102      	bne.n	800a194 <_fstat_r+0x1c>
 800a18e:	682b      	ldr	r3, [r5, #0]
 800a190:	b103      	cbz	r3, 800a194 <_fstat_r+0x1c>
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	bd38      	pop	{r3, r4, r5, pc}
 800a196:	bf00      	nop
 800a198:	200006b4 	.word	0x200006b4

0800a19c <_isatty_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4d05      	ldr	r5, [pc, #20]	; (800a1b8 <_isatty_r+0x1c>)
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	602b      	str	r3, [r5, #0]
 800a1a8:	f7f8 fa9c 	bl	80026e4 <_isatty>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_isatty_r+0x1a>
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_isatty_r+0x1a>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	200006b4 	.word	0x200006b4

0800a1bc <_sbrk_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	2300      	movs	r3, #0
 800a1c0:	4d05      	ldr	r5, [pc, #20]	; (800a1d8 <_sbrk_r+0x1c>)
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	602b      	str	r3, [r5, #0]
 800a1c8:	f7f8 faa2 	bl	8002710 <_sbrk>
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	d102      	bne.n	800a1d6 <_sbrk_r+0x1a>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	b103      	cbz	r3, 800a1d6 <_sbrk_r+0x1a>
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	200006b4 	.word	0x200006b4

0800a1dc <nan>:
 800a1dc:	2000      	movs	r0, #0
 800a1de:	4901      	ldr	r1, [pc, #4]	; (800a1e4 <nan+0x8>)
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	7ff80000 	.word	0x7ff80000

0800a1e8 <__assert_func>:
 800a1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ea:	4614      	mov	r4, r2
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	4b09      	ldr	r3, [pc, #36]	; (800a214 <__assert_func+0x2c>)
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68d8      	ldr	r0, [r3, #12]
 800a1f6:	b14c      	cbz	r4, 800a20c <__assert_func+0x24>
 800a1f8:	4b07      	ldr	r3, [pc, #28]	; (800a218 <__assert_func+0x30>)
 800a1fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1fe:	9100      	str	r1, [sp, #0]
 800a200:	462b      	mov	r3, r5
 800a202:	4906      	ldr	r1, [pc, #24]	; (800a21c <__assert_func+0x34>)
 800a204:	f000 fbca 	bl	800a99c <fiprintf>
 800a208:	f000 fbda 	bl	800a9c0 <abort>
 800a20c:	4b04      	ldr	r3, [pc, #16]	; (800a220 <__assert_func+0x38>)
 800a20e:	461c      	mov	r4, r3
 800a210:	e7f3      	b.n	800a1fa <__assert_func+0x12>
 800a212:	bf00      	nop
 800a214:	200000dc 	.word	0x200000dc
 800a218:	0800ae92 	.word	0x0800ae92
 800a21c:	0800ae9f 	.word	0x0800ae9f
 800a220:	0800aecd 	.word	0x0800aecd

0800a224 <_calloc_r>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	fba1 5402 	umull	r5, r4, r1, r2
 800a22a:	b934      	cbnz	r4, 800a23a <_calloc_r+0x16>
 800a22c:	4629      	mov	r1, r5
 800a22e:	f7fd ffd7 	bl	80081e0 <_malloc_r>
 800a232:	4606      	mov	r6, r0
 800a234:	b928      	cbnz	r0, 800a242 <_calloc_r+0x1e>
 800a236:	4630      	mov	r0, r6
 800a238:	bd70      	pop	{r4, r5, r6, pc}
 800a23a:	220c      	movs	r2, #12
 800a23c:	2600      	movs	r6, #0
 800a23e:	6002      	str	r2, [r0, #0]
 800a240:	e7f9      	b.n	800a236 <_calloc_r+0x12>
 800a242:	462a      	mov	r2, r5
 800a244:	4621      	mov	r1, r4
 800a246:	f7fd f84f 	bl	80072e8 <memset>
 800a24a:	e7f4      	b.n	800a236 <_calloc_r+0x12>

0800a24c <rshift>:
 800a24c:	6903      	ldr	r3, [r0, #16]
 800a24e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a252:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a256:	f100 0414 	add.w	r4, r0, #20
 800a25a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a25e:	dd46      	ble.n	800a2ee <rshift+0xa2>
 800a260:	f011 011f 	ands.w	r1, r1, #31
 800a264:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a268:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a26c:	d10c      	bne.n	800a288 <rshift+0x3c>
 800a26e:	4629      	mov	r1, r5
 800a270:	f100 0710 	add.w	r7, r0, #16
 800a274:	42b1      	cmp	r1, r6
 800a276:	d335      	bcc.n	800a2e4 <rshift+0x98>
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	1eea      	subs	r2, r5, #3
 800a27e:	4296      	cmp	r6, r2
 800a280:	bf38      	it	cc
 800a282:	2300      	movcc	r3, #0
 800a284:	4423      	add	r3, r4
 800a286:	e015      	b.n	800a2b4 <rshift+0x68>
 800a288:	46a1      	mov	r9, r4
 800a28a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a28e:	f1c1 0820 	rsb	r8, r1, #32
 800a292:	40cf      	lsrs	r7, r1
 800a294:	f105 0e04 	add.w	lr, r5, #4
 800a298:	4576      	cmp	r6, lr
 800a29a:	46f4      	mov	ip, lr
 800a29c:	d816      	bhi.n	800a2cc <rshift+0x80>
 800a29e:	1a9a      	subs	r2, r3, r2
 800a2a0:	0092      	lsls	r2, r2, #2
 800a2a2:	3a04      	subs	r2, #4
 800a2a4:	3501      	adds	r5, #1
 800a2a6:	42ae      	cmp	r6, r5
 800a2a8:	bf38      	it	cc
 800a2aa:	2200      	movcc	r2, #0
 800a2ac:	18a3      	adds	r3, r4, r2
 800a2ae:	50a7      	str	r7, [r4, r2]
 800a2b0:	b107      	cbz	r7, 800a2b4 <rshift+0x68>
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	eba3 0204 	sub.w	r2, r3, r4
 800a2ba:	bf08      	it	eq
 800a2bc:	2300      	moveq	r3, #0
 800a2be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a2c2:	6102      	str	r2, [r0, #16]
 800a2c4:	bf08      	it	eq
 800a2c6:	6143      	streq	r3, [r0, #20]
 800a2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2cc:	f8dc c000 	ldr.w	ip, [ip]
 800a2d0:	fa0c fc08 	lsl.w	ip, ip, r8
 800a2d4:	ea4c 0707 	orr.w	r7, ip, r7
 800a2d8:	f849 7b04 	str.w	r7, [r9], #4
 800a2dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a2e0:	40cf      	lsrs	r7, r1
 800a2e2:	e7d9      	b.n	800a298 <rshift+0x4c>
 800a2e4:	f851 cb04 	ldr.w	ip, [r1], #4
 800a2e8:	f847 cf04 	str.w	ip, [r7, #4]!
 800a2ec:	e7c2      	b.n	800a274 <rshift+0x28>
 800a2ee:	4623      	mov	r3, r4
 800a2f0:	e7e0      	b.n	800a2b4 <rshift+0x68>

0800a2f2 <__hexdig_fun>:
 800a2f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d802      	bhi.n	800a300 <__hexdig_fun+0xe>
 800a2fa:	3820      	subs	r0, #32
 800a2fc:	b2c0      	uxtb	r0, r0
 800a2fe:	4770      	bx	lr
 800a300:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a304:	2b05      	cmp	r3, #5
 800a306:	d801      	bhi.n	800a30c <__hexdig_fun+0x1a>
 800a308:	3847      	subs	r0, #71	; 0x47
 800a30a:	e7f7      	b.n	800a2fc <__hexdig_fun+0xa>
 800a30c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a310:	2b05      	cmp	r3, #5
 800a312:	d801      	bhi.n	800a318 <__hexdig_fun+0x26>
 800a314:	3827      	subs	r0, #39	; 0x27
 800a316:	e7f1      	b.n	800a2fc <__hexdig_fun+0xa>
 800a318:	2000      	movs	r0, #0
 800a31a:	4770      	bx	lr

0800a31c <__gethex>:
 800a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	4681      	mov	r9, r0
 800a322:	468a      	mov	sl, r1
 800a324:	4617      	mov	r7, r2
 800a326:	680a      	ldr	r2, [r1, #0]
 800a328:	b085      	sub	sp, #20
 800a32a:	f102 0b02 	add.w	fp, r2, #2
 800a32e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a332:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a336:	9302      	str	r3, [sp, #8]
 800a338:	32fe      	adds	r2, #254	; 0xfe
 800a33a:	eb02 030b 	add.w	r3, r2, fp
 800a33e:	46d8      	mov	r8, fp
 800a340:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	2830      	cmp	r0, #48	; 0x30
 800a348:	d0f7      	beq.n	800a33a <__gethex+0x1e>
 800a34a:	f7ff ffd2 	bl	800a2f2 <__hexdig_fun>
 800a34e:	4604      	mov	r4, r0
 800a350:	2800      	cmp	r0, #0
 800a352:	d138      	bne.n	800a3c6 <__gethex+0xaa>
 800a354:	2201      	movs	r2, #1
 800a356:	4640      	mov	r0, r8
 800a358:	49a7      	ldr	r1, [pc, #668]	; (800a5f8 <__gethex+0x2dc>)
 800a35a:	f7ff fefa 	bl	800a152 <strncmp>
 800a35e:	4606      	mov	r6, r0
 800a360:	2800      	cmp	r0, #0
 800a362:	d169      	bne.n	800a438 <__gethex+0x11c>
 800a364:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a368:	465d      	mov	r5, fp
 800a36a:	f7ff ffc2 	bl	800a2f2 <__hexdig_fun>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d064      	beq.n	800a43c <__gethex+0x120>
 800a372:	465a      	mov	r2, fp
 800a374:	7810      	ldrb	r0, [r2, #0]
 800a376:	4690      	mov	r8, r2
 800a378:	2830      	cmp	r0, #48	; 0x30
 800a37a:	f102 0201 	add.w	r2, r2, #1
 800a37e:	d0f9      	beq.n	800a374 <__gethex+0x58>
 800a380:	f7ff ffb7 	bl	800a2f2 <__hexdig_fun>
 800a384:	2301      	movs	r3, #1
 800a386:	fab0 f480 	clz	r4, r0
 800a38a:	465e      	mov	r6, fp
 800a38c:	0964      	lsrs	r4, r4, #5
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	4642      	mov	r2, r8
 800a392:	4615      	mov	r5, r2
 800a394:	7828      	ldrb	r0, [r5, #0]
 800a396:	3201      	adds	r2, #1
 800a398:	f7ff ffab 	bl	800a2f2 <__hexdig_fun>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d1f8      	bne.n	800a392 <__gethex+0x76>
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	4994      	ldr	r1, [pc, #592]	; (800a5f8 <__gethex+0x2dc>)
 800a3a6:	f7ff fed4 	bl	800a152 <strncmp>
 800a3aa:	b978      	cbnz	r0, 800a3cc <__gethex+0xb0>
 800a3ac:	b946      	cbnz	r6, 800a3c0 <__gethex+0xa4>
 800a3ae:	1c6e      	adds	r6, r5, #1
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	4615      	mov	r5, r2
 800a3b4:	7828      	ldrb	r0, [r5, #0]
 800a3b6:	3201      	adds	r2, #1
 800a3b8:	f7ff ff9b 	bl	800a2f2 <__hexdig_fun>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d1f8      	bne.n	800a3b2 <__gethex+0x96>
 800a3c0:	1b73      	subs	r3, r6, r5
 800a3c2:	009e      	lsls	r6, r3, #2
 800a3c4:	e004      	b.n	800a3d0 <__gethex+0xb4>
 800a3c6:	2400      	movs	r4, #0
 800a3c8:	4626      	mov	r6, r4
 800a3ca:	e7e1      	b.n	800a390 <__gethex+0x74>
 800a3cc:	2e00      	cmp	r6, #0
 800a3ce:	d1f7      	bne.n	800a3c0 <__gethex+0xa4>
 800a3d0:	782b      	ldrb	r3, [r5, #0]
 800a3d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a3d6:	2b50      	cmp	r3, #80	; 0x50
 800a3d8:	d13d      	bne.n	800a456 <__gethex+0x13a>
 800a3da:	786b      	ldrb	r3, [r5, #1]
 800a3dc:	2b2b      	cmp	r3, #43	; 0x2b
 800a3de:	d02f      	beq.n	800a440 <__gethex+0x124>
 800a3e0:	2b2d      	cmp	r3, #45	; 0x2d
 800a3e2:	d031      	beq.n	800a448 <__gethex+0x12c>
 800a3e4:	f04f 0b00 	mov.w	fp, #0
 800a3e8:	1c69      	adds	r1, r5, #1
 800a3ea:	7808      	ldrb	r0, [r1, #0]
 800a3ec:	f7ff ff81 	bl	800a2f2 <__hexdig_fun>
 800a3f0:	1e42      	subs	r2, r0, #1
 800a3f2:	b2d2      	uxtb	r2, r2
 800a3f4:	2a18      	cmp	r2, #24
 800a3f6:	d82e      	bhi.n	800a456 <__gethex+0x13a>
 800a3f8:	f1a0 0210 	sub.w	r2, r0, #16
 800a3fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a400:	f7ff ff77 	bl	800a2f2 <__hexdig_fun>
 800a404:	f100 3cff 	add.w	ip, r0, #4294967295
 800a408:	fa5f fc8c 	uxtb.w	ip, ip
 800a40c:	f1bc 0f18 	cmp.w	ip, #24
 800a410:	d91d      	bls.n	800a44e <__gethex+0x132>
 800a412:	f1bb 0f00 	cmp.w	fp, #0
 800a416:	d000      	beq.n	800a41a <__gethex+0xfe>
 800a418:	4252      	negs	r2, r2
 800a41a:	4416      	add	r6, r2
 800a41c:	f8ca 1000 	str.w	r1, [sl]
 800a420:	b1dc      	cbz	r4, 800a45a <__gethex+0x13e>
 800a422:	9b01      	ldr	r3, [sp, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	bf14      	ite	ne
 800a428:	f04f 0800 	movne.w	r8, #0
 800a42c:	f04f 0806 	moveq.w	r8, #6
 800a430:	4640      	mov	r0, r8
 800a432:	b005      	add	sp, #20
 800a434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a438:	4645      	mov	r5, r8
 800a43a:	4626      	mov	r6, r4
 800a43c:	2401      	movs	r4, #1
 800a43e:	e7c7      	b.n	800a3d0 <__gethex+0xb4>
 800a440:	f04f 0b00 	mov.w	fp, #0
 800a444:	1ca9      	adds	r1, r5, #2
 800a446:	e7d0      	b.n	800a3ea <__gethex+0xce>
 800a448:	f04f 0b01 	mov.w	fp, #1
 800a44c:	e7fa      	b.n	800a444 <__gethex+0x128>
 800a44e:	230a      	movs	r3, #10
 800a450:	fb03 0002 	mla	r0, r3, r2, r0
 800a454:	e7d0      	b.n	800a3f8 <__gethex+0xdc>
 800a456:	4629      	mov	r1, r5
 800a458:	e7e0      	b.n	800a41c <__gethex+0x100>
 800a45a:	4621      	mov	r1, r4
 800a45c:	eba5 0308 	sub.w	r3, r5, r8
 800a460:	3b01      	subs	r3, #1
 800a462:	2b07      	cmp	r3, #7
 800a464:	dc0a      	bgt.n	800a47c <__gethex+0x160>
 800a466:	4648      	mov	r0, r9
 800a468:	f7fd ff46 	bl	80082f8 <_Balloc>
 800a46c:	4604      	mov	r4, r0
 800a46e:	b940      	cbnz	r0, 800a482 <__gethex+0x166>
 800a470:	4602      	mov	r2, r0
 800a472:	21e4      	movs	r1, #228	; 0xe4
 800a474:	4b61      	ldr	r3, [pc, #388]	; (800a5fc <__gethex+0x2e0>)
 800a476:	4862      	ldr	r0, [pc, #392]	; (800a600 <__gethex+0x2e4>)
 800a478:	f7ff feb6 	bl	800a1e8 <__assert_func>
 800a47c:	3101      	adds	r1, #1
 800a47e:	105b      	asrs	r3, r3, #1
 800a480:	e7ef      	b.n	800a462 <__gethex+0x146>
 800a482:	2300      	movs	r3, #0
 800a484:	469b      	mov	fp, r3
 800a486:	f100 0a14 	add.w	sl, r0, #20
 800a48a:	f8cd a004 	str.w	sl, [sp, #4]
 800a48e:	45a8      	cmp	r8, r5
 800a490:	d344      	bcc.n	800a51c <__gethex+0x200>
 800a492:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a496:	4658      	mov	r0, fp
 800a498:	f848 bb04 	str.w	fp, [r8], #4
 800a49c:	eba8 080a 	sub.w	r8, r8, sl
 800a4a0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a4a4:	6122      	str	r2, [r4, #16]
 800a4a6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a4aa:	f7fe f817 	bl	80084dc <__hi0bits>
 800a4ae:	683d      	ldr	r5, [r7, #0]
 800a4b0:	eba8 0800 	sub.w	r8, r8, r0
 800a4b4:	45a8      	cmp	r8, r5
 800a4b6:	dd59      	ble.n	800a56c <__gethex+0x250>
 800a4b8:	eba8 0805 	sub.w	r8, r8, r5
 800a4bc:	4641      	mov	r1, r8
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7fe fb95 	bl	8008bee <__any_on>
 800a4c4:	4683      	mov	fp, r0
 800a4c6:	b1b8      	cbz	r0, 800a4f8 <__gethex+0x1dc>
 800a4c8:	f04f 0b01 	mov.w	fp, #1
 800a4cc:	f108 33ff 	add.w	r3, r8, #4294967295
 800a4d0:	1159      	asrs	r1, r3, #5
 800a4d2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a4d6:	f003 021f 	and.w	r2, r3, #31
 800a4da:	fa0b f202 	lsl.w	r2, fp, r2
 800a4de:	420a      	tst	r2, r1
 800a4e0:	d00a      	beq.n	800a4f8 <__gethex+0x1dc>
 800a4e2:	455b      	cmp	r3, fp
 800a4e4:	dd06      	ble.n	800a4f4 <__gethex+0x1d8>
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f1a8 0102 	sub.w	r1, r8, #2
 800a4ec:	f7fe fb7f 	bl	8008bee <__any_on>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d138      	bne.n	800a566 <__gethex+0x24a>
 800a4f4:	f04f 0b02 	mov.w	fp, #2
 800a4f8:	4641      	mov	r1, r8
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7ff fea6 	bl	800a24c <rshift>
 800a500:	4446      	add	r6, r8
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	42b3      	cmp	r3, r6
 800a506:	da41      	bge.n	800a58c <__gethex+0x270>
 800a508:	4621      	mov	r1, r4
 800a50a:	4648      	mov	r0, r9
 800a50c:	f7fd ff34 	bl	8008378 <_Bfree>
 800a510:	2300      	movs	r3, #0
 800a512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a514:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	e789      	b.n	800a430 <__gethex+0x114>
 800a51c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a520:	2a2e      	cmp	r2, #46	; 0x2e
 800a522:	d014      	beq.n	800a54e <__gethex+0x232>
 800a524:	2b20      	cmp	r3, #32
 800a526:	d106      	bne.n	800a536 <__gethex+0x21a>
 800a528:	9b01      	ldr	r3, [sp, #4]
 800a52a:	f843 bb04 	str.w	fp, [r3], #4
 800a52e:	f04f 0b00 	mov.w	fp, #0
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	465b      	mov	r3, fp
 800a536:	7828      	ldrb	r0, [r5, #0]
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	f7ff feda 	bl	800a2f2 <__hexdig_fun>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	f000 000f 	and.w	r0, r0, #15
 800a544:	4098      	lsls	r0, r3
 800a546:	ea4b 0b00 	orr.w	fp, fp, r0
 800a54a:	3304      	adds	r3, #4
 800a54c:	e79f      	b.n	800a48e <__gethex+0x172>
 800a54e:	45a8      	cmp	r8, r5
 800a550:	d8e8      	bhi.n	800a524 <__gethex+0x208>
 800a552:	2201      	movs	r2, #1
 800a554:	4628      	mov	r0, r5
 800a556:	4928      	ldr	r1, [pc, #160]	; (800a5f8 <__gethex+0x2dc>)
 800a558:	9303      	str	r3, [sp, #12]
 800a55a:	f7ff fdfa 	bl	800a152 <strncmp>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	2800      	cmp	r0, #0
 800a562:	d1df      	bne.n	800a524 <__gethex+0x208>
 800a564:	e793      	b.n	800a48e <__gethex+0x172>
 800a566:	f04f 0b03 	mov.w	fp, #3
 800a56a:	e7c5      	b.n	800a4f8 <__gethex+0x1dc>
 800a56c:	da0b      	bge.n	800a586 <__gethex+0x26a>
 800a56e:	eba5 0808 	sub.w	r8, r5, r8
 800a572:	4621      	mov	r1, r4
 800a574:	4642      	mov	r2, r8
 800a576:	4648      	mov	r0, r9
 800a578:	f7fe f916 	bl	80087a8 <__lshift>
 800a57c:	4604      	mov	r4, r0
 800a57e:	eba6 0608 	sub.w	r6, r6, r8
 800a582:	f100 0a14 	add.w	sl, r0, #20
 800a586:	f04f 0b00 	mov.w	fp, #0
 800a58a:	e7ba      	b.n	800a502 <__gethex+0x1e6>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	42b3      	cmp	r3, r6
 800a590:	dd74      	ble.n	800a67c <__gethex+0x360>
 800a592:	1b9e      	subs	r6, r3, r6
 800a594:	42b5      	cmp	r5, r6
 800a596:	dc35      	bgt.n	800a604 <__gethex+0x2e8>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d023      	beq.n	800a5e6 <__gethex+0x2ca>
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d025      	beq.n	800a5ee <__gethex+0x2d2>
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d115      	bne.n	800a5d2 <__gethex+0x2b6>
 800a5a6:	42b5      	cmp	r5, r6
 800a5a8:	d113      	bne.n	800a5d2 <__gethex+0x2b6>
 800a5aa:	2d01      	cmp	r5, #1
 800a5ac:	d10b      	bne.n	800a5c6 <__gethex+0x2aa>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	9a02      	ldr	r2, [sp, #8]
 800a5b2:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	f8ca 3000 	str.w	r3, [sl]
 800a5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5c2:	601c      	str	r4, [r3, #0]
 800a5c4:	e734      	b.n	800a430 <__gethex+0x114>
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	1e69      	subs	r1, r5, #1
 800a5ca:	f7fe fb10 	bl	8008bee <__any_on>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d1ed      	bne.n	800a5ae <__gethex+0x292>
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4648      	mov	r0, r9
 800a5d6:	f7fd fecf 	bl	8008378 <_Bfree>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5de:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	e724      	b.n	800a430 <__gethex+0x114>
 800a5e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1f2      	bne.n	800a5d2 <__gethex+0x2b6>
 800a5ec:	e7df      	b.n	800a5ae <__gethex+0x292>
 800a5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1dc      	bne.n	800a5ae <__gethex+0x292>
 800a5f4:	e7ed      	b.n	800a5d2 <__gethex+0x2b6>
 800a5f6:	bf00      	nop
 800a5f8:	0800ad24 	.word	0x0800ad24
 800a5fc:	0800abb7 	.word	0x0800abb7
 800a600:	0800aece 	.word	0x0800aece
 800a604:	f106 38ff 	add.w	r8, r6, #4294967295
 800a608:	f1bb 0f00 	cmp.w	fp, #0
 800a60c:	d133      	bne.n	800a676 <__gethex+0x35a>
 800a60e:	f1b8 0f00 	cmp.w	r8, #0
 800a612:	d004      	beq.n	800a61e <__gethex+0x302>
 800a614:	4641      	mov	r1, r8
 800a616:	4620      	mov	r0, r4
 800a618:	f7fe fae9 	bl	8008bee <__any_on>
 800a61c:	4683      	mov	fp, r0
 800a61e:	2301      	movs	r3, #1
 800a620:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a624:	f008 081f 	and.w	r8, r8, #31
 800a628:	fa03 f308 	lsl.w	r3, r3, r8
 800a62c:	f04f 0802 	mov.w	r8, #2
 800a630:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a634:	4631      	mov	r1, r6
 800a636:	4213      	tst	r3, r2
 800a638:	4620      	mov	r0, r4
 800a63a:	bf18      	it	ne
 800a63c:	f04b 0b02 	orrne.w	fp, fp, #2
 800a640:	1bad      	subs	r5, r5, r6
 800a642:	f7ff fe03 	bl	800a24c <rshift>
 800a646:	687e      	ldr	r6, [r7, #4]
 800a648:	f1bb 0f00 	cmp.w	fp, #0
 800a64c:	d04a      	beq.n	800a6e4 <__gethex+0x3c8>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b02      	cmp	r3, #2
 800a652:	d016      	beq.n	800a682 <__gethex+0x366>
 800a654:	2b03      	cmp	r3, #3
 800a656:	d018      	beq.n	800a68a <__gethex+0x36e>
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d109      	bne.n	800a670 <__gethex+0x354>
 800a65c:	f01b 0f02 	tst.w	fp, #2
 800a660:	d006      	beq.n	800a670 <__gethex+0x354>
 800a662:	f8da 3000 	ldr.w	r3, [sl]
 800a666:	ea4b 0b03 	orr.w	fp, fp, r3
 800a66a:	f01b 0f01 	tst.w	fp, #1
 800a66e:	d10f      	bne.n	800a690 <__gethex+0x374>
 800a670:	f048 0810 	orr.w	r8, r8, #16
 800a674:	e036      	b.n	800a6e4 <__gethex+0x3c8>
 800a676:	f04f 0b01 	mov.w	fp, #1
 800a67a:	e7d0      	b.n	800a61e <__gethex+0x302>
 800a67c:	f04f 0801 	mov.w	r8, #1
 800a680:	e7e2      	b.n	800a648 <__gethex+0x32c>
 800a682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a684:	f1c3 0301 	rsb	r3, r3, #1
 800a688:	930f      	str	r3, [sp, #60]	; 0x3c
 800a68a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0ef      	beq.n	800a670 <__gethex+0x354>
 800a690:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a694:	f104 0214 	add.w	r2, r4, #20
 800a698:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a6a4:	4694      	mov	ip, r2
 800a6a6:	f852 1b04 	ldr.w	r1, [r2], #4
 800a6aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a6ae:	d01e      	beq.n	800a6ee <__gethex+0x3d2>
 800a6b0:	3101      	adds	r1, #1
 800a6b2:	f8cc 1000 	str.w	r1, [ip]
 800a6b6:	f1b8 0f02 	cmp.w	r8, #2
 800a6ba:	f104 0214 	add.w	r2, r4, #20
 800a6be:	d13d      	bne.n	800a73c <__gethex+0x420>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	d10b      	bne.n	800a6e0 <__gethex+0x3c4>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	1169      	asrs	r1, r5, #5
 800a6cc:	f005 051f 	and.w	r5, r5, #31
 800a6d0:	fa03 f505 	lsl.w	r5, r3, r5
 800a6d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6d8:	421d      	tst	r5, r3
 800a6da:	bf18      	it	ne
 800a6dc:	f04f 0801 	movne.w	r8, #1
 800a6e0:	f048 0820 	orr.w	r8, r8, #32
 800a6e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6e6:	601c      	str	r4, [r3, #0]
 800a6e8:	9b02      	ldr	r3, [sp, #8]
 800a6ea:	601e      	str	r6, [r3, #0]
 800a6ec:	e6a0      	b.n	800a430 <__gethex+0x114>
 800a6ee:	4290      	cmp	r0, r2
 800a6f0:	f842 3c04 	str.w	r3, [r2, #-4]
 800a6f4:	d8d6      	bhi.n	800a6a4 <__gethex+0x388>
 800a6f6:	68a2      	ldr	r2, [r4, #8]
 800a6f8:	4593      	cmp	fp, r2
 800a6fa:	db17      	blt.n	800a72c <__gethex+0x410>
 800a6fc:	6861      	ldr	r1, [r4, #4]
 800a6fe:	4648      	mov	r0, r9
 800a700:	3101      	adds	r1, #1
 800a702:	f7fd fdf9 	bl	80082f8 <_Balloc>
 800a706:	4682      	mov	sl, r0
 800a708:	b918      	cbnz	r0, 800a712 <__gethex+0x3f6>
 800a70a:	4602      	mov	r2, r0
 800a70c:	2184      	movs	r1, #132	; 0x84
 800a70e:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <__gethex+0x45c>)
 800a710:	e6b1      	b.n	800a476 <__gethex+0x15a>
 800a712:	6922      	ldr	r2, [r4, #16]
 800a714:	f104 010c 	add.w	r1, r4, #12
 800a718:	3202      	adds	r2, #2
 800a71a:	0092      	lsls	r2, r2, #2
 800a71c:	300c      	adds	r0, #12
 800a71e:	f7fc fe6f 	bl	8007400 <memcpy>
 800a722:	4621      	mov	r1, r4
 800a724:	4648      	mov	r0, r9
 800a726:	f7fd fe27 	bl	8008378 <_Bfree>
 800a72a:	4654      	mov	r4, sl
 800a72c:	6922      	ldr	r2, [r4, #16]
 800a72e:	1c51      	adds	r1, r2, #1
 800a730:	6121      	str	r1, [r4, #16]
 800a732:	2101      	movs	r1, #1
 800a734:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a738:	6151      	str	r1, [r2, #20]
 800a73a:	e7bc      	b.n	800a6b6 <__gethex+0x39a>
 800a73c:	6921      	ldr	r1, [r4, #16]
 800a73e:	4559      	cmp	r1, fp
 800a740:	dd0b      	ble.n	800a75a <__gethex+0x43e>
 800a742:	2101      	movs	r1, #1
 800a744:	4620      	mov	r0, r4
 800a746:	f7ff fd81 	bl	800a24c <rshift>
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	3601      	adds	r6, #1
 800a74e:	42b3      	cmp	r3, r6
 800a750:	f6ff aeda 	blt.w	800a508 <__gethex+0x1ec>
 800a754:	f04f 0801 	mov.w	r8, #1
 800a758:	e7c2      	b.n	800a6e0 <__gethex+0x3c4>
 800a75a:	f015 051f 	ands.w	r5, r5, #31
 800a75e:	d0f9      	beq.n	800a754 <__gethex+0x438>
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	f1c5 0520 	rsb	r5, r5, #32
 800a766:	441a      	add	r2, r3
 800a768:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a76c:	f7fd feb6 	bl	80084dc <__hi0bits>
 800a770:	42a8      	cmp	r0, r5
 800a772:	dbe6      	blt.n	800a742 <__gethex+0x426>
 800a774:	e7ee      	b.n	800a754 <__gethex+0x438>
 800a776:	bf00      	nop
 800a778:	0800abb7 	.word	0x0800abb7

0800a77c <L_shift>:
 800a77c:	f1c2 0208 	rsb	r2, r2, #8
 800a780:	0092      	lsls	r2, r2, #2
 800a782:	b570      	push	{r4, r5, r6, lr}
 800a784:	f1c2 0620 	rsb	r6, r2, #32
 800a788:	6843      	ldr	r3, [r0, #4]
 800a78a:	6804      	ldr	r4, [r0, #0]
 800a78c:	fa03 f506 	lsl.w	r5, r3, r6
 800a790:	432c      	orrs	r4, r5
 800a792:	40d3      	lsrs	r3, r2
 800a794:	6004      	str	r4, [r0, #0]
 800a796:	f840 3f04 	str.w	r3, [r0, #4]!
 800a79a:	4288      	cmp	r0, r1
 800a79c:	d3f4      	bcc.n	800a788 <L_shift+0xc>
 800a79e:	bd70      	pop	{r4, r5, r6, pc}

0800a7a0 <__match>:
 800a7a0:	b530      	push	{r4, r5, lr}
 800a7a2:	6803      	ldr	r3, [r0, #0]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7aa:	b914      	cbnz	r4, 800a7b2 <__match+0x12>
 800a7ac:	6003      	str	r3, [r0, #0]
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	bd30      	pop	{r4, r5, pc}
 800a7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a7ba:	2d19      	cmp	r5, #25
 800a7bc:	bf98      	it	ls
 800a7be:	3220      	addls	r2, #32
 800a7c0:	42a2      	cmp	r2, r4
 800a7c2:	d0f0      	beq.n	800a7a6 <__match+0x6>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e7f3      	b.n	800a7b0 <__match+0x10>

0800a7c8 <__hexnan>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	2500      	movs	r5, #0
 800a7ce:	680b      	ldr	r3, [r1, #0]
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	115e      	asrs	r6, r3, #5
 800a7d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a7d8:	f013 031f 	ands.w	r3, r3, #31
 800a7dc:	bf18      	it	ne
 800a7de:	3604      	addne	r6, #4
 800a7e0:	1f37      	subs	r7, r6, #4
 800a7e2:	4690      	mov	r8, r2
 800a7e4:	46b9      	mov	r9, r7
 800a7e6:	463c      	mov	r4, r7
 800a7e8:	46ab      	mov	fp, r5
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	6801      	ldr	r1, [r0, #0]
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	f846 5c04 	str.w	r5, [r6, #-4]
 800a7f4:	9502      	str	r5, [sp, #8]
 800a7f6:	784a      	ldrb	r2, [r1, #1]
 800a7f8:	1c4b      	adds	r3, r1, #1
 800a7fa:	9303      	str	r3, [sp, #12]
 800a7fc:	b342      	cbz	r2, 800a850 <__hexnan+0x88>
 800a7fe:	4610      	mov	r0, r2
 800a800:	9105      	str	r1, [sp, #20]
 800a802:	9204      	str	r2, [sp, #16]
 800a804:	f7ff fd75 	bl	800a2f2 <__hexdig_fun>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d14f      	bne.n	800a8ac <__hexnan+0xe4>
 800a80c:	9a04      	ldr	r2, [sp, #16]
 800a80e:	9905      	ldr	r1, [sp, #20]
 800a810:	2a20      	cmp	r2, #32
 800a812:	d818      	bhi.n	800a846 <__hexnan+0x7e>
 800a814:	9b02      	ldr	r3, [sp, #8]
 800a816:	459b      	cmp	fp, r3
 800a818:	dd13      	ble.n	800a842 <__hexnan+0x7a>
 800a81a:	454c      	cmp	r4, r9
 800a81c:	d206      	bcs.n	800a82c <__hexnan+0x64>
 800a81e:	2d07      	cmp	r5, #7
 800a820:	dc04      	bgt.n	800a82c <__hexnan+0x64>
 800a822:	462a      	mov	r2, r5
 800a824:	4649      	mov	r1, r9
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff ffa8 	bl	800a77c <L_shift>
 800a82c:	4544      	cmp	r4, r8
 800a82e:	d950      	bls.n	800a8d2 <__hexnan+0x10a>
 800a830:	2300      	movs	r3, #0
 800a832:	f1a4 0904 	sub.w	r9, r4, #4
 800a836:	f844 3c04 	str.w	r3, [r4, #-4]
 800a83a:	461d      	mov	r5, r3
 800a83c:	464c      	mov	r4, r9
 800a83e:	f8cd b008 	str.w	fp, [sp, #8]
 800a842:	9903      	ldr	r1, [sp, #12]
 800a844:	e7d7      	b.n	800a7f6 <__hexnan+0x2e>
 800a846:	2a29      	cmp	r2, #41	; 0x29
 800a848:	d155      	bne.n	800a8f6 <__hexnan+0x12e>
 800a84a:	3102      	adds	r1, #2
 800a84c:	f8ca 1000 	str.w	r1, [sl]
 800a850:	f1bb 0f00 	cmp.w	fp, #0
 800a854:	d04f      	beq.n	800a8f6 <__hexnan+0x12e>
 800a856:	454c      	cmp	r4, r9
 800a858:	d206      	bcs.n	800a868 <__hexnan+0xa0>
 800a85a:	2d07      	cmp	r5, #7
 800a85c:	dc04      	bgt.n	800a868 <__hexnan+0xa0>
 800a85e:	462a      	mov	r2, r5
 800a860:	4649      	mov	r1, r9
 800a862:	4620      	mov	r0, r4
 800a864:	f7ff ff8a 	bl	800a77c <L_shift>
 800a868:	4544      	cmp	r4, r8
 800a86a:	d934      	bls.n	800a8d6 <__hexnan+0x10e>
 800a86c:	4623      	mov	r3, r4
 800a86e:	f1a8 0204 	sub.w	r2, r8, #4
 800a872:	f853 1b04 	ldr.w	r1, [r3], #4
 800a876:	429f      	cmp	r7, r3
 800a878:	f842 1f04 	str.w	r1, [r2, #4]!
 800a87c:	d2f9      	bcs.n	800a872 <__hexnan+0xaa>
 800a87e:	1b3b      	subs	r3, r7, r4
 800a880:	f023 0303 	bic.w	r3, r3, #3
 800a884:	3304      	adds	r3, #4
 800a886:	3e03      	subs	r6, #3
 800a888:	3401      	adds	r4, #1
 800a88a:	42a6      	cmp	r6, r4
 800a88c:	bf38      	it	cc
 800a88e:	2304      	movcc	r3, #4
 800a890:	2200      	movs	r2, #0
 800a892:	4443      	add	r3, r8
 800a894:	f843 2b04 	str.w	r2, [r3], #4
 800a898:	429f      	cmp	r7, r3
 800a89a:	d2fb      	bcs.n	800a894 <__hexnan+0xcc>
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	b91b      	cbnz	r3, 800a8a8 <__hexnan+0xe0>
 800a8a0:	4547      	cmp	r7, r8
 800a8a2:	d126      	bne.n	800a8f2 <__hexnan+0x12a>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	603b      	str	r3, [r7, #0]
 800a8a8:	2005      	movs	r0, #5
 800a8aa:	e025      	b.n	800a8f8 <__hexnan+0x130>
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	2d08      	cmp	r5, #8
 800a8b0:	f10b 0b01 	add.w	fp, fp, #1
 800a8b4:	dd06      	ble.n	800a8c4 <__hexnan+0xfc>
 800a8b6:	4544      	cmp	r4, r8
 800a8b8:	d9c3      	bls.n	800a842 <__hexnan+0x7a>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	2501      	movs	r5, #1
 800a8be:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8c2:	3c04      	subs	r4, #4
 800a8c4:	6822      	ldr	r2, [r4, #0]
 800a8c6:	f000 000f 	and.w	r0, r0, #15
 800a8ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a8ce:	6020      	str	r0, [r4, #0]
 800a8d0:	e7b7      	b.n	800a842 <__hexnan+0x7a>
 800a8d2:	2508      	movs	r5, #8
 800a8d4:	e7b5      	b.n	800a842 <__hexnan+0x7a>
 800a8d6:	9b01      	ldr	r3, [sp, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d0df      	beq.n	800a89c <__hexnan+0xd4>
 800a8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e0:	f1c3 0320 	rsb	r3, r3, #32
 800a8e4:	40da      	lsrs	r2, r3
 800a8e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800a8f0:	e7d4      	b.n	800a89c <__hexnan+0xd4>
 800a8f2:	3f04      	subs	r7, #4
 800a8f4:	e7d2      	b.n	800a89c <__hexnan+0xd4>
 800a8f6:	2004      	movs	r0, #4
 800a8f8:	b007      	add	sp, #28
 800a8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8fe <__ascii_mbtowc>:
 800a8fe:	b082      	sub	sp, #8
 800a900:	b901      	cbnz	r1, 800a904 <__ascii_mbtowc+0x6>
 800a902:	a901      	add	r1, sp, #4
 800a904:	b142      	cbz	r2, 800a918 <__ascii_mbtowc+0x1a>
 800a906:	b14b      	cbz	r3, 800a91c <__ascii_mbtowc+0x1e>
 800a908:	7813      	ldrb	r3, [r2, #0]
 800a90a:	600b      	str	r3, [r1, #0]
 800a90c:	7812      	ldrb	r2, [r2, #0]
 800a90e:	1e10      	subs	r0, r2, #0
 800a910:	bf18      	it	ne
 800a912:	2001      	movne	r0, #1
 800a914:	b002      	add	sp, #8
 800a916:	4770      	bx	lr
 800a918:	4610      	mov	r0, r2
 800a91a:	e7fb      	b.n	800a914 <__ascii_mbtowc+0x16>
 800a91c:	f06f 0001 	mvn.w	r0, #1
 800a920:	e7f8      	b.n	800a914 <__ascii_mbtowc+0x16>

0800a922 <_realloc_r>:
 800a922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a926:	4680      	mov	r8, r0
 800a928:	4614      	mov	r4, r2
 800a92a:	460e      	mov	r6, r1
 800a92c:	b921      	cbnz	r1, 800a938 <_realloc_r+0x16>
 800a92e:	4611      	mov	r1, r2
 800a930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a934:	f7fd bc54 	b.w	80081e0 <_malloc_r>
 800a938:	b92a      	cbnz	r2, 800a946 <_realloc_r+0x24>
 800a93a:	f7fd fbe1 	bl	8008100 <_free_r>
 800a93e:	4625      	mov	r5, r4
 800a940:	4628      	mov	r0, r5
 800a942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a946:	f000 f842 	bl	800a9ce <_malloc_usable_size_r>
 800a94a:	4284      	cmp	r4, r0
 800a94c:	4607      	mov	r7, r0
 800a94e:	d802      	bhi.n	800a956 <_realloc_r+0x34>
 800a950:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a954:	d812      	bhi.n	800a97c <_realloc_r+0x5a>
 800a956:	4621      	mov	r1, r4
 800a958:	4640      	mov	r0, r8
 800a95a:	f7fd fc41 	bl	80081e0 <_malloc_r>
 800a95e:	4605      	mov	r5, r0
 800a960:	2800      	cmp	r0, #0
 800a962:	d0ed      	beq.n	800a940 <_realloc_r+0x1e>
 800a964:	42bc      	cmp	r4, r7
 800a966:	4622      	mov	r2, r4
 800a968:	4631      	mov	r1, r6
 800a96a:	bf28      	it	cs
 800a96c:	463a      	movcs	r2, r7
 800a96e:	f7fc fd47 	bl	8007400 <memcpy>
 800a972:	4631      	mov	r1, r6
 800a974:	4640      	mov	r0, r8
 800a976:	f7fd fbc3 	bl	8008100 <_free_r>
 800a97a:	e7e1      	b.n	800a940 <_realloc_r+0x1e>
 800a97c:	4635      	mov	r5, r6
 800a97e:	e7df      	b.n	800a940 <_realloc_r+0x1e>

0800a980 <__ascii_wctomb>:
 800a980:	4603      	mov	r3, r0
 800a982:	4608      	mov	r0, r1
 800a984:	b141      	cbz	r1, 800a998 <__ascii_wctomb+0x18>
 800a986:	2aff      	cmp	r2, #255	; 0xff
 800a988:	d904      	bls.n	800a994 <__ascii_wctomb+0x14>
 800a98a:	228a      	movs	r2, #138	; 0x8a
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	4770      	bx	lr
 800a994:	2001      	movs	r0, #1
 800a996:	700a      	strb	r2, [r1, #0]
 800a998:	4770      	bx	lr
	...

0800a99c <fiprintf>:
 800a99c:	b40e      	push	{r1, r2, r3}
 800a99e:	b503      	push	{r0, r1, lr}
 800a9a0:	4601      	mov	r1, r0
 800a9a2:	ab03      	add	r3, sp, #12
 800a9a4:	4805      	ldr	r0, [pc, #20]	; (800a9bc <fiprintf+0x20>)
 800a9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9aa:	6800      	ldr	r0, [r0, #0]
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	f7ff f95d 	bl	8009c6c <_vfiprintf_r>
 800a9b2:	b002      	add	sp, #8
 800a9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9b8:	b003      	add	sp, #12
 800a9ba:	4770      	bx	lr
 800a9bc:	200000dc 	.word	0x200000dc

0800a9c0 <abort>:
 800a9c0:	2006      	movs	r0, #6
 800a9c2:	b508      	push	{r3, lr}
 800a9c4:	f000 f834 	bl	800aa30 <raise>
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	f7f7 fe4a 	bl	8002662 <_exit>

0800a9ce <_malloc_usable_size_r>:
 800a9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d2:	1f18      	subs	r0, r3, #4
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bfbc      	itt	lt
 800a9d8:	580b      	ldrlt	r3, [r1, r0]
 800a9da:	18c0      	addlt	r0, r0, r3
 800a9dc:	4770      	bx	lr

0800a9de <_raise_r>:
 800a9de:	291f      	cmp	r1, #31
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	d904      	bls.n	800a9f2 <_raise_r+0x14>
 800a9e8:	2316      	movs	r3, #22
 800a9ea:	6003      	str	r3, [r0, #0]
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
 800a9f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a9f4:	b112      	cbz	r2, 800a9fc <_raise_r+0x1e>
 800a9f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9fa:	b94b      	cbnz	r3, 800aa10 <_raise_r+0x32>
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f000 f831 	bl	800aa64 <_getpid_r>
 800aa02:	462a      	mov	r2, r5
 800aa04:	4601      	mov	r1, r0
 800aa06:	4620      	mov	r0, r4
 800aa08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa0c:	f000 b818 	b.w	800aa40 <_kill_r>
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d00a      	beq.n	800aa2a <_raise_r+0x4c>
 800aa14:	1c59      	adds	r1, r3, #1
 800aa16:	d103      	bne.n	800aa20 <_raise_r+0x42>
 800aa18:	2316      	movs	r3, #22
 800aa1a:	6003      	str	r3, [r0, #0]
 800aa1c:	2001      	movs	r0, #1
 800aa1e:	e7e7      	b.n	800a9f0 <_raise_r+0x12>
 800aa20:	2400      	movs	r4, #0
 800aa22:	4628      	mov	r0, r5
 800aa24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa28:	4798      	blx	r3
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	e7e0      	b.n	800a9f0 <_raise_r+0x12>
	...

0800aa30 <raise>:
 800aa30:	4b02      	ldr	r3, [pc, #8]	; (800aa3c <raise+0xc>)
 800aa32:	4601      	mov	r1, r0
 800aa34:	6818      	ldr	r0, [r3, #0]
 800aa36:	f7ff bfd2 	b.w	800a9de <_raise_r>
 800aa3a:	bf00      	nop
 800aa3c:	200000dc 	.word	0x200000dc

0800aa40 <_kill_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	2300      	movs	r3, #0
 800aa44:	4d06      	ldr	r5, [pc, #24]	; (800aa60 <_kill_r+0x20>)
 800aa46:	4604      	mov	r4, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	602b      	str	r3, [r5, #0]
 800aa4e:	f7f7 fdf8 	bl	8002642 <_kill>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d102      	bne.n	800aa5c <_kill_r+0x1c>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	b103      	cbz	r3, 800aa5c <_kill_r+0x1c>
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	bf00      	nop
 800aa60:	200006b4 	.word	0x200006b4

0800aa64 <_getpid_r>:
 800aa64:	f7f7 bde6 	b.w	8002634 <_getpid>

0800aa68 <_init>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	bf00      	nop
 800aa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6e:	bc08      	pop	{r3}
 800aa70:	469e      	mov	lr, r3
 800aa72:	4770      	bx	lr

0800aa74 <_fini>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr
