
mazeCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009fa8  08009fa8  00019fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a400  0800a400  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a400  0800a400  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a400  0800a400  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a400  0800a400  0001a400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a408  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001e0  0800a5e4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800a5e4  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012695  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002819  00000000  00000000  000328dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  000350f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ded  00000000  00000000  00036298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003399  00000000  00000000  00037085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150cd  00000000  00000000  0003a41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094bc7  00000000  00000000  0004f4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000600c  00000000  00000000  000e40b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ea0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f8c 	.word	0x08009f8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009f8c 	.word	0x08009f8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af04      	add	r7, sp, #16
 8000bde:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000be0:	2364      	movs	r3, #100	; 0x64
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	f107 030f 	add.w	r3, r7, #15
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2275      	movs	r2, #117	; 0x75
 8000bf2:	21d0      	movs	r1, #208	; 0xd0
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f002 f8bf 	bl	8002d78 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	2b68      	cmp	r3, #104	; 0x68
 8000bfe:	d13d      	bne.n	8000c7c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000c04:	2364      	movs	r3, #100	; 0x64
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f107 030e 	add.w	r3, r7, #14
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	226b      	movs	r2, #107	; 0x6b
 8000c16:	21d0      	movs	r1, #208	; 0xd0
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f001 ffb3 	bl	8002b84 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000c22:	2364      	movs	r3, #100	; 0x64
 8000c24:	9302      	str	r3, [sp, #8]
 8000c26:	2301      	movs	r3, #1
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	f107 030e 	add.w	r3, r7, #14
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2301      	movs	r3, #1
 8000c32:	2219      	movs	r2, #25
 8000c34:	21d0      	movs	r1, #208	; 0xd0
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f001 ffa4 	bl	8002b84 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	2301      	movs	r3, #1
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	f107 030e 	add.w	r3, r7, #14
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	221c      	movs	r2, #28
 8000c52:	21d0      	movs	r1, #208	; 0xd0
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f001 ff95 	bl	8002b84 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000c5e:	2364      	movs	r3, #100	; 0x64
 8000c60:	9302      	str	r3, [sp, #8]
 8000c62:	2301      	movs	r3, #1
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	f107 030e 	add.w	r3, r7, #14
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	221b      	movs	r2, #27
 8000c70:	21d0      	movs	r1, #208	; 0xd0
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f001 ff86 	bl	8002b84 <HAL_I2C_Mem_Write>
        return 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e000      	b.n	8000c7e <MPU6050_Init+0xa6>
    }
    return 1;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af04      	add	r7, sp, #16
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	9302      	str	r3, [sp, #8]
 8000c96:	2306      	movs	r3, #6
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	2243      	movs	r2, #67	; 0x43
 8000ca4:	21d0      	movs	r1, #208	; 0xd0
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f002 f866 	bl	8002d78 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000cac:	7a3b      	ldrb	r3, [r7, #8]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	7a7b      	ldrb	r3, [r7, #9]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000cbe:	7abb      	ldrb	r3, [r7, #10]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000cd0:	7b3b      	ldrb	r3, [r7, #12]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	7b7b      	ldrb	r3, [r7, #13]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fb8b 	bl	8000404 <__aeabi_i2d>
 8000cee:	a318      	add	r3, pc, #96	; (adr r3, 8000d50 <MPU6050_Read_Gyro+0xc8>)
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	f7ff fd1a 	bl	800072c <__aeabi_ddiv>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	6839      	ldr	r1, [r7, #0]
 8000cfe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fb7b 	bl	8000404 <__aeabi_i2d>
 8000d0e:	a310      	add	r3, pc, #64	; (adr r3, 8000d50 <MPU6050_Read_Gyro+0xc8>)
 8000d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d14:	f7ff fd0a 	bl	800072c <__aeabi_ddiv>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fb6b 	bl	8000404 <__aeabi_i2d>
 8000d2e:	a308      	add	r3, pc, #32	; (adr r3, 8000d50 <MPU6050_Read_Gyro+0xc8>)
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	f7ff fcfa 	bl	800072c <__aeabi_ddiv>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	6839      	ldr	r1, [r7, #0]
 8000d3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	f3af 8000 	nop.w
 8000d50:	00000000 	.word	0x00000000
 8000d54:	40606000 	.word	0x40606000

08000d58 <calibrate>:
    Kalman->P[1][1] -= K[1] * P01_temp;

    return Kalman->angle;
};

void calibrate(I2C_HandleTypeDef *I2Cx, uint16_t samples,Calibrate_t *filter){
 8000d58:	b5b0      	push	{r4, r5, r7, lr}
 8000d5a:	b09c      	sub	sp, #112	; 0x70
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	460b      	mov	r3, r1
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	817b      	strh	r3, [r7, #10]

	MPU6050_t Data;

	for(uint16_t i = 0; i < samples; i++){
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000d6c:	e031      	b.n	8000dd2 <calibrate+0x7a>
		MPU6050_Read_Gyro(I2Cx, &Data);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f7ff ff87 	bl	8000c88 <MPU6050_Read_Gyro>
		filter->Calibrate_X += Data.Gx;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000d84:	f7ff f9f2 	bl	800016c <__adddf3>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	e9c1 2300 	strd	r2, r3, [r1]
		filter->Calibrate_Y += Data.Gy;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000d98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d9c:	f7ff f9e6 	bl	800016c <__adddf3>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		filter->Calibrate_Z += Data.Gz;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000db0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000db4:	f7ff f9da 	bl	800016c <__adddf3>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	e9c1 2304 	strd	r2, r3, [r1, #16]
		HAL_Delay(5);
 8000dc2:	2005      	movs	r0, #5
 8000dc4:	f001 f8a0 	bl	8001f08 <HAL_Delay>
	for(uint16_t i = 0; i < samples; i++){
 8000dc8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000dcc:	3301      	adds	r3, #1
 8000dce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000dd2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000dd6:	897b      	ldrh	r3, [r7, #10]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3c8      	bcc.n	8000d6e <calibrate+0x16>
	}
	filter->Calibrate_X = filter->Calibrate_X / samples;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000de2:	897b      	ldrh	r3, [r7, #10]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fb0d 	bl	8000404 <__aeabi_i2d>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	4620      	mov	r0, r4
 8000df0:	4629      	mov	r1, r5
 8000df2:	f7ff fc9b 	bl	800072c <__aeabi_ddiv>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	e9c1 2300 	strd	r2, r3, [r1]
	filter->Calibrate_Y = filter->Calibrate_Y /samples;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000e06:	897b      	ldrh	r3, [r7, #10]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fafb 	bl	8000404 <__aeabi_i2d>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4620      	mov	r0, r4
 8000e14:	4629      	mov	r1, r5
 8000e16:	f7ff fc89 	bl	800072c <__aeabi_ddiv>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	e9c1 2302 	strd	r2, r3, [r1, #8]
	filter->Calibrate_Z = filter->Calibrate_Z/samples;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000e2a:	897b      	ldrh	r3, [r7, #10]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fae9 	bl	8000404 <__aeabi_i2d>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4620      	mov	r0, r4
 8000e38:	4629      	mov	r1, r5
 8000e3a:	f7ff fc77 	bl	800072c <__aeabi_ddiv>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000e48:	bf00      	nop
 8000e4a:	3770      	adds	r7, #112	; 0x70
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bdb0      	pop	{r4, r5, r7, pc}

08000e50 <HAL_TIM_IC_CaptureCallback>:
 8000e50:	b4b0      	push	{r4, r5, r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	6809      	ldr	r1, [r1, #0]
 8000e5c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000e60:	d109      	bne.n	8000e76 <HAL_TIM_IC_CaptureCallback+0x26>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	2200      	movs	r2, #0
 8000e6a:	461c      	mov	r4, r3
 8000e6c:	4615      	mov	r5, r2
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000e70:	e9c3 4500 	strd	r4, r5, [r3]
 8000e74:	e00d      	b.n	8000e92 <HAL_TIM_IC_CaptureCallback+0x42>
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	6809      	ldr	r1, [r1, #0]
 8000e7a:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e7c:	4281      	cmp	r1, r0
 8000e7e:	d108      	bne.n	8000e92 <HAL_TIM_IC_CaptureCallback+0x42>
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	6809      	ldr	r1, [r1, #0]
 8000e84:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000e86:	2000      	movs	r0, #0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000e8e:	e9c1 2300 	strd	r2, r3, [r1]
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bcb0      	pop	{r4, r5, r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000200 	.word	0x20000200
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	20000208 	.word	0x20000208

08000ea8 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <_write+0x28>)
 8000ec0:	f004 fb41 	bl	8005546 <HAL_UART_Transmit>
    return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200003e4 	.word	0x200003e4

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f000 ffb2 	bl	8001e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f8e6 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 fbba 	bl	800165c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ee8:	f000 f93e 	bl	8001168 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000eec:	f000 fb8c 	bl	8001608 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ef0:	f000 f9a0 	bl	8001234 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ef4:	f000 fa6a 	bl	80013cc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ef8:	f000 f9ca 	bl	8001290 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000efc:	f000 faba 	bl	8001474 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f00:	f000 fb0c 	bl	800151c <MX_TIM4_Init>
  MX_ADC2_Init();
 8000f04:	f000 f958 	bl	80011b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000f08:	213c      	movs	r1, #60	; 0x3c
 8000f0a:	4859      	ldr	r0, [pc, #356]	; (8001070 <main+0x19c>)
 8000f0c:	f003 fc02 	bl	8004714 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000f10:	213c      	movs	r1, #60	; 0x3c
 8000f12:	4858      	ldr	r0, [pc, #352]	; (8001074 <main+0x1a0>)
 8000f14:	f003 fbfe 	bl	8004714 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f18:	210c      	movs	r1, #12
 8000f1a:	4857      	ldr	r0, [pc, #348]	; (8001078 <main+0x1a4>)
 8000f1c:	f003 fab6 	bl	800448c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f20:	2108      	movs	r1, #8
 8000f22:	4856      	ldr	r0, [pc, #344]	; (800107c <main+0x1a8>)
 8000f24:	f003 fab2 	bl	800448c <HAL_TIM_PWM_Start>

    HAL_GPIO_WritePin(LED_MCU_GPIO_Port, LED_MCU_Pin, SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2e:	4854      	ldr	r0, [pc, #336]	; (8001080 <main+0x1ac>)
 8000f30:	f001 fccc 	bl	80028cc <HAL_GPIO_WritePin>
//	PIDController_Init(&leftWheelPID);
//	PIDController_Init(&forwardPID);
//	init_encoder(&enc_Left, LEFT_WHEEL);
//	init_encoder(&enc_Right, RIGHT_WHEEL);

	uint8_t timeout = 10;
 8000f34:	230a      	movs	r3, #10
 8000f36:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
	while (MPU6050_Init(&hi2c1) == 1){
 8000f3a:	e00a      	b.n	8000f52 <main+0x7e>
		timeout--;
 8000f3c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8000f40:	3b01      	subs	r3, #1
 8000f42:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
		if(timeout == 0){
 8000f46:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <main+0x7e>
			HAL_NVIC_SystemReset();
 8000f4e:	f001 fb28 	bl	80025a2 <HAL_NVIC_SystemReset>
	while (MPU6050_Init(&hi2c1) == 1){
 8000f52:	484c      	ldr	r0, [pc, #304]	; (8001084 <main+0x1b0>)
 8000f54:	f7ff fe40 	bl	8000bd8 <MPU6050_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d0ee      	beq.n	8000f3c <main+0x68>
		}
	}
	calibrate(&hi2c1,1000,&filter);
 8000f5e:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <main+0x1b4>)
 8000f60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f64:	4847      	ldr	r0, [pc, #284]	; (8001084 <main+0x1b0>)
 8000f66:	f7ff fef7 	bl	8000d58 <calibrate>

	while(1){
		previousTime = HAL_GetTick();
 8000f6a:	f000 ffc3 	bl	8001ef4 <HAL_GetTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <main+0x1b8>)
 8000f72:	6013      	str	r3, [r2, #0]
		MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8000f74:	4946      	ldr	r1, [pc, #280]	; (8001090 <main+0x1bc>)
 8000f76:	4843      	ldr	r0, [pc, #268]	; (8001084 <main+0x1b0>)
 8000f78:	f7ff fe86 	bl	8000c88 <MPU6050_Read_Gyro>
		roll += (MPU6050.Gx - filter.Calibrate_X) *dt;
 8000f7c:	4b44      	ldr	r3, [pc, #272]	; (8001090 <main+0x1bc>)
 8000f7e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000f82:	4b41      	ldr	r3, [pc, #260]	; (8001088 <main+0x1b4>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff f8ee 	bl	8000168 <__aeabi_dsub>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <main+0x1c0>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff fa9d 	bl	80004d8 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <main+0x1c4>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff f8de 	bl	800016c <__adddf3>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4938      	ldr	r1, [pc, #224]	; (8001098 <main+0x1c4>)
 8000fb6:	e9c1 2300 	strd	r2, r3, [r1]
		pitch += (MPU6050.Gy - filter.Calibrate_Y) *dt;
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <main+0x1bc>)
 8000fbc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <main+0x1b4>)
 8000fc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fc6:	f7ff f8cf 	bl	8000168 <__aeabi_dsub>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <main+0x1c0>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fa7e 	bl	80004d8 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <main+0x1c8>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff f8bf 	bl	800016c <__adddf3>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	492a      	ldr	r1, [pc, #168]	; (800109c <main+0x1c8>)
 8000ff4:	e9c1 2300 	strd	r2, r3, [r1]
		yaw += (MPU6050.Gz - filter.Calibrate_Z) *dt;
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <main+0x1bc>)
 8000ffa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <main+0x1b4>)
 8001000:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001004:	f7ff f8b0 	bl	8000168 <__aeabi_dsub>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <main+0x1c0>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fa5f 	bl	80004d8 <__aeabi_dmul>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <main+0x1cc>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff f8a0 	bl	800016c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	491b      	ldr	r1, [pc, #108]	; (80010a0 <main+0x1cc>)
 8001032:	e9c1 2300 	strd	r2, r3, [r1]
		currentTime = HAL_GetTick();
 8001036:	f000 ff5d 	bl	8001ef4 <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <main+0x1d0>)
 800103e:	6013      	str	r3, [r2, #0]
		elapsedTime = currentTime - previousTime;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <main+0x1d0>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <main+0x1b8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <main+0x1d4>)
 800104c:	6013      	str	r3, [r2, #0]
		dt = ((double) elapsedTime) / 1000;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <main+0x1d4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f9c6 	bl	80003e4 <__aeabi_ui2d>
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <main+0x1d8>)
 800105e:	f7ff fb65 	bl	800072c <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	490b      	ldr	r1, [pc, #44]	; (8001094 <main+0x1c0>)
 8001068:	e9c1 2300 	strd	r2, r3, [r1]
		previousTime = HAL_GetTick();
 800106c:	e77d      	b.n	8000f6a <main+0x96>
 800106e:	bf00      	nop
 8001070:	2000030c 	.word	0x2000030c
 8001074:	20000354 	.word	0x20000354
 8001078:	200002c4 	.word	0x200002c4
 800107c:	2000039c 	.word	0x2000039c
 8001080:	40011000 	.word	0x40011000
 8001084:	20000270 	.word	0x20000270
 8001088:	20000488 	.word	0x20000488
 800108c:	200004c0 	.word	0x200004c0
 8001090:	20000430 	.word	0x20000430
 8001094:	20000000 	.word	0x20000000
 8001098:	200004a0 	.word	0x200004a0
 800109c:	200004a8 	.word	0x200004a8
 80010a0:	200004b0 	.word	0x200004b0
 80010a4:	200004bc 	.word	0x200004bc
 80010a8:	200004b8 	.word	0x200004b8
 80010ac:	408f4000 	.word	0x408f4000

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	2228      	movs	r2, #40	; 0x28
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 fb3f 	bl	8006742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ee:	2301      	movs	r3, #1
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f2:	2302      	movs	r3, #2
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	4618      	mov	r0, r3
 8001108:	f002 fc52 	bl	80039b0 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001112:	f000 fb33 	bl	800177c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001122:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001126:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f002 febe 	bl	8003eb4 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800113e:	f000 fb1d 	bl	800177c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001142:	2302      	movs	r3, #2
 8001144:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800114a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f83e 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800115a:	f000 fb0f 	bl	800177c <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	; 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_ADC1_Init+0x48>)
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <MX_ADC1_Init+0x4c>)
 8001170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_ADC1_Init+0x48>)
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <MX_ADC1_Init+0x48>)
 800117c:	2201      	movs	r2, #1
 800117e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_ADC1_Init+0x48>)
 8001182:	2200      	movs	r2, #0
 8001184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_ADC1_Init+0x48>)
 8001188:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800118c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_ADC1_Init+0x48>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_ADC1_Init+0x48>)
 8001196:	2201      	movs	r2, #1
 8001198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_ADC1_Init+0x48>)
 800119c:	f000 fed8 	bl	8001f50 <HAL_ADC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80011a6:	f000 fae9 	bl	800177c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000210 	.word	0x20000210
 80011b4:	40012400 	.word	0x40012400

080011b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_ADC2_Init+0x74>)
 80011ca:	4a19      	ldr	r2, [pc, #100]	; (8001230 <MX_ADC2_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_ADC2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_ADC2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_ADC2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_ADC2_Init+0x74>)
 80011e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_ADC2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_ADC2_Init+0x74>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_ADC2_Init+0x74>)
 80011f6:	f000 feab 	bl	8001f50 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001200:	f000 fabc 	bl	800177c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001208:	2301      	movs	r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800120c:	2307      	movs	r3, #7
 800120e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_ADC2_Init+0x74>)
 8001216:	f000 ff73 	bl	8002100 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001220:	f000 faac 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000240 	.word	0x20000240
 8001230:	40012800 	.word	0x40012800

08001234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f001 fb43 	bl	80028fc <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 fa7e 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000270 	.word	0x20000270
 8001288:	40005400 	.word	0x40005400
 800128c:	000186a0 	.word	0x000186a0

08001290 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b096      	sub	sp, #88	; 0x58
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2220      	movs	r2, #32
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 fa3a 	bl	8006742 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ce:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <MX_TIM1_Init+0x134>)
 80012d0:	4a3d      	ldr	r2, [pc, #244]	; (80013c8 <MX_TIM1_Init+0x138>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 80012d4:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <MX_TIM1_Init+0x134>)
 80012d6:	2211      	movs	r2, #17
 80012d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <MX_TIM1_Init+0x134>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80012e0:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <MX_TIM1_Init+0x134>)
 80012e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80012e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <MX_TIM1_Init+0x134>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <MX_TIM1_Init+0x134>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_TIM1_Init+0x134>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012fa:	4832      	ldr	r0, [pc, #200]	; (80013c4 <MX_TIM1_Init+0x134>)
 80012fc:	f003 f81e 	bl	800433c <HAL_TIM_Base_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001306:	f000 fa39 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001310:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001314:	4619      	mov	r1, r3
 8001316:	482b      	ldr	r0, [pc, #172]	; (80013c4 <MX_TIM1_Init+0x134>)
 8001318:	f003 fc74 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001322:	f000 fa2b 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001326:	4827      	ldr	r0, [pc, #156]	; (80013c4 <MX_TIM1_Init+0x134>)
 8001328:	f003 f857 	bl	80043da <HAL_TIM_PWM_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001332:	f000 fa23 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001342:	4619      	mov	r1, r3
 8001344:	481f      	ldr	r0, [pc, #124]	; (80013c4 <MX_TIM1_Init+0x134>)
 8001346:	f003 ffed 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001350:	f000 fa14 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001354:	2360      	movs	r3, #96	; 0x60
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	220c      	movs	r2, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_TIM1_Init+0x134>)
 8001376:	f003 fb83 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001380:	f000 f9fc 	bl	800177c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_TIM1_Init+0x134>)
 80013a8:	f004 f81a 	bl	80053e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80013b2:	f000 f9e3 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <MX_TIM1_Init+0x134>)
 80013b8:	f000 fb96 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3758      	adds	r7, #88	; 0x58
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200002c4 	.word	0x200002c4
 80013c8:	40012c00 	.word	0x40012c00

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 f9b1 	bl	8006742 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_TIM2_Init+0xa4>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_TIM2_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_TIM2_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_TIM2_Init+0xa4>)
 80013fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001402:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_TIM2_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_TIM2_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001428:	2301      	movs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_TIM2_Init+0xa4>)
 800143c:	f003 f8c8 	bl	80045d0 <HAL_TIM_Encoder_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001446:	f000 f999 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_TIM2_Init+0xa4>)
 8001458:	f003 ff64 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001462:	f000 f98b 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3730      	adds	r7, #48	; 0x30
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000030c 	.word	0x2000030c

08001474 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2224      	movs	r2, #36	; 0x24
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f005 f95d 	bl	8006742 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <MX_TIM3_Init+0xa0>)
 8001492:	4a21      	ldr	r2, [pc, #132]	; (8001518 <MX_TIM3_Init+0xa4>)
 8001494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <MX_TIM3_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_TIM3_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014be:	2301      	movs	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014ce:	2301      	movs	r3, #1
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	4619      	mov	r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014e2:	f003 f875 	bl	80045d0 <HAL_TIM_Encoder_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014ec:	f000 f946 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014fe:	f003 ff11 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001508:	f000 f938 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	3730      	adds	r7, #48	; 0x30
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000354 	.word	0x20000354
 8001518:	40000400 	.word	0x40000400

0800151c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_TIM4_Init+0xe4>)
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <MX_TIM4_Init+0xe8>)
 8001550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001554:	2211      	movs	r2, #17
 8001556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_TIM4_Init+0xe4>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001560:	f242 720f 	movw	r2, #9999	; 0x270f
 8001564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <MX_TIM4_Init+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001572:	4823      	ldr	r0, [pc, #140]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001574:	f002 fee2 	bl	800433c <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800157e:	f000 f8fd 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158c:	4619      	mov	r1, r3
 800158e:	481c      	ldr	r0, [pc, #112]	; (8001600 <MX_TIM4_Init+0xe4>)
 8001590:	f003 fb38 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800159a:	f000 f8ef 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800159e:	4818      	ldr	r0, [pc, #96]	; (8001600 <MX_TIM4_Init+0xe4>)
 80015a0:	f002 ff1b 	bl	80043da <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80015aa:	f000 f8e7 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4619      	mov	r1, r3
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <MX_TIM4_Init+0xe4>)
 80015be:	f003 feb1 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015c8:	f000 f8d8 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2208      	movs	r2, #8
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM4_Init+0xe4>)
 80015e4:	f003 fa4c 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80015ee:	f000 f8c5 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015f2:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM4_Init+0xe4>)
 80015f4:	f000 fa78 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000039c 	.word	0x2000039c
 8001604:	40000800 	.word	0x40000800

08001608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART1_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001640:	f003 ff31 	bl	80054a6 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f897 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200003e4 	.word	0x200003e4
 8001658:	40013800 	.word	0x40013800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	4b3e      	ldr	r3, [pc, #248]	; (800176c <MX_GPIO_Init+0x110>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a3d      	ldr	r2, [pc, #244]	; (800176c <MX_GPIO_Init+0x110>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <MX_GPIO_Init+0x110>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <MX_GPIO_Init+0x110>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <MX_GPIO_Init+0x110>)
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <MX_GPIO_Init+0x110>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <MX_GPIO_Init+0x110>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a31      	ldr	r2, [pc, #196]	; (800176c <MX_GPIO_Init+0x110>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <MX_GPIO_Init+0x110>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <MX_GPIO_Init+0x110>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a2b      	ldr	r2, [pc, #172]	; (800176c <MX_GPIO_Init+0x110>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <MX_GPIO_Init+0x110>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MCU_GPIO_Port, LED_MCU_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4826      	ldr	r0, [pc, #152]	; (8001770 <MX_GPIO_Init+0x114>)
 80016d8:	f001 f8f8 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin|STBY_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2138      	movs	r1, #56	; 0x38
 80016e0:	4824      	ldr	r0, [pc, #144]	; (8001774 <MX_GPIO_Init+0x118>)
 80016e2:	f001 f8f3 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 80016e6:	2200      	movs	r2, #0
 80016e8:	f64c 4133 	movw	r1, #52275	; 0xcc33
 80016ec:	4822      	ldr	r0, [pc, #136]	; (8001778 <MX_GPIO_Init+0x11c>)
 80016ee:	f001 f8ed 	bl	80028cc <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_MCU_Pin */
  GPIO_InitStruct.Pin = LED_MCU_Pin;
 80016f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2302      	movs	r3, #2
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_MCU_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4619      	mov	r1, r3
 800170a:	4819      	ldr	r0, [pc, #100]	; (8001770 <MX_GPIO_Init+0x114>)
 800170c:	f000 ff5a 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|STBY_Pin;
 8001710:	2338      	movs	r3, #56	; 0x38
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	4813      	ldr	r0, [pc, #76]	; (8001774 <MX_GPIO_Init+0x118>)
 8001728:	f000 ff4c 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AI2_Pin AI1_Pin BI1_Pin BI2_Pin
                           LED5_Pin LED6_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 800172c:	f64c 4333 	movw	r3, #52275	; 0xcc33
 8001730:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2302      	movs	r3, #2
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001746:	f000 ff3d 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800174a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001760:	f000 ff30 	bl	80025c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	40011000 	.word	0x40011000
 8001774:	40010800 	.word	0x40010800
 8001778:	40010c00 	.word	0x40010c00

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <HAL_MspInit>:
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_MspInit+0x5c>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_MspInit+0x5c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6193      	str	r3, [r2, #24]
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_MspInit+0x5c>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_MspInit+0x5c>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_MspInit+0x5c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_MspInit+0x5c>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_MspInit+0x60>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_MspInit+0x60>)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6053      	str	r3, [r2, #4]
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000

080017ec <HAL_ADC_MspInit>:
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <HAL_ADC_MspInit+0xbc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d122      	bne.n	8001852 <HAL_ADC_MspInit+0x66>
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a20      	ldr	r2, [pc, #128]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	2306      	movs	r3, #6
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	2303      	movs	r3, #3
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4619      	mov	r1, r3
 800184a:	4819      	ldr	r0, [pc, #100]	; (80018b0 <HAL_ADC_MspInit+0xc4>)
 800184c:	f000 feba 	bl	80025c4 <HAL_GPIO_Init>
 8001850:	e026      	b.n	80018a0 <HAL_ADC_MspInit+0xb4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_ADC_MspInit+0xc8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d121      	bne.n	80018a0 <HAL_ADC_MspInit+0xb4>
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_ADC_MspInit+0xc0>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2301      	movs	r3, #1
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	2303      	movs	r3, #3
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	f107 0318 	add.w	r3, r7, #24
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_ADC_MspInit+0xc4>)
 800189c:	f000 fe92 	bl	80025c4 <HAL_GPIO_Init>
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40012400 	.word	0x40012400
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40012800 	.word	0x40012800

080018b8 <HAL_I2C_MspInit>:
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <HAL_I2C_MspInit+0x70>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d123      	bne.n	8001920 <HAL_I2C_MspInit+0x68>
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_I2C_MspInit+0x74>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a13      	ldr	r2, [pc, #76]	; (800192c <HAL_I2C_MspInit+0x74>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_I2C_MspInit+0x74>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	23c0      	movs	r3, #192	; 0xc0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	2312      	movs	r3, #18
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	2303      	movs	r3, #3
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_I2C_MspInit+0x78>)
 8001904:	f000 fe5e 	bl	80025c4 <HAL_GPIO_Init>
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_I2C_MspInit+0x74>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_I2C_MspInit+0x74>)
 800190e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001912:	61d3      	str	r3, [r2, #28]
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_I2C_MspInit+0x74>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40005400 	.word	0x40005400
 800192c:	40021000 	.word	0x40021000
 8001930:	40010c00 	.word	0x40010c00

08001934 <HAL_TIM_Base_MspInit>:
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <HAL_TIM_Base_MspInit+0x58>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10c      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x2c>
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_TIM_Base_MspInit+0x5c>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_TIM_Base_MspInit+0x5c>)
 800194c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001950:	6193      	str	r3, [r2, #24]
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_TIM_Base_MspInit+0x5c>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	e010      	b.n	8001982 <HAL_TIM_Base_MspInit+0x4e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_TIM_Base_MspInit+0x60>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10b      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x4e>
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_TIM_Base_MspInit+0x5c>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_TIM_Base_MspInit+0x5c>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_TIM_Base_MspInit+0x5c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40012c00 	.word	0x40012c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40000800 	.word	0x40000800

08001998 <HAL_TIM_Encoder_MspInit>:
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d157      	bne.n	8001a68 <HAL_TIM_Encoder_MspInit+0xd0>
 80019b8:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	61d3      	str	r3, [r2, #28]
 80019c4:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a3f      	ldr	r2, [pc, #252]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a39      	ldr	r2, [pc, #228]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4830      	ldr	r0, [pc, #192]	; (8001ad8 <HAL_TIM_Encoder_MspInit+0x140>)
 8001a16:	f000 fdd5 	bl	80025c4 <HAL_GPIO_Init>
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	482b      	ldr	r0, [pc, #172]	; (8001adc <HAL_TIM_Encoder_MspInit+0x144>)
 8001a2e:	f000 fdc9 	bl	80025c4 <HAL_GPIO_Init>
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x148>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a50:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <HAL_TIM_Encoder_MspInit+0x148>)
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	6053      	str	r3, [r2, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201c      	movs	r0, #28
 8001a5c:	f000 fd77 	bl	800254e <HAL_NVIC_SetPriority>
 8001a60:	201c      	movs	r0, #28
 8001a62:	f000 fd90 	bl	8002586 <HAL_NVIC_EnableIRQ>
 8001a66:	e030      	b.n	8001aca <HAL_TIM_Encoder_MspInit+0x132>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12b      	bne.n	8001aca <HAL_TIM_Encoder_MspInit+0x132>
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	23c0      	movs	r3, #192	; 0xc0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <HAL_TIM_Encoder_MspInit+0x140>)
 8001ab6:	f000 fd85 	bl	80025c4 <HAL_GPIO_Init>
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201d      	movs	r0, #29
 8001ac0:	f000 fd45 	bl	800254e <HAL_NVIC_SetPriority>
 8001ac4:	201d      	movs	r0, #29
 8001ac6:	f000 fd5e 	bl	8002586 <HAL_NVIC_EnableIRQ>
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	; 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010800 	.word	0x40010800
 8001adc:	40010c00 	.word	0x40010c00
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <HAL_TIM_MspPostInit>:
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_TIM_MspPostInit+0x98>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d119      	bne.n	8001b3c <HAL_TIM_MspPostInit+0x54>
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_TIM_MspPostInit+0x9c>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_TIM_MspPostInit+0x9c>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_TIM_MspPostInit+0x9c>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	2302      	movs	r3, #2
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4619      	mov	r1, r3
 8001b34:	4814      	ldr	r0, [pc, #80]	; (8001b88 <HAL_TIM_MspPostInit+0xa0>)
 8001b36:	f000 fd45 	bl	80025c4 <HAL_GPIO_Init>
 8001b3a:	e01d      	b.n	8001b78 <HAL_TIM_MspPostInit+0x90>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_TIM_MspPostInit+0xa4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d118      	bne.n	8001b78 <HAL_TIM_MspPostInit+0x90>
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_TIM_MspPostInit+0x9c>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_TIM_MspPostInit+0x9c>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	6193      	str	r3, [r2, #24]
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_TIM_MspPostInit+0x9c>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	2302      	movs	r3, #2
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4619      	mov	r1, r3
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <HAL_TIM_MspPostInit+0xa8>)
 8001b74:	f000 fd26 	bl	80025c4 <HAL_GPIO_Init>
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40000800 	.word	0x40000800
 8001b90:	40010c00 	.word	0x40010c00

08001b94 <HAL_UART_MspInit>:
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_UART_MspInit+0x8c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d131      	bne.n	8001c18 <HAL_UART_MspInit+0x84>
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_UART_MspInit+0x90>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_UART_MspInit+0x90>)
 8001bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_UART_MspInit+0x90>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_UART_MspInit+0x90>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <HAL_UART_MspInit+0x90>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_UART_MspInit+0x90>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	2302      	movs	r3, #2
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	2303      	movs	r3, #3
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <HAL_UART_MspInit+0x94>)
 8001bfa:	f000 fce3 	bl	80025c4 <HAL_GPIO_Init>
 8001bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <HAL_UART_MspInit+0x94>)
 8001c14:	f000 fcd6 	bl	80025c4 <HAL_GPIO_Init>
 8001c18:	bf00      	nop
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010800 	.word	0x40010800

08001c2c <NMI_Handler>:
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <SVC_Handler>:
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <DebugMon_Handler>:
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <PendSV_Handler>:
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <SysTick_Handler>:
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	f000 f92d 	bl	8001ed0 <HAL_IncTick>
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <TIM2_IRQHandler>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <TIM2_IRQHandler+0x10>)
 8001c82:	f002 fdf5 	bl	8004870 <HAL_TIM_IRQHandler>
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000030c 	.word	0x2000030c

08001c90 <TIM3_IRQHandler>:
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM3_IRQHandler+0x10>)
 8001c96:	f002 fdeb 	bl	8004870 <HAL_TIM_IRQHandler>
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000354 	.word	0x20000354

08001ca4 <_getpid>:
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	2301      	movs	r3, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <_kill>:
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
 8001cbc:	f004 fd94 	bl	80067e8 <__errno>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2216      	movs	r2, #22
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_exit>:
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	f04f 31ff 	mov.w	r1, #4294967295
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffe7 	bl	8001cb2 <_kill>
 8001ce4:	e7fe      	b.n	8001ce4 <_exit+0x12>

08001ce6 <_read>:
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e00a      	b.n	8001d0e <_read+0x28>
 8001cf8:	f3af 8000 	nop.w
 8001cfc:	4601      	mov	r1, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	60ba      	str	r2, [r7, #8]
 8001d04:	b2ca      	uxtb	r2, r1
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbf0      	blt.n	8001cf8 <_read+0x12>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_close>:
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <_fstat>:
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <_isatty>:
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <_lseek>:
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	2300      	movs	r3, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <_sbrk>:
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <_sbrk+0x5c>)
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <_sbrk+0x60>)
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <_sbrk+0x22>
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <_sbrk+0x64>)
 8001d9e:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <_sbrk+0x68>)
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d207      	bcs.n	8001dc0 <_sbrk+0x40>
 8001db0:	f004 fd1a 	bl	80067e8 <__errno>
 8001db4:	4603      	mov	r3, r0
 8001db6:	220c      	movs	r2, #12
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	e009      	b.n	8001dd4 <_sbrk+0x54>
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <_sbrk+0x64>)
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20005000 	.word	0x20005000
 8001de0:	00000400 	.word	0x00000400
 8001de4:	200004c4 	.word	0x200004c4
 8001de8:	20000618 	.word	0x20000618

08001dec <SystemInit>:
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001df8:	f7ff fff8 	bl	8001dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480b      	ldr	r0, [pc, #44]	; (8001e2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dfe:	490c      	ldr	r1, [pc, #48]	; (8001e30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e14:	4c09      	ldr	r4, [pc, #36]	; (8001e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e22:	f004 fce7 	bl	80067f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e26:	f7ff f855 	bl	8000ed4 <main>
  bx lr
 8001e2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e30:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e34:	0800a408 	.word	0x0800a408
  ldr r2, =_sbss
 8001e38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e3c:	20000618 	.word	0x20000618

08001e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <ADC1_2_IRQHandler>
	...

08001e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_Init+0x28>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_Init+0x28>)
 8001e4e:	f043 0310 	orr.w	r3, r3, #16
 8001e52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f000 fb6f 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5a:	200f      	movs	r0, #15
 8001e5c:	f000 f808 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e60:	f7ff fc92 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x54>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x58>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fb8b 	bl	80025aa <HAL_SYSTICK_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00e      	b.n	8001ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d80a      	bhi.n	8001eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f000 fb4f 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <HAL_InitTick+0x5c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000010 	.word	0x20000010
 8001ecc:	2000000c 	.word	0x2000000c

08001ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_IncTick+0x1c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_IncTick+0x20>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a03      	ldr	r2, [pc, #12]	; (8001ef0 <HAL_IncTick+0x20>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	20000010 	.word	0x20000010
 8001ef0:	200004c8 	.word	0x200004c8

08001ef4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <HAL_GetTick+0x10>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	200004c8 	.word	0x200004c8

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff fff0 	bl	8001ef4 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffe0 	bl	8001ef4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000010 	.word	0x20000010

08001f50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0be      	b.n	80020f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fc2c 	bl	80017ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f9ab 	bl	80022f0 <ADC_ConversionStop_Disable>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8099 	bne.w	80020de <HAL_ADC_Init+0x18e>
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 8095 	bne.w	80020de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fbc:	f023 0302 	bic.w	r3, r3, #2
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7b1b      	ldrb	r3, [r3, #12]
 8001fd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe8:	d003      	beq.n	8001ff2 <HAL_ADC_Init+0xa2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_ADC_Init+0xa8>
 8001ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_Init+0xaa>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7d1b      	ldrb	r3, [r3, #20]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d119      	bne.n	800203c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7b1b      	ldrb	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	3b01      	subs	r3, #1
 8002016:	035a      	lsls	r2, r3, #13
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e00b      	b.n	800203c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_ADC_Init+0x1a8>)
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	430b      	orrs	r3, r1
 8002062:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206c:	d003      	beq.n	8002076 <HAL_ADC_Init+0x126>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d104      	bne.n	8002080 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	3b01      	subs	r3, #1
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	430a      	orrs	r2, r1
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_ADC_Init+0x1ac>)
 800209c:	4013      	ands	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d10b      	bne.n	80020bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ba:	e018      	b.n	80020ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f023 0312 	bic.w	r3, r3, #18
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020dc:	e007      	b.n	80020ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	ffe1f7fd 	.word	0xffe1f7fd
 80020fc:	ff1f0efe 	.word	0xff1f0efe

08002100 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x20>
 800211c:	2302      	movs	r3, #2
 800211e:	e0dc      	b.n	80022da <HAL_ADC_ConfigChannel+0x1da>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b06      	cmp	r3, #6
 800212e:	d81c      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	3b05      	subs	r3, #5
 8002142:	221f      	movs	r2, #31
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	4019      	ands	r1, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b05      	subs	r3, #5
 800215c:	fa00 f203 	lsl.w	r2, r0, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	; 0x34
 8002168:	e03c      	b.n	80021e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d81c      	bhi.n	80021ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	3b23      	subs	r3, #35	; 0x23
 8002184:	221f      	movs	r2, #31
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	4019      	ands	r1, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b23      	subs	r3, #35	; 0x23
 800219e:	fa00 f203 	lsl.w	r2, r0, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
 80021aa:	e01b      	b.n	80021e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3b41      	subs	r3, #65	; 0x41
 80021be:	221f      	movs	r2, #31
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4019      	ands	r1, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3b41      	subs	r3, #65	; 0x41
 80021d8:	fa00 f203 	lsl.w	r2, r0, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	d91c      	bls.n	8002226 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68d9      	ldr	r1, [r3, #12]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	3b1e      	subs	r3, #30
 80021fe:	2207      	movs	r2, #7
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	4019      	ands	r1, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6898      	ldr	r0, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	3b1e      	subs	r3, #30
 8002218:	fa00 f203 	lsl.w	r2, r0, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	e019      	b.n	800225a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6919      	ldr	r1, [r3, #16]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	2207      	movs	r2, #7
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	4019      	ands	r1, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6898      	ldr	r0, [r3, #8]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d003      	beq.n	800226a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002266:	2b11      	cmp	r3, #17
 8002268:	d132      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d125      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d126      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002290:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b10      	cmp	r3, #16
 8002298:	d11a      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a13      	ldr	r2, [pc, #76]	; (80022ec <HAL_ADC_ConfigChannel+0x1ec>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9a      	lsrs	r2, r3, #18
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022b0:	e002      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f9      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x1b2>
 80022be:	e007      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	40012400 	.word	0x40012400
 80022e8:	20000008 	.word	0x20000008
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d12e      	bne.n	8002368 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800231a:	f7ff fdeb 	bl	8001ef4 <HAL_GetTick>
 800231e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002320:	e01b      	b.n	800235a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002322:	f7ff fde7 	bl	8001ef4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d914      	bls.n	800235a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d10d      	bne.n	800235a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f043 0210 	orr.w	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e007      	b.n	800236a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d0dc      	beq.n	8002322 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4906      	ldr	r1, [pc, #24]	; (800240c <__NVIC_EnableIRQ+0x34>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024cc:	f3bf 8f4f 	dsb	sy
}
 80024d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <__NVIC_SystemReset+0x24>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024da:	4904      	ldr	r1, [pc, #16]	; (80024ec <__NVIC_SystemReset+0x24>)
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_SystemReset+0x28>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024e2:	f3bf 8f4f 	dsb	sy
}
 80024e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <__NVIC_SystemReset+0x20>
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	05fa0004 	.word	0x05fa0004

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff7a 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff17 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff2c 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff7a 	bl	8002464 <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff49 	bl	8002410 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff1f 	bl	80023d8 <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80025a6:	f7ff ff8f 	bl	80024c8 <__NVIC_SystemReset>

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ff9e 	bl	80024f4 <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b08b      	sub	sp, #44	; 0x2c
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d6:	e169      	b.n	80028ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025d8:	2201      	movs	r2, #1
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 8158 	bne.w	80028a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a9a      	ldr	r2, [pc, #616]	; (8002864 <HAL_GPIO_Init+0x2a0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d05e      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002600:	4a98      	ldr	r2, [pc, #608]	; (8002864 <HAL_GPIO_Init+0x2a0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d875      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002606:	4a98      	ldr	r2, [pc, #608]	; (8002868 <HAL_GPIO_Init+0x2a4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d058      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 800260c:	4a96      	ldr	r2, [pc, #600]	; (8002868 <HAL_GPIO_Init+0x2a4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d86f      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002612:	4a96      	ldr	r2, [pc, #600]	; (800286c <HAL_GPIO_Init+0x2a8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d052      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002618:	4a94      	ldr	r2, [pc, #592]	; (800286c <HAL_GPIO_Init+0x2a8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d869      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800261e:	4a94      	ldr	r2, [pc, #592]	; (8002870 <HAL_GPIO_Init+0x2ac>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d04c      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002624:	4a92      	ldr	r2, [pc, #584]	; (8002870 <HAL_GPIO_Init+0x2ac>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d863      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800262a:	4a92      	ldr	r2, [pc, #584]	; (8002874 <HAL_GPIO_Init+0x2b0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d046      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002630:	4a90      	ldr	r2, [pc, #576]	; (8002874 <HAL_GPIO_Init+0x2b0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d85d      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002636:	2b12      	cmp	r3, #18
 8002638:	d82a      	bhi.n	8002690 <HAL_GPIO_Init+0xcc>
 800263a:	2b12      	cmp	r3, #18
 800263c:	d859      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <HAL_GPIO_Init+0x80>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	080026bf 	.word	0x080026bf
 8002648:	08002699 	.word	0x08002699
 800264c:	080026ab 	.word	0x080026ab
 8002650:	080026ed 	.word	0x080026ed
 8002654:	080026f3 	.word	0x080026f3
 8002658:	080026f3 	.word	0x080026f3
 800265c:	080026f3 	.word	0x080026f3
 8002660:	080026f3 	.word	0x080026f3
 8002664:	080026f3 	.word	0x080026f3
 8002668:	080026f3 	.word	0x080026f3
 800266c:	080026f3 	.word	0x080026f3
 8002670:	080026f3 	.word	0x080026f3
 8002674:	080026f3 	.word	0x080026f3
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026f3 	.word	0x080026f3
 8002680:	080026f3 	.word	0x080026f3
 8002684:	080026f3 	.word	0x080026f3
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026b5 	.word	0x080026b5
 8002690:	4a79      	ldr	r2, [pc, #484]	; (8002878 <HAL_GPIO_Init+0x2b4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002696:	e02c      	b.n	80026f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e029      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	3304      	adds	r3, #4
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e024      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	3308      	adds	r3, #8
 80026b0:	623b      	str	r3, [r7, #32]
          break;
 80026b2:	e01f      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	330c      	adds	r3, #12
 80026ba:	623b      	str	r3, [r7, #32]
          break;
 80026bc:	e01a      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026c6:	2304      	movs	r3, #4
 80026c8:	623b      	str	r3, [r7, #32]
          break;
 80026ca:	e013      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d4:	2308      	movs	r3, #8
 80026d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	611a      	str	r2, [r3, #16]
          break;
 80026de:	e009      	b.n	80026f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e0:	2308      	movs	r3, #8
 80026e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	615a      	str	r2, [r3, #20]
          break;
 80026ea:	e003      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
          break;
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          break;
 80026f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2bff      	cmp	r3, #255	; 0xff
 80026f8:	d801      	bhi.n	80026fe <HAL_GPIO_Init+0x13a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	e001      	b.n	8002702 <HAL_GPIO_Init+0x13e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d802      	bhi.n	8002710 <HAL_GPIO_Init+0x14c>
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	e002      	b.n	8002716 <HAL_GPIO_Init+0x152>
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	3b08      	subs	r3, #8
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	210f      	movs	r1, #15
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	6a39      	ldr	r1, [r7, #32]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	431a      	orrs	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80b1 	beq.w	80028a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_GPIO_Init+0x2b8>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_GPIO_Init+0x2b8>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_GPIO_Init+0x2b8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800275c:	4a48      	ldr	r2, [pc, #288]	; (8002880 <HAL_GPIO_Init+0x2bc>)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a40      	ldr	r2, [pc, #256]	; (8002884 <HAL_GPIO_Init+0x2c0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_GPIO_Init+0x1ec>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <HAL_GPIO_Init+0x2c4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00d      	beq.n	80027ac <HAL_GPIO_Init+0x1e8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3e      	ldr	r2, [pc, #248]	; (800288c <HAL_GPIO_Init+0x2c8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <HAL_GPIO_Init+0x1e4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3d      	ldr	r2, [pc, #244]	; (8002890 <HAL_GPIO_Init+0x2cc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_GPIO_Init+0x1e0>
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e004      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e002      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027b0:	2300      	movs	r3, #0
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	f002 0203 	and.w	r2, r2, #3
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	4093      	lsls	r3, r2
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027c2:	492f      	ldr	r1, [pc, #188]	; (8002880 <HAL_GPIO_Init+0x2bc>)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	492c      	ldr	r1, [pc, #176]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4928      	ldr	r1, [pc, #160]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	60cb      	str	r3, [r1, #12]
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	43db      	mvns	r3, r3
 800281a:	491e      	ldr	r1, [pc, #120]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800281c:	4013      	ands	r3, r2
 800281e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4918      	ldr	r1, [pc, #96]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	43db      	mvns	r3, r3
 8002842:	4914      	ldr	r1, [pc, #80]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002844:	4013      	ands	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d021      	beq.n	8002898 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	e021      	b.n	80028a6 <HAL_GPIO_Init+0x2e2>
 8002862:	bf00      	nop
 8002864:	10320000 	.word	0x10320000
 8002868:	10310000 	.word	0x10310000
 800286c:	10220000 	.word	0x10220000
 8002870:	10210000 	.word	0x10210000
 8002874:	10120000 	.word	0x10120000
 8002878:	10110000 	.word	0x10110000
 800287c:	40021000 	.word	0x40021000
 8002880:	40010000 	.word	0x40010000
 8002884:	40010800 	.word	0x40010800
 8002888:	40010c00 	.word	0x40010c00
 800288c:	40011000 	.word	0x40011000
 8002890:	40011400 	.word	0x40011400
 8002894:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_GPIO_Init+0x304>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	43db      	mvns	r3, r3
 80028a0:	4909      	ldr	r1, [pc, #36]	; (80028c8 <HAL_GPIO_Init+0x304>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3301      	adds	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f47f ae8e 	bne.w	80025d8 <HAL_GPIO_Init+0x14>
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	372c      	adds	r7, #44	; 0x2c
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40010400 	.word	0x40010400

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e12b      	b.n	8002b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe ffc8 	bl	80018b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	; 0x24
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800294e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800295e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002960:	f001 fbf0 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8002964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a81      	ldr	r2, [pc, #516]	; (8002b70 <HAL_I2C_Init+0x274>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d807      	bhi.n	8002980 <HAL_I2C_Init+0x84>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a80      	ldr	r2, [pc, #512]	; (8002b74 <HAL_I2C_Init+0x278>)
 8002974:	4293      	cmp	r3, r2
 8002976:	bf94      	ite	ls
 8002978:	2301      	movls	r3, #1
 800297a:	2300      	movhi	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e006      	b.n	800298e <HAL_I2C_Init+0x92>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a7d      	ldr	r2, [pc, #500]	; (8002b78 <HAL_I2C_Init+0x27c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	bf94      	ite	ls
 8002988:	2301      	movls	r3, #1
 800298a:	2300      	movhi	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0e7      	b.n	8002b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a78      	ldr	r2, [pc, #480]	; (8002b7c <HAL_I2C_Init+0x280>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0c9b      	lsrs	r3, r3, #18
 80029a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a6a      	ldr	r2, [pc, #424]	; (8002b70 <HAL_I2C_Init+0x274>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d802      	bhi.n	80029d0 <HAL_I2C_Init+0xd4>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	3301      	adds	r3, #1
 80029ce:	e009      	b.n	80029e4 <HAL_I2C_Init+0xe8>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	4a69      	ldr	r2, [pc, #420]	; (8002b80 <HAL_I2C_Init+0x284>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	099b      	lsrs	r3, r3, #6
 80029e2:	3301      	adds	r3, #1
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	495c      	ldr	r1, [pc, #368]	; (8002b70 <HAL_I2C_Init+0x274>)
 8002a00:	428b      	cmp	r3, r1
 8002a02:	d819      	bhi.n	8002a38 <HAL_I2C_Init+0x13c>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e59      	subs	r1, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a18:	400b      	ands	r3, r1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_I2C_Init+0x138>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1e59      	subs	r1, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a32:	e051      	b.n	8002ad8 <HAL_I2C_Init+0x1dc>
 8002a34:	2304      	movs	r3, #4
 8002a36:	e04f      	b.n	8002ad8 <HAL_I2C_Init+0x1dc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d111      	bne.n	8002a64 <HAL_I2C_Init+0x168>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e58      	subs	r0, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e012      	b.n	8002a8a <HAL_I2C_Init+0x18e>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	0099      	lsls	r1, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Init+0x196>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e022      	b.n	8002ad8 <HAL_I2C_Init+0x1dc>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10e      	bne.n	8002ab8 <HAL_I2C_Init+0x1bc>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1e58      	subs	r0, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	440b      	add	r3, r1
 8002aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab6:	e00f      	b.n	8002ad8 <HAL_I2C_Init+0x1dc>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e58      	subs	r0, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	0099      	lsls	r1, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	6809      	ldr	r1, [r1, #0]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6911      	ldr	r1, [r2, #16]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68d2      	ldr	r2, [r2, #12]
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	000186a0 	.word	0x000186a0
 8002b74:	001e847f 	.word	0x001e847f
 8002b78:	003d08ff 	.word	0x003d08ff
 8002b7c:	431bde83 	.word	0x431bde83
 8002b80:	10624dd3 	.word	0x10624dd3

08002b84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	817b      	strh	r3, [r7, #10]
 8002b96:	460b      	mov	r3, r1
 8002b98:	813b      	strh	r3, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b9e:	f7ff f9a9 	bl	8001ef4 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	f040 80d9 	bne.w	8002d64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2319      	movs	r3, #25
 8002bb8:	2201      	movs	r2, #1
 8002bba:	496d      	ldr	r1, [pc, #436]	; (8002d70 <HAL_I2C_Mem_Write+0x1ec>)
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fcc1 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0cc      	b.n	8002d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_I2C_Mem_Write+0x56>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e0c5      	b.n	8002d66 <HAL_I2C_Mem_Write+0x1e2>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d007      	beq.n	8002c00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2221      	movs	r2, #33	; 0x21
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2240      	movs	r2, #64	; 0x40
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a3a      	ldr	r2, [r7, #32]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a4d      	ldr	r2, [pc, #308]	; (8002d74 <HAL_I2C_Mem_Write+0x1f0>)
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c42:	88f8      	ldrh	r0, [r7, #6]
 8002c44:	893a      	ldrh	r2, [r7, #8]
 8002c46:	8979      	ldrh	r1, [r7, #10]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4603      	mov	r3, r0
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 faf8 	bl	8003248 <I2C_RequestMemoryWrite>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d052      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e081      	b.n	8002d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fd86 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d107      	bne.n	8002c8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e06b      	b.n	8002d66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d11b      	bne.n	8002d04 <HAL_I2C_Mem_Write+0x180>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d017      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1aa      	bne.n	8002c62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fd79 	bl	8003808 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d107      	bne.n	8002d34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e016      	b.n	8002d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e000      	b.n	8002d66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	00100002 	.word	0x00100002
 8002d74:	ffff0000 	.word	0xffff0000

08002d78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08c      	sub	sp, #48	; 0x30
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	817b      	strh	r3, [r7, #10]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	813b      	strh	r3, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d96:	f7ff f8ad 	bl	8001ef4 <HAL_GetTick>
 8002d9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	f040 8244 	bne.w	8003232 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2319      	movs	r3, #25
 8002db0:	2201      	movs	r2, #1
 8002db2:	4982      	ldr	r1, [pc, #520]	; (8002fbc <HAL_I2C_Mem_Read+0x244>)
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fbc5 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e237      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Mem_Read+0x5a>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e230      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d007      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2222      	movs	r2, #34	; 0x22
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2240      	movs	r2, #64	; 0x40
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a62      	ldr	r2, [pc, #392]	; (8002fc0 <HAL_I2C_Mem_Read+0x248>)
 8002e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e3a:	88f8      	ldrh	r0, [r7, #6]
 8002e3c:	893a      	ldrh	r2, [r7, #8]
 8002e3e:	8979      	ldrh	r1, [r7, #10]
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	4603      	mov	r3, r0
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fa92 	bl	8003374 <I2C_RequestMemoryRead>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1ec      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d113      	bne.n	8002e8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e1c0      	b.n	800320c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d11e      	bne.n	8002ed0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea2:	b672      	cpsid	i
}
 8002ea4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ecc:	b662      	cpsie	i
}
 8002ece:	e035      	b.n	8002f3c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d11e      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
}
 8002eea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f12:	b662      	cpsie	i
}
 8002f14:	e012      	b.n	8002f3c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f24:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f3c:	e166      	b.n	800320c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	f200 811f 	bhi.w	8003186 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d123      	bne.n	8002f98 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fc9f 	bl	8003898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e167      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f96:	e139      	b.n	800320c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d152      	bne.n	8003046 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4906      	ldr	r1, [pc, #24]	; (8002fc4 <HAL_I2C_Mem_Read+0x24c>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 faca 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e13c      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
 8002fba:	bf00      	nop
 8002fbc:	00100002 	.word	0x00100002
 8002fc0:	ffff0000 	.word	0xffff0000
 8002fc4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc8:	b672      	cpsid	i
}
 8002fca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800300e:	b662      	cpsie	i
}
 8003010:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003044:	e0e2      	b.n	800320c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	2200      	movs	r2, #0
 800304e:	497b      	ldr	r1, [pc, #492]	; (800323c <HAL_I2C_Mem_Read+0x4c4>)
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa77 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0e9      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003070:	b672      	cpsid	i
}
 8003072:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030a6:	4b66      	ldr	r3, [pc, #408]	; (8003240 <HAL_I2C_Mem_Read+0x4c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	08db      	lsrs	r3, r3, #3
 80030ac:	4a65      	ldr	r2, [pc, #404]	; (8003244 <HAL_I2C_Mem_Read+0x4cc>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0a1a      	lsrs	r2, r3, #8
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00da      	lsls	r2, r3, #3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d118      	bne.n	80030fe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030ee:	b662      	cpsie	i
}
 80030f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e09a      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d1d9      	bne.n	80030c0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800314e:	b662      	cpsie	i
}
 8003150:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003184:	e042      	b.n	800320c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fb84 	bl	8003898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e04c      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d118      	bne.n	800320c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	f47f ae94 	bne.w	8002f3e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3728      	adds	r7, #40	; 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	00010004 	.word	0x00010004
 8003240:	20000008 	.word	0x20000008
 8003244:	14f8b589 	.word	0x14f8b589

08003248 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4603      	mov	r3, r0
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	460b      	mov	r3, r1
 800325c:	813b      	strh	r3, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2200      	movs	r2, #0
 800327a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f960 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003298:	d103      	bne.n	80032a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e05f      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	492d      	ldr	r1, [pc, #180]	; (8003370 <I2C_RequestMemoryWrite+0x128>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f9bb 	bl	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e04c      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	6a39      	ldr	r1, [r7, #32]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fa46 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d107      	bne.n	800330a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e02b      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003314:	893b      	ldrh	r3, [r7, #8]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	611a      	str	r2, [r3, #16]
 800331e:	e021      	b.n	8003364 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	b29b      	uxth	r3, r3
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fa20 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b04      	cmp	r3, #4
 8003344:	d107      	bne.n	8003356 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e005      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800335a:	893b      	ldrh	r3, [r7, #8]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8c2 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d4:	d103      	bne.n	80033de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0aa      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	4952      	ldr	r1, [pc, #328]	; (8003540 <I2C_RequestMemoryRead+0x1cc>)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f91d 	bl	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e097      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f9a8 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d107      	bne.n	8003446 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e076      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003450:	893b      	ldrh	r3, [r7, #8]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	e021      	b.n	80034a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	b29b      	uxth	r3, r3
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f982 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e050      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003496:	893b      	ldrh	r3, [r7, #8]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	6a39      	ldr	r1, [r7, #32]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f967 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e035      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f82b 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d103      	bne.n	800350c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e013      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	6a3a      	ldr	r2, [r7, #32]
 8003524:	4906      	ldr	r1, [pc, #24]	; (8003540 <I2C_RequestMemoryRead+0x1cc>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f886 	bl	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	00010002 	.word	0x00010002

08003544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003554:	e048      	b.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d044      	beq.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe fcc9 	bl	8001ef4 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d139      	bne.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d10d      	bne.n	800359a <I2C_WaitOnFlagUntilTimeout+0x56>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	43da      	mvns	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	e00c      	b.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	43da      	mvns	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4013      	ands	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d116      	bne.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e023      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10d      	bne.n	800360e <I2C_WaitOnFlagUntilTimeout+0xca>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	43da      	mvns	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	e00c      	b.n	8003628 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d093      	beq.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003646:	e071      	b.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d123      	bne.n	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e067      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d041      	beq.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a8:	f7fe fc24 	bl	8001ef4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d302      	bcc.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d136      	bne.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10c      	bne.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	e00b      	b.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	43da      	mvns	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4013      	ands	r3, r2
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e021      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10c      	bne.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e00b      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f af6d 	bne.w	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003784:	e034      	b.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f8e3 	bl	8003952 <I2C_IsAcknowledgeFailed>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e034      	b.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d028      	beq.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe fba9 	bl	8001ef4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11d      	bne.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d016      	beq.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e007      	b.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b80      	cmp	r3, #128	; 0x80
 80037fc:	d1c3      	bne.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003814:	e034      	b.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f89b 	bl	8003952 <I2C_IsAcknowledgeFailed>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e034      	b.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d028      	beq.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fe fb61 	bl	8001ef4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d11d      	bne.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d016      	beq.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e007      	b.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d1c3      	bne.n	8003816 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a4:	e049      	b.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d119      	bne.n	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0210 	mvn.w	r2, #16
 80038bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e030      	b.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e8:	f7fe fb04 	bl	8001ef4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d302      	bcc.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11d      	bne.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d016      	beq.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e007      	b.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d1ae      	bne.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003968:	d11b      	bne.n	80039a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003972:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e272      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8087 	beq.w	8003ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d0:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d00c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039dc:	4b8f      	ldr	r3, [pc, #572]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d112      	bne.n	8003a0e <HAL_RCC_OscConfig+0x5e>
 80039e8:	4b8c      	ldr	r3, [pc, #560]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d10b      	bne.n	8003a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f6:	4b89      	ldr	r3, [pc, #548]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d06c      	beq.n	8003adc <HAL_RCC_OscConfig+0x12c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d168      	bne.n	8003adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e24c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x76>
 8003a18:	4b80      	ldr	r3, [pc, #512]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a7f      	ldr	r2, [pc, #508]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e02e      	b.n	8003a84 <HAL_RCC_OscConfig+0xd4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x98>
 8003a2e:	4b7b      	ldr	r3, [pc, #492]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7a      	ldr	r2, [pc, #488]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b78      	ldr	r3, [pc, #480]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a77      	ldr	r2, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e01d      	b.n	8003a84 <HAL_RCC_OscConfig+0xd4>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0xbc>
 8003a52:	4b72      	ldr	r3, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a71      	ldr	r2, [pc, #452]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0xd4>
 8003a6c:	4b6b      	ldr	r3, [pc, #428]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a6a      	ldr	r2, [pc, #424]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b68      	ldr	r3, [pc, #416]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a67      	ldr	r2, [pc, #412]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fa32 	bl	8001ef4 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fe fa2e 	bl	8001ef4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e200      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0xe4>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fa1e 	bl	8001ef4 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fe fa1a 	bl	8001ef4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1ec      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x10c>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aea:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003af6:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d11c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x18c>
 8003b02:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x176>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e1c0      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4939      	ldr	r1, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	e03a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fe f9d3 	bl	8001ef4 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fe f9cf 	bl	8001ef4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e1a1      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4927      	ldr	r1, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
 8003b84:	e015      	b.n	8003bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fe f9b2 	bl	8001ef4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fe f9ae 	bl	8001ef4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e180      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03a      	beq.n	8003c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d019      	beq.n	8003bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fe f992 	bl	8001ef4 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fe f98e 	bl	8001ef4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e160      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f000 face 	bl	8004194 <RCC_Delay>
 8003bf8:	e01c      	b.n	8003c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_RCC_OscConfig+0x274>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7fe f978 	bl	8001ef4 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c06:	e00f      	b.n	8003c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fe f974 	bl	8001ef4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d908      	bls.n	8003c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e146      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	42420000 	.word	0x42420000
 8003c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c28:	4b92      	ldr	r3, [pc, #584]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e9      	bne.n	8003c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a6 	beq.w	8003d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c46:	4b8b      	ldr	r3, [pc, #556]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c52:	4b88      	ldr	r3, [pc, #544]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4a87      	ldr	r2, [pc, #540]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	61d3      	str	r3, [r2, #28]
 8003c5e:	4b85      	ldr	r3, [pc, #532]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b82      	ldr	r3, [pc, #520]	; (8003e78 <HAL_RCC_OscConfig+0x4c8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d118      	bne.n	8003cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	; (8003e78 <HAL_RCC_OscConfig+0x4c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7e      	ldr	r2, [pc, #504]	; (8003e78 <HAL_RCC_OscConfig+0x4c8>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fe f935 	bl	8001ef4 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fe f931 	bl	8001ef4 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b64      	cmp	r3, #100	; 0x64
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e103      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	4b75      	ldr	r3, [pc, #468]	; (8003e78 <HAL_RCC_OscConfig+0x4c8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x312>
 8003cb4:	4b6f      	ldr	r3, [pc, #444]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4a6e      	ldr	r2, [pc, #440]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6213      	str	r3, [r2, #32]
 8003cc0:	e02d      	b.n	8003d1e <HAL_RCC_OscConfig+0x36e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x334>
 8003cca:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4a69      	ldr	r2, [pc, #420]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	6213      	str	r3, [r2, #32]
 8003cd6:	4b67      	ldr	r3, [pc, #412]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a66      	ldr	r2, [pc, #408]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	6213      	str	r3, [r2, #32]
 8003ce2:	e01c      	b.n	8003d1e <HAL_RCC_OscConfig+0x36e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d10c      	bne.n	8003d06 <HAL_RCC_OscConfig+0x356>
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4a60      	ldr	r2, [pc, #384]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	6213      	str	r3, [r2, #32]
 8003cf8:	4b5e      	ldr	r3, [pc, #376]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4a5d      	ldr	r2, [pc, #372]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6213      	str	r3, [r2, #32]
 8003d04:	e00b      	b.n	8003d1e <HAL_RCC_OscConfig+0x36e>
 8003d06:	4b5b      	ldr	r3, [pc, #364]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4a5a      	ldr	r2, [pc, #360]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6213      	str	r3, [r2, #32]
 8003d12:	4b58      	ldr	r3, [pc, #352]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4a57      	ldr	r2, [pc, #348]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d015      	beq.n	8003d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d26:	f7fe f8e5 	bl	8001ef4 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fe f8e1 	bl	8001ef4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e0b1      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	4b4b      	ldr	r3, [pc, #300]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ee      	beq.n	8003d2e <HAL_RCC_OscConfig+0x37e>
 8003d50:	e014      	b.n	8003d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fe f8cf 	bl	8001ef4 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fe f8cb 	bl	8001ef4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e09b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d70:	4b40      	ldr	r3, [pc, #256]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ee      	bne.n	8003d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b3c      	ldr	r3, [pc, #240]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4a3b      	ldr	r2, [pc, #236]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8087 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d98:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d061      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d146      	bne.n	8003e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe f89f 	bl	8001ef4 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe f89b 	bl	8001ef4 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e06d      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dcc:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d108      	bne.n	8003df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4921      	ldr	r1, [pc, #132]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a19      	ldr	r1, [r3, #32]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	430b      	orrs	r3, r1
 8003e06:	491b      	ldr	r1, [pc, #108]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe f86f 	bl	8001ef4 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fe f86b 	bl	8001ef4 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e03d      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x46a>
 8003e38:	e035      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe f858 	bl	8001ef4 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fe f854 	bl	8001ef4 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e026      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x498>
 8003e66:	e01e      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e019      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_OscConfig+0x500>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000

08003eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0d0      	b.n	800406a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d910      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 0207 	bic.w	r2, r3, #7
 8003ede:	4965      	ldr	r1, [pc, #404]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d040      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d115      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e073      	b.n	800406a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06b      	b.n	800406a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f92:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f023 0203 	bic.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4936      	ldr	r1, [pc, #216]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa4:	f7fd ffa6 	bl	8001ef4 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fac:	f7fd ffa2 	bl	8001ef4 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e053      	b.n	800406a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 020c 	and.w	r2, r3, #12
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1eb      	bne.n	8003fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d210      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 0207 	bic.w	r2, r3, #7
 8003fea:	4922      	ldr	r1, [pc, #136]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1cc>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1d0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd ff04 	bl	8001e70 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40022000 	.word	0x40022000
 8004078:	40021000 	.word	0x40021000
 800407c:	08009fa8 	.word	0x08009fa8
 8004080:	20000008 	.word	0x20000008
 8004084:	2000000c 	.word	0x2000000c

08004088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040a2:	4b1e      	ldr	r3, [pc, #120]	; (800411c <HAL_RCC_GetSysClockFreq+0x94>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d002      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x30>
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d003      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x36>
 80040b6:	e027      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040b8:	4b19      	ldr	r3, [pc, #100]	; (8004120 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ba:	613b      	str	r3, [r7, #16]
      break;
 80040bc:	e027      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	0c9b      	lsrs	r3, r3, #18
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d010      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <HAL_RCC_GetSysClockFreq+0x94>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	0c5b      	lsrs	r3, r3, #17
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	4a11      	ldr	r2, [pc, #68]	; (8004128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040e2:	5cd3      	ldrb	r3, [r2, r3]
 80040e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ea:	fb03 f202 	mul.w	r2, r3, r2
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e004      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a0c      	ldr	r2, [pc, #48]	; (800412c <HAL_RCC_GetSysClockFreq+0xa4>)
 80040fc:	fb02 f303 	mul.w	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	613b      	str	r3, [r7, #16]
      break;
 8004106:	e002      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetSysClockFreq+0x98>)
 800410a:	613b      	str	r3, [r7, #16]
      break;
 800410c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410e:	693b      	ldr	r3, [r7, #16]
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	007a1200 	.word	0x007a1200
 8004124:	08009fc0 	.word	0x08009fc0
 8004128:	08009fd0 	.word	0x08009fd0
 800412c:	003d0900 	.word	0x003d0900

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b02      	ldr	r3, [pc, #8]	; (8004140 <HAL_RCC_GetHCLKFreq+0x10>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	20000008 	.word	0x20000008

08004144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004148:	f7ff fff2 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4903      	ldr	r1, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000
 8004168:	08009fb8 	.word	0x08009fb8

0800416c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004170:	f7ff ffde 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004174:	4602      	mov	r2, r0
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	0adb      	lsrs	r3, r3, #11
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	4903      	ldr	r1, [pc, #12]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	08009fb8 	.word	0x08009fb8

08004194 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <RCC_Delay+0x34>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <RCC_Delay+0x38>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0a5b      	lsrs	r3, r3, #9
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	fb02 f303 	mul.w	r3, r2, r3
 80041ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041b0:	bf00      	nop
  }
  while (Delay --);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1e5a      	subs	r2, r3, #1
 80041b6:	60fa      	str	r2, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f9      	bne.n	80041b0 <RCC_Delay+0x1c>
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	20000008 	.word	0x20000008
 80041cc:	10624dd3 	.word	0x10624dd3

080041d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d07d      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041ec:	2300      	movs	r3, #0
 80041ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f0:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	4a4b      	ldr	r2, [pc, #300]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004206:	61d3      	str	r3, [r2, #28]
 8004208:	4b49      	ldr	r3, [pc, #292]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b46      	ldr	r3, [pc, #280]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d118      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a42      	ldr	r2, [pc, #264]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004230:	f7fd fe60 	bl	8001ef4 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	e008      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004238:	f7fd fe5c 	bl	8001ef4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e06d      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424a:	4b3a      	ldr	r3, [pc, #232]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004256:	4b36      	ldr	r3, [pc, #216]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02e      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	429a      	cmp	r2, r3
 8004272:	d027      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004274:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800427e:	4b2e      	ldr	r3, [pc, #184]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004284:	4b2c      	ldr	r3, [pc, #176]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800428a:	4a29      	ldr	r2, [pc, #164]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d014      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7fd fe2b 	bl	8001ef4 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fd fe27 	bl	8001ef4 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e036      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ee      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c4:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4917      	ldr	r1, [pc, #92]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	4a13      	ldr	r2, [pc, #76]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	490b      	ldr	r1, [pc, #44]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	4313      	orrs	r3, r2
 8004304:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	4904      	ldr	r1, [pc, #16]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000
 8004334:	40007000 	.word	0x40007000
 8004338:	42420440 	.word	0x42420440

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd fae6 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 fd2e 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e041      	b.n	8004470 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f839 	bl	8004478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 fcdf 	bl	8004ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr
	...

0800448c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <HAL_TIM_PWM_Start+0x24>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	bf14      	ite	ne
 80044a8:	2301      	movne	r3, #1
 80044aa:	2300      	moveq	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e022      	b.n	80044f6 <HAL_TIM_PWM_Start+0x6a>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d109      	bne.n	80044ca <HAL_TIM_PWM_Start+0x3e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	bf14      	ite	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	2300      	moveq	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e015      	b.n	80044f6 <HAL_TIM_PWM_Start+0x6a>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d109      	bne.n	80044e4 <HAL_TIM_PWM_Start+0x58>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e008      	b.n	80044f6 <HAL_TIM_PWM_Start+0x6a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e05e      	b.n	80045bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <HAL_TIM_PWM_Start+0x82>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450c:	e013      	b.n	8004536 <HAL_TIM_PWM_Start+0xaa>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d104      	bne.n	800451e <HAL_TIM_PWM_Start+0x92>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800451c:	e00b      	b.n	8004536 <HAL_TIM_PWM_Start+0xaa>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start+0xa2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800452c:	e003      	b.n	8004536 <HAL_TIM_PWM_Start+0xaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2201      	movs	r2, #1
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fecc 	bl	80052dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <HAL_TIM_PWM_Start+0x138>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d107      	bne.n	800455e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_TIM_PWM_Start+0x138>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_TIM_PWM_Start+0xfa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004570:	d009      	beq.n	8004586 <HAL_TIM_PWM_Start+0xfa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <HAL_TIM_PWM_Start+0x13c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_TIM_PWM_Start+0xfa>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a12      	ldr	r2, [pc, #72]	; (80045cc <HAL_TIM_PWM_Start+0x140>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d010      	beq.n	80045ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	e007      	b.n	80045ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800

080045d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e093      	b.n	800470c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fd f9cd 	bl	8001998 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004614:	f023 0307 	bic.w	r3, r3, #7
 8004618:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fbd9 	bl	8004ddc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	4313      	orrs	r3, r2
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004670:	f023 030c 	bic.w	r3, r3, #12
 8004674:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800467c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	4313      	orrs	r3, r2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	011a      	lsls	r2, r3, #4
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	031b      	lsls	r3, r3, #12
 80046a0:	4313      	orrs	r3, r2
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	4313      	orrs	r3, r2
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004724:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800472c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004734:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800473c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d110      	bne.n	8004766 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d102      	bne.n	8004750 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800474a:	7b7b      	ldrb	r3, [r7, #13]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e089      	b.n	8004868 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	e031      	b.n	80047ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d110      	bne.n	800478e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800476c:	7bbb      	ldrb	r3, [r7, #14]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004772:	7b3b      	ldrb	r3, [r7, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e075      	b.n	8004868 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800478c:	e01d      	b.n	80047ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004794:	7bbb      	ldrb	r3, [r7, #14]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800479a:	7b7b      	ldrb	r3, [r7, #13]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d102      	bne.n	80047a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047a0:	7b3b      	ldrb	r3, [r7, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e05e      	b.n	8004868 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d010      	beq.n	80047f8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80047d6:	e01f      	b.n	8004818 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2201      	movs	r2, #1
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fd7b 	bl	80052dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0202 	orr.w	r2, r2, #2
 80047f4:	60da      	str	r2, [r3, #12]
      break;
 80047f6:	e02e      	b.n	8004856 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2201      	movs	r2, #1
 80047fe:	2104      	movs	r1, #4
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fd6b 	bl	80052dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0204 	orr.w	r2, r2, #4
 8004814:	60da      	str	r2, [r3, #12]
      break;
 8004816:	e01e      	b.n	8004856 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fd5b 	bl	80052dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	2104      	movs	r1, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fd54 	bl	80052dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0202 	orr.w	r2, r2, #2
 8004842:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0204 	orr.w	r2, r2, #4
 8004852:	60da      	str	r2, [r3, #12]
      break;
 8004854:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b02      	cmp	r3, #2
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0202 	mvn.w	r2, #2
 800489c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc facc 	bl	8000e50 <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa72 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fa78 	bl	8004db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0204 	mvn.w	r2, #4
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc faa2 	bl	8000e50 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa48 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fa4e 	bl	8004db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b08      	cmp	r3, #8
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b08      	cmp	r3, #8
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0208 	mvn.w	r2, #8
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2204      	movs	r2, #4
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc fa78 	bl	8000e50 <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa1e 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa24 	bl	8004db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b10      	cmp	r3, #16
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b10      	cmp	r3, #16
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0210 	mvn.w	r2, #16
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2208      	movs	r2, #8
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fa4e 	bl	8000e50 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9f4 	bl	8004da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f9fa 	bl	8004db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0201 	mvn.w	r2, #1
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9cf 	bl	8004d92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d10e      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0c:	2b80      	cmp	r3, #128	; 0x80
 8004a0e:	d107      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fd3a 	bl	8005494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d10e      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d107      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9be 	bl	8004dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d10e      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d107      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0220 	mvn.w	r2, #32
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fd05 	bl	8005482 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e0ae      	b.n	8004bfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	f200 809f 	bhi.w	8004bec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004bed 	.word	0x08004bed
 8004abc:	08004bed 	.word	0x08004bed
 8004ac0:	08004bed 	.word	0x08004bed
 8004ac4:	08004b29 	.word	0x08004b29
 8004ac8:	08004bed 	.word	0x08004bed
 8004acc:	08004bed 	.word	0x08004bed
 8004ad0:	08004bed 	.word	0x08004bed
 8004ad4:	08004b6b 	.word	0x08004b6b
 8004ad8:	08004bed 	.word	0x08004bed
 8004adc:	08004bed 	.word	0x08004bed
 8004ae0:	08004bed 	.word	0x08004bed
 8004ae4:	08004bab 	.word	0x08004bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9d6 	bl	8004ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	619a      	str	r2, [r3, #24]
      break;
 8004b26:	e064      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fa1c 	bl	8004f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6999      	ldr	r1, [r3, #24]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	619a      	str	r2, [r3, #24]
      break;
 8004b68:	e043      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fa65 	bl	8005040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0208 	orr.w	r2, r2, #8
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0204 	bic.w	r2, r2, #4
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
      break;
 8004ba8:	e023      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 faaf 	bl	8005114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	61da      	str	r2, [r3, #28]
      break;
 8004bea:	e002      	b.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_ConfigClockSource+0x1c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0b4      	b.n	8004d8a <HAL_TIM_ConfigClockSource+0x186>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c58:	d03e      	beq.n	8004cd8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5e:	f200 8087 	bhi.w	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c66:	f000 8086 	beq.w	8004d76 <HAL_TIM_ConfigClockSource+0x172>
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	d87f      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b70      	cmp	r3, #112	; 0x70
 8004c72:	d01a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0xa6>
 8004c74:	2b70      	cmp	r3, #112	; 0x70
 8004c76:	d87b      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b60      	cmp	r3, #96	; 0x60
 8004c7a:	d050      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0x11a>
 8004c7c:	2b60      	cmp	r3, #96	; 0x60
 8004c7e:	d877      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b50      	cmp	r3, #80	; 0x50
 8004c82:	d03c      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0xfa>
 8004c84:	2b50      	cmp	r3, #80	; 0x50
 8004c86:	d873      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d058      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x13a>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d86f      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b30      	cmp	r3, #48	; 0x30
 8004c92:	d064      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b30      	cmp	r3, #48	; 0x30
 8004c96:	d86b      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d060      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d867      	bhi.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d05c      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d05a      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	e062      	b.n	8004d70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cba:	f000 faf0 	bl	800529e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	609a      	str	r2, [r3, #8]
      break;
 8004cd6:	e04f      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce8:	f000 fad9 	bl	800529e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfa:	609a      	str	r2, [r3, #8]
      break;
 8004cfc:	e03c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f000 fa50 	bl	80051b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2150      	movs	r1, #80	; 0x50
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 faa7 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004d1c:	e02c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f000 fa6e 	bl	800520c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2160      	movs	r1, #96	; 0x60
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa97 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004d3c:	e01c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 fa30 	bl	80051b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2140      	movs	r1, #64	; 0x40
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fa87 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e00c      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f000 fa7e 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004d6e:	e003      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	e000      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
	...

08004ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a29      	ldr	r2, [pc, #164]	; (8004e94 <TIM_Base_SetConfig+0xb8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_Base_SetConfig+0x30>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d007      	beq.n	8004e0c <TIM_Base_SetConfig+0x30>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <TIM_Base_SetConfig+0xbc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0x30>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <TIM_Base_SetConfig+0xc0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d108      	bne.n	8004e1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <TIM_Base_SetConfig+0xb8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00b      	beq.n	8004e3e <TIM_Base_SetConfig+0x62>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d007      	beq.n	8004e3e <TIM_Base_SetConfig+0x62>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <TIM_Base_SetConfig+0xbc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d003      	beq.n	8004e3e <TIM_Base_SetConfig+0x62>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <TIM_Base_SetConfig+0xc0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d108      	bne.n	8004e50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <TIM_Base_SetConfig+0xb8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	615a      	str	r2, [r3, #20]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800

08004ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f023 0201 	bic.w	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f023 0302 	bic.w	r3, r3, #2
 8004ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <TIM_OC1_SetConfig+0xc8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10c      	bne.n	8004f16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0308 	bic.w	r3, r3, #8
 8004f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <TIM_OC1_SetConfig+0xc8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d111      	bne.n	8004f42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00

08004f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f023 0210 	bic.w	r2, r3, #16
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0320 	bic.w	r3, r3, #32
 8004fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a1d      	ldr	r2, [pc, #116]	; (800503c <TIM_OC2_SetConfig+0xd0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d10d      	bne.n	8004fe8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a14      	ldr	r2, [pc, #80]	; (800503c <TIM_OC2_SetConfig+0xd0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d113      	bne.n	8005018 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	40012c00 	.word	0x40012c00

08005040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a1d      	ldr	r2, [pc, #116]	; (8005110 <TIM_OC3_SetConfig+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10d      	bne.n	80050ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a14      	ldr	r2, [pc, #80]	; (8005110 <TIM_OC3_SetConfig+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d113      	bne.n	80050ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40012c00 	.word	0x40012c00

08005114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800515e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	031b      	lsls	r3, r3, #12
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <TIM_OC4_SetConfig+0x98>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d109      	bne.n	8005188 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800517a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	40012c00 	.word	0x40012c00

080051b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f023 0201 	bic.w	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 030a 	bic.w	r3, r3, #10
 80051ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	031b      	lsls	r3, r3, #12
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005248:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	f043 0307 	orr.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	021a      	lsls	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	609a      	str	r2, [r3, #8]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	2201      	movs	r2, #1
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1a      	ldr	r2, [r3, #32]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	401a      	ands	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1a      	ldr	r2, [r3, #32]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005338:	2302      	movs	r3, #2
 800533a:	e046      	b.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a16      	ldr	r2, [pc, #88]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005388:	d009      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a10      	ldr	r2, [pc, #64]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10c      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800

080053e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e03d      	b.n	8005478 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e042      	b.n	800553e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fc fb61 	bl	8001b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2224      	movs	r2, #36	; 0x24
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f91c 	bl	8005728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800550e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800551e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b08a      	sub	sp, #40	; 0x28
 800554a:	af02      	add	r7, sp, #8
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b20      	cmp	r3, #32
 8005564:	d16d      	bne.n	8005642 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_UART_Transmit+0x2c>
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e066      	b.n	8005644 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2221      	movs	r2, #33	; 0x21
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005584:	f7fc fcb6 	bl	8001ef4 <HAL_GetTick>
 8005588:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	88fa      	ldrh	r2, [r7, #6]
 800558e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d108      	bne.n	80055b2 <HAL_UART_Transmit+0x6c>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d104      	bne.n	80055b2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e003      	b.n	80055ba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055ba:	e02a      	b.n	8005612 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2200      	movs	r2, #0
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f840 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e036      	b.n	8005644 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	3302      	adds	r3, #2
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	e007      	b.n	8005604 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	781a      	ldrb	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3301      	adds	r3, #1
 8005602:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1cf      	bne.n	80055bc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2200      	movs	r2, #0
 8005624:	2140      	movs	r1, #64	; 0x40
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f810 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e006      	b.n	8005644 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b090      	sub	sp, #64	; 0x40
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565c:	e050      	b.n	8005700 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d04c      	beq.n	8005700 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <UART_WaitOnFlagUntilTimeout+0x30>
 800566c:	f7fc fc42 	bl	8001ef4 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005678:	429a      	cmp	r2, r3
 800567a:	d241      	bcs.n	8005700 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800569c:	637a      	str	r2, [r7, #52]	; 0x34
 800569e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e5      	bne.n	800567c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3314      	adds	r3, #20
 80056b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	613b      	str	r3, [r7, #16]
   return(result);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d0:	623a      	str	r2, [r7, #32]
 80056d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	69f9      	ldr	r1, [r7, #28]
 80056d6:	6a3a      	ldr	r2, [r7, #32]
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e5      	bne.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e00f      	b.n	8005720 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4013      	ands	r3, r2
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	461a      	mov	r2, r3
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	429a      	cmp	r2, r3
 800571c:	d09f      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3740      	adds	r7, #64	; 0x40
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005762:	f023 030c 	bic.w	r3, r3, #12
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	430b      	orrs	r3, r1
 800576e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2c      	ldr	r2, [pc, #176]	; (800583c <UART_SetConfig+0x114>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d103      	bne.n	8005798 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005790:	f7fe fcec 	bl	800416c <HAL_RCC_GetPCLK2Freq>
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	e002      	b.n	800579e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7fe fcd4 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 800579c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009a      	lsls	r2, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	4a22      	ldr	r2, [pc, #136]	; (8005840 <UART_SetConfig+0x118>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	0119      	lsls	r1, r3, #4
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009a      	lsls	r2, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057d4:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <UART_SetConfig+0x118>)
 80057d6:	fba3 0302 	umull	r0, r3, r3, r2
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2064      	movs	r0, #100	; 0x64
 80057de:	fb00 f303 	mul.w	r3, r0, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	3332      	adds	r3, #50	; 0x32
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <UART_SetConfig+0x118>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f4:	4419      	add	r1, r3
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009a      	lsls	r2, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	fbb2 f2f3 	udiv	r2, r2, r3
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <UART_SetConfig+0x118>)
 800580e:	fba3 0302 	umull	r0, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	2064      	movs	r0, #100	; 0x64
 8005816:	fb00 f303 	mul.w	r3, r0, r3
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	3332      	adds	r3, #50	; 0x32
 8005820:	4a07      	ldr	r2, [pc, #28]	; (8005840 <UART_SetConfig+0x118>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	f003 020f 	and.w	r2, r3, #15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	440a      	add	r2, r1
 8005832:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40013800 	.word	0x40013800
 8005840:	51eb851f 	.word	0x51eb851f

08005844 <__cvt>:
 8005844:	2b00      	cmp	r3, #0
 8005846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584a:	461f      	mov	r7, r3
 800584c:	bfbb      	ittet	lt
 800584e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005852:	461f      	movlt	r7, r3
 8005854:	2300      	movge	r3, #0
 8005856:	232d      	movlt	r3, #45	; 0x2d
 8005858:	b088      	sub	sp, #32
 800585a:	4614      	mov	r4, r2
 800585c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800585e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005860:	7013      	strb	r3, [r2, #0]
 8005862:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005864:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005868:	f023 0820 	bic.w	r8, r3, #32
 800586c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005870:	d005      	beq.n	800587e <__cvt+0x3a>
 8005872:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005876:	d100      	bne.n	800587a <__cvt+0x36>
 8005878:	3501      	adds	r5, #1
 800587a:	2302      	movs	r3, #2
 800587c:	e000      	b.n	8005880 <__cvt+0x3c>
 800587e:	2303      	movs	r3, #3
 8005880:	aa07      	add	r2, sp, #28
 8005882:	9204      	str	r2, [sp, #16]
 8005884:	aa06      	add	r2, sp, #24
 8005886:	e9cd a202 	strd	sl, r2, [sp, #8]
 800588a:	e9cd 3500 	strd	r3, r5, [sp]
 800588e:	4622      	mov	r2, r4
 8005890:	463b      	mov	r3, r7
 8005892:	f001 f881 	bl	8006998 <_dtoa_r>
 8005896:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800589a:	4606      	mov	r6, r0
 800589c:	d102      	bne.n	80058a4 <__cvt+0x60>
 800589e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058a0:	07db      	lsls	r3, r3, #31
 80058a2:	d522      	bpl.n	80058ea <__cvt+0xa6>
 80058a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a8:	eb06 0905 	add.w	r9, r6, r5
 80058ac:	d110      	bne.n	80058d0 <__cvt+0x8c>
 80058ae:	7833      	ldrb	r3, [r6, #0]
 80058b0:	2b30      	cmp	r3, #48	; 0x30
 80058b2:	d10a      	bne.n	80058ca <__cvt+0x86>
 80058b4:	2200      	movs	r2, #0
 80058b6:	2300      	movs	r3, #0
 80058b8:	4620      	mov	r0, r4
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fb f874 	bl	80009a8 <__aeabi_dcmpeq>
 80058c0:	b918      	cbnz	r0, 80058ca <__cvt+0x86>
 80058c2:	f1c5 0501 	rsb	r5, r5, #1
 80058c6:	f8ca 5000 	str.w	r5, [sl]
 80058ca:	f8da 3000 	ldr.w	r3, [sl]
 80058ce:	4499      	add	r9, r3
 80058d0:	2200      	movs	r2, #0
 80058d2:	2300      	movs	r3, #0
 80058d4:	4620      	mov	r0, r4
 80058d6:	4639      	mov	r1, r7
 80058d8:	f7fb f866 	bl	80009a8 <__aeabi_dcmpeq>
 80058dc:	b108      	cbz	r0, 80058e2 <__cvt+0x9e>
 80058de:	f8cd 901c 	str.w	r9, [sp, #28]
 80058e2:	2230      	movs	r2, #48	; 0x30
 80058e4:	9b07      	ldr	r3, [sp, #28]
 80058e6:	454b      	cmp	r3, r9
 80058e8:	d307      	bcc.n	80058fa <__cvt+0xb6>
 80058ea:	4630      	mov	r0, r6
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80058f0:	1b9b      	subs	r3, r3, r6
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	b008      	add	sp, #32
 80058f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	9107      	str	r1, [sp, #28]
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e7f0      	b.n	80058e4 <__cvt+0xa0>

08005902 <__exponent>:
 8005902:	4603      	mov	r3, r0
 8005904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005906:	2900      	cmp	r1, #0
 8005908:	f803 2b02 	strb.w	r2, [r3], #2
 800590c:	bfb6      	itet	lt
 800590e:	222d      	movlt	r2, #45	; 0x2d
 8005910:	222b      	movge	r2, #43	; 0x2b
 8005912:	4249      	neglt	r1, r1
 8005914:	2909      	cmp	r1, #9
 8005916:	7042      	strb	r2, [r0, #1]
 8005918:	dd2a      	ble.n	8005970 <__exponent+0x6e>
 800591a:	f10d 0207 	add.w	r2, sp, #7
 800591e:	4617      	mov	r7, r2
 8005920:	260a      	movs	r6, #10
 8005922:	fb91 f5f6 	sdiv	r5, r1, r6
 8005926:	4694      	mov	ip, r2
 8005928:	fb06 1415 	mls	r4, r6, r5, r1
 800592c:	3430      	adds	r4, #48	; 0x30
 800592e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005932:	460c      	mov	r4, r1
 8005934:	2c63      	cmp	r4, #99	; 0x63
 8005936:	4629      	mov	r1, r5
 8005938:	f102 32ff 	add.w	r2, r2, #4294967295
 800593c:	dcf1      	bgt.n	8005922 <__exponent+0x20>
 800593e:	3130      	adds	r1, #48	; 0x30
 8005940:	f1ac 0402 	sub.w	r4, ip, #2
 8005944:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005948:	4622      	mov	r2, r4
 800594a:	1c41      	adds	r1, r0, #1
 800594c:	42ba      	cmp	r2, r7
 800594e:	d30a      	bcc.n	8005966 <__exponent+0x64>
 8005950:	f10d 0209 	add.w	r2, sp, #9
 8005954:	eba2 020c 	sub.w	r2, r2, ip
 8005958:	42bc      	cmp	r4, r7
 800595a:	bf88      	it	hi
 800595c:	2200      	movhi	r2, #0
 800595e:	4413      	add	r3, r2
 8005960:	1a18      	subs	r0, r3, r0
 8005962:	b003      	add	sp, #12
 8005964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005966:	f812 5b01 	ldrb.w	r5, [r2], #1
 800596a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800596e:	e7ed      	b.n	800594c <__exponent+0x4a>
 8005970:	2330      	movs	r3, #48	; 0x30
 8005972:	3130      	adds	r1, #48	; 0x30
 8005974:	7083      	strb	r3, [r0, #2]
 8005976:	70c1      	strb	r1, [r0, #3]
 8005978:	1d03      	adds	r3, r0, #4
 800597a:	e7f1      	b.n	8005960 <__exponent+0x5e>

0800597c <_printf_float>:
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	b091      	sub	sp, #68	; 0x44
 8005982:	460c      	mov	r4, r1
 8005984:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005988:	4616      	mov	r6, r2
 800598a:	461f      	mov	r7, r3
 800598c:	4605      	mov	r5, r0
 800598e:	f000 fee1 	bl	8006754 <_localeconv_r>
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	9309      	str	r3, [sp, #36]	; 0x24
 8005998:	f7fa fbda 	bl	8000150 <strlen>
 800599c:	2300      	movs	r3, #0
 800599e:	930e      	str	r3, [sp, #56]	; 0x38
 80059a0:	f8d8 3000 	ldr.w	r3, [r8]
 80059a4:	900a      	str	r0, [sp, #40]	; 0x28
 80059a6:	3307      	adds	r3, #7
 80059a8:	f023 0307 	bic.w	r3, r3, #7
 80059ac:	f103 0208 	add.w	r2, r3, #8
 80059b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80059b4:	f8d4 b000 	ldr.w	fp, [r4]
 80059b8:	f8c8 2000 	str.w	r2, [r8]
 80059bc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80059c0:	4652      	mov	r2, sl
 80059c2:	4643      	mov	r3, r8
 80059c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059c8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80059cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	4650      	mov	r0, sl
 80059d4:	4b9c      	ldr	r3, [pc, #624]	; (8005c48 <_printf_float+0x2cc>)
 80059d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059d8:	f7fb f818 	bl	8000a0c <__aeabi_dcmpun>
 80059dc:	bb70      	cbnz	r0, 8005a3c <_printf_float+0xc0>
 80059de:	f04f 32ff 	mov.w	r2, #4294967295
 80059e2:	4650      	mov	r0, sl
 80059e4:	4b98      	ldr	r3, [pc, #608]	; (8005c48 <_printf_float+0x2cc>)
 80059e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059e8:	f7fa fff2 	bl	80009d0 <__aeabi_dcmple>
 80059ec:	bb30      	cbnz	r0, 8005a3c <_printf_float+0xc0>
 80059ee:	2200      	movs	r2, #0
 80059f0:	2300      	movs	r3, #0
 80059f2:	4650      	mov	r0, sl
 80059f4:	4641      	mov	r1, r8
 80059f6:	f7fa ffe1 	bl	80009bc <__aeabi_dcmplt>
 80059fa:	b110      	cbz	r0, 8005a02 <_printf_float+0x86>
 80059fc:	232d      	movs	r3, #45	; 0x2d
 80059fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a02:	4a92      	ldr	r2, [pc, #584]	; (8005c4c <_printf_float+0x2d0>)
 8005a04:	4b92      	ldr	r3, [pc, #584]	; (8005c50 <_printf_float+0x2d4>)
 8005a06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a0a:	bf94      	ite	ls
 8005a0c:	4690      	movls	r8, r2
 8005a0e:	4698      	movhi	r8, r3
 8005a10:	2303      	movs	r3, #3
 8005a12:	f04f 0a00 	mov.w	sl, #0
 8005a16:	6123      	str	r3, [r4, #16]
 8005a18:	f02b 0304 	bic.w	r3, fp, #4
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	4633      	mov	r3, r6
 8005a20:	4621      	mov	r1, r4
 8005a22:	4628      	mov	r0, r5
 8005a24:	9700      	str	r7, [sp, #0]
 8005a26:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a28:	f000 f9d6 	bl	8005dd8 <_printf_common>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f040 8090 	bne.w	8005b52 <_printf_float+0x1d6>
 8005a32:	f04f 30ff 	mov.w	r0, #4294967295
 8005a36:	b011      	add	sp, #68	; 0x44
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	4652      	mov	r2, sl
 8005a3e:	4643      	mov	r3, r8
 8005a40:	4650      	mov	r0, sl
 8005a42:	4641      	mov	r1, r8
 8005a44:	f7fa ffe2 	bl	8000a0c <__aeabi_dcmpun>
 8005a48:	b148      	cbz	r0, 8005a5e <_printf_float+0xe2>
 8005a4a:	f1b8 0f00 	cmp.w	r8, #0
 8005a4e:	bfb8      	it	lt
 8005a50:	232d      	movlt	r3, #45	; 0x2d
 8005a52:	4a80      	ldr	r2, [pc, #512]	; (8005c54 <_printf_float+0x2d8>)
 8005a54:	bfb8      	it	lt
 8005a56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a5a:	4b7f      	ldr	r3, [pc, #508]	; (8005c58 <_printf_float+0x2dc>)
 8005a5c:	e7d3      	b.n	8005a06 <_printf_float+0x8a>
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	d142      	bne.n	8005aee <_printf_float+0x172>
 8005a68:	2306      	movs	r3, #6
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	9206      	str	r2, [sp, #24]
 8005a70:	aa0e      	add	r2, sp, #56	; 0x38
 8005a72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005a76:	aa0d      	add	r2, sp, #52	; 0x34
 8005a78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005a7c:	9203      	str	r2, [sp, #12]
 8005a7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005a82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	6863      	ldr	r3, [r4, #4]
 8005a8a:	4652      	mov	r2, sl
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	4628      	mov	r0, r5
 8005a90:	4643      	mov	r3, r8
 8005a92:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a94:	f7ff fed6 	bl	8005844 <__cvt>
 8005a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	2947      	cmp	r1, #71	; 0x47
 8005a9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005aa0:	d108      	bne.n	8005ab4 <_printf_float+0x138>
 8005aa2:	1cc8      	adds	r0, r1, #3
 8005aa4:	db02      	blt.n	8005aac <_printf_float+0x130>
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	dd40      	ble.n	8005b2e <_printf_float+0x1b2>
 8005aac:	f1a9 0902 	sub.w	r9, r9, #2
 8005ab0:	fa5f f989 	uxtb.w	r9, r9
 8005ab4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ab8:	d81f      	bhi.n	8005afa <_printf_float+0x17e>
 8005aba:	464a      	mov	r2, r9
 8005abc:	3901      	subs	r1, #1
 8005abe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ac2:	910d      	str	r1, [sp, #52]	; 0x34
 8005ac4:	f7ff ff1d 	bl	8005902 <__exponent>
 8005ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aca:	4682      	mov	sl, r0
 8005acc:	1813      	adds	r3, r2, r0
 8005ace:	2a01      	cmp	r2, #1
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	dc02      	bgt.n	8005ada <_printf_float+0x15e>
 8005ad4:	6822      	ldr	r2, [r4, #0]
 8005ad6:	07d2      	lsls	r2, r2, #31
 8005ad8:	d501      	bpl.n	8005ade <_printf_float+0x162>
 8005ada:	3301      	adds	r3, #1
 8005adc:	6123      	str	r3, [r4, #16]
 8005ade:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d09b      	beq.n	8005a1e <_printf_float+0xa2>
 8005ae6:	232d      	movs	r3, #45	; 0x2d
 8005ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aec:	e797      	b.n	8005a1e <_printf_float+0xa2>
 8005aee:	2947      	cmp	r1, #71	; 0x47
 8005af0:	d1bc      	bne.n	8005a6c <_printf_float+0xf0>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ba      	bne.n	8005a6c <_printf_float+0xf0>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e7b7      	b.n	8005a6a <_printf_float+0xee>
 8005afa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005afe:	d118      	bne.n	8005b32 <_printf_float+0x1b6>
 8005b00:	2900      	cmp	r1, #0
 8005b02:	6863      	ldr	r3, [r4, #4]
 8005b04:	dd0b      	ble.n	8005b1e <_printf_float+0x1a2>
 8005b06:	6121      	str	r1, [r4, #16]
 8005b08:	b913      	cbnz	r3, 8005b10 <_printf_float+0x194>
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	07d0      	lsls	r0, r2, #31
 8005b0e:	d502      	bpl.n	8005b16 <_printf_float+0x19a>
 8005b10:	3301      	adds	r3, #1
 8005b12:	440b      	add	r3, r1
 8005b14:	6123      	str	r3, [r4, #16]
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b1c:	e7df      	b.n	8005ade <_printf_float+0x162>
 8005b1e:	b913      	cbnz	r3, 8005b26 <_printf_float+0x1aa>
 8005b20:	6822      	ldr	r2, [r4, #0]
 8005b22:	07d2      	lsls	r2, r2, #31
 8005b24:	d501      	bpl.n	8005b2a <_printf_float+0x1ae>
 8005b26:	3302      	adds	r3, #2
 8005b28:	e7f4      	b.n	8005b14 <_printf_float+0x198>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7f2      	b.n	8005b14 <_printf_float+0x198>
 8005b2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	4299      	cmp	r1, r3
 8005b36:	db05      	blt.n	8005b44 <_printf_float+0x1c8>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	6121      	str	r1, [r4, #16]
 8005b3c:	07d8      	lsls	r0, r3, #31
 8005b3e:	d5ea      	bpl.n	8005b16 <_printf_float+0x19a>
 8005b40:	1c4b      	adds	r3, r1, #1
 8005b42:	e7e7      	b.n	8005b14 <_printf_float+0x198>
 8005b44:	2900      	cmp	r1, #0
 8005b46:	bfcc      	ite	gt
 8005b48:	2201      	movgt	r2, #1
 8005b4a:	f1c1 0202 	rsble	r2, r1, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	e7e0      	b.n	8005b14 <_printf_float+0x198>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	055a      	lsls	r2, r3, #21
 8005b56:	d407      	bmi.n	8005b68 <_printf_float+0x1ec>
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	d12b      	bne.n	8005bbe <_printf_float+0x242>
 8005b66:	e764      	b.n	8005a32 <_printf_float+0xb6>
 8005b68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b6c:	f240 80dd 	bls.w	8005d2a <_printf_float+0x3ae>
 8005b70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b74:	2200      	movs	r2, #0
 8005b76:	2300      	movs	r3, #0
 8005b78:	f7fa ff16 	bl	80009a8 <__aeabi_dcmpeq>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d033      	beq.n	8005be8 <_printf_float+0x26c>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	4a35      	ldr	r2, [pc, #212]	; (8005c5c <_printf_float+0x2e0>)
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f af51 	beq.w	8005a32 <_printf_float+0xb6>
 8005b90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b94:	429a      	cmp	r2, r3
 8005b96:	db02      	blt.n	8005b9e <_printf_float+0x222>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07d8      	lsls	r0, r3, #31
 8005b9c:	d50f      	bpl.n	8005bbe <_printf_float+0x242>
 8005b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f af42 	beq.w	8005a32 <_printf_float+0xb6>
 8005bae:	f04f 0800 	mov.w	r8, #0
 8005bb2:	f104 091a 	add.w	r9, r4, #26
 8005bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	4543      	cmp	r3, r8
 8005bbc:	dc09      	bgt.n	8005bd2 <_printf_float+0x256>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	079b      	lsls	r3, r3, #30
 8005bc2:	f100 8104 	bmi.w	8005dce <_printf_float+0x452>
 8005bc6:	68e0      	ldr	r0, [r4, #12]
 8005bc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bca:	4298      	cmp	r0, r3
 8005bcc:	bfb8      	it	lt
 8005bce:	4618      	movlt	r0, r3
 8005bd0:	e731      	b.n	8005a36 <_printf_float+0xba>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	464a      	mov	r2, r9
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f43f af28 	beq.w	8005a32 <_printf_float+0xb6>
 8005be2:	f108 0801 	add.w	r8, r8, #1
 8005be6:	e7e6      	b.n	8005bb6 <_printf_float+0x23a>
 8005be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dc38      	bgt.n	8005c60 <_printf_float+0x2e4>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <_printf_float+0x2e0>)
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f af1a 	beq.w	8005a32 <_printf_float+0xb6>
 8005bfe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005c02:	4313      	orrs	r3, r2
 8005c04:	d102      	bne.n	8005c0c <_printf_float+0x290>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	07d9      	lsls	r1, r3, #31
 8005c0a:	d5d8      	bpl.n	8005bbe <_printf_float+0x242>
 8005c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f af0b 	beq.w	8005a32 <_printf_float+0xb6>
 8005c1c:	f04f 0900 	mov.w	r9, #0
 8005c20:	f104 0a1a 	add.w	sl, r4, #26
 8005c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c26:	425b      	negs	r3, r3
 8005c28:	454b      	cmp	r3, r9
 8005c2a:	dc01      	bgt.n	8005c30 <_printf_float+0x2b4>
 8005c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c2e:	e794      	b.n	8005b5a <_printf_float+0x1de>
 8005c30:	2301      	movs	r3, #1
 8005c32:	4652      	mov	r2, sl
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f aef9 	beq.w	8005a32 <_printf_float+0xb6>
 8005c40:	f109 0901 	add.w	r9, r9, #1
 8005c44:	e7ee      	b.n	8005c24 <_printf_float+0x2a8>
 8005c46:	bf00      	nop
 8005c48:	7fefffff 	.word	0x7fefffff
 8005c4c:	08009fd2 	.word	0x08009fd2
 8005c50:	08009fd6 	.word	0x08009fd6
 8005c54:	08009fda 	.word	0x08009fda
 8005c58:	08009fde 	.word	0x08009fde
 8005c5c:	08009fe2 	.word	0x08009fe2
 8005c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c64:	429a      	cmp	r2, r3
 8005c66:	bfa8      	it	ge
 8005c68:	461a      	movge	r2, r3
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	4691      	mov	r9, r2
 8005c6e:	dc37      	bgt.n	8005ce0 <_printf_float+0x364>
 8005c70:	f04f 0b00 	mov.w	fp, #0
 8005c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c78:	f104 021a 	add.w	r2, r4, #26
 8005c7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c80:	ebaa 0309 	sub.w	r3, sl, r9
 8005c84:	455b      	cmp	r3, fp
 8005c86:	dc33      	bgt.n	8005cf0 <_printf_float+0x374>
 8005c88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	db3b      	blt.n	8005d08 <_printf_float+0x38c>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	07da      	lsls	r2, r3, #31
 8005c94:	d438      	bmi.n	8005d08 <_printf_float+0x38c>
 8005c96:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005c9a:	eba2 0903 	sub.w	r9, r2, r3
 8005c9e:	eba2 020a 	sub.w	r2, r2, sl
 8005ca2:	4591      	cmp	r9, r2
 8005ca4:	bfa8      	it	ge
 8005ca6:	4691      	movge	r9, r2
 8005ca8:	f1b9 0f00 	cmp.w	r9, #0
 8005cac:	dc34      	bgt.n	8005d18 <_printf_float+0x39c>
 8005cae:	f04f 0800 	mov.w	r8, #0
 8005cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb6:	f104 0a1a 	add.w	sl, r4, #26
 8005cba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	eba3 0309 	sub.w	r3, r3, r9
 8005cc4:	4543      	cmp	r3, r8
 8005cc6:	f77f af7a 	ble.w	8005bbe <_printf_float+0x242>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4652      	mov	r2, sl
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f aeac 	beq.w	8005a32 <_printf_float+0xb6>
 8005cda:	f108 0801 	add.w	r8, r8, #1
 8005cde:	e7ec      	b.n	8005cba <_printf_float+0x33e>
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	d1c0      	bne.n	8005c70 <_printf_float+0x2f4>
 8005cee:	e6a0      	b.n	8005a32 <_printf_float+0xb6>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005cf8:	47b8      	blx	r7
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	f43f ae99 	beq.w	8005a32 <_printf_float+0xb6>
 8005d00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d02:	f10b 0b01 	add.w	fp, fp, #1
 8005d06:	e7b9      	b.n	8005c7c <_printf_float+0x300>
 8005d08:	4631      	mov	r1, r6
 8005d0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	d1bf      	bne.n	8005c96 <_printf_float+0x31a>
 8005d16:	e68c      	b.n	8005a32 <_printf_float+0xb6>
 8005d18:	464b      	mov	r3, r9
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	eb08 020a 	add.w	r2, r8, sl
 8005d22:	47b8      	blx	r7
 8005d24:	3001      	adds	r0, #1
 8005d26:	d1c2      	bne.n	8005cae <_printf_float+0x332>
 8005d28:	e683      	b.n	8005a32 <_printf_float+0xb6>
 8005d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d2c:	2a01      	cmp	r2, #1
 8005d2e:	dc01      	bgt.n	8005d34 <_printf_float+0x3b8>
 8005d30:	07db      	lsls	r3, r3, #31
 8005d32:	d539      	bpl.n	8005da8 <_printf_float+0x42c>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4642      	mov	r2, r8
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f ae77 	beq.w	8005a32 <_printf_float+0xb6>
 8005d44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	f43f ae6f 	beq.w	8005a32 <_printf_float+0xb6>
 8005d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005d60:	f7fa fe22 	bl	80009a8 <__aeabi_dcmpeq>
 8005d64:	b9d8      	cbnz	r0, 8005d9e <_printf_float+0x422>
 8005d66:	f109 33ff 	add.w	r3, r9, #4294967295
 8005d6a:	f108 0201 	add.w	r2, r8, #1
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	d10e      	bne.n	8005d96 <_printf_float+0x41a>
 8005d78:	e65b      	b.n	8005a32 <_printf_float+0xb6>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	464a      	mov	r2, r9
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae54 	beq.w	8005a32 <_printf_float+0xb6>
 8005d8a:	f108 0801 	add.w	r8, r8, #1
 8005d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d90:	3b01      	subs	r3, #1
 8005d92:	4543      	cmp	r3, r8
 8005d94:	dcf1      	bgt.n	8005d7a <_printf_float+0x3fe>
 8005d96:	4653      	mov	r3, sl
 8005d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d9c:	e6de      	b.n	8005b5c <_printf_float+0x1e0>
 8005d9e:	f04f 0800 	mov.w	r8, #0
 8005da2:	f104 091a 	add.w	r9, r4, #26
 8005da6:	e7f2      	b.n	8005d8e <_printf_float+0x412>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4642      	mov	r2, r8
 8005dac:	e7df      	b.n	8005d6e <_printf_float+0x3f2>
 8005dae:	2301      	movs	r3, #1
 8005db0:	464a      	mov	r2, r9
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f ae3a 	beq.w	8005a32 <_printf_float+0xb6>
 8005dbe:	f108 0801 	add.w	r8, r8, #1
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	4543      	cmp	r3, r8
 8005dca:	dcf0      	bgt.n	8005dae <_printf_float+0x432>
 8005dcc:	e6fb      	b.n	8005bc6 <_printf_float+0x24a>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	f104 0919 	add.w	r9, r4, #25
 8005dd6:	e7f4      	b.n	8005dc2 <_printf_float+0x446>

08005dd8 <_printf_common>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	4616      	mov	r6, r2
 8005dde:	4699      	mov	r9, r3
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	690b      	ldr	r3, [r1, #16]
 8005de4:	4607      	mov	r7, r0
 8005de6:	4293      	cmp	r3, r2
 8005de8:	bfb8      	it	lt
 8005dea:	4613      	movlt	r3, r2
 8005dec:	6033      	str	r3, [r6, #0]
 8005dee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005df2:	460c      	mov	r4, r1
 8005df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df8:	b10a      	cbz	r2, 8005dfe <_printf_common+0x26>
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	6033      	str	r3, [r6, #0]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	0699      	lsls	r1, r3, #26
 8005e02:	bf42      	ittt	mi
 8005e04:	6833      	ldrmi	r3, [r6, #0]
 8005e06:	3302      	addmi	r3, #2
 8005e08:	6033      	strmi	r3, [r6, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	f015 0506 	ands.w	r5, r5, #6
 8005e10:	d106      	bne.n	8005e20 <_printf_common+0x48>
 8005e12:	f104 0a19 	add.w	sl, r4, #25
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	6832      	ldr	r2, [r6, #0]
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	42ab      	cmp	r3, r5
 8005e1e:	dc2b      	bgt.n	8005e78 <_printf_common+0xa0>
 8005e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e24:	1e13      	subs	r3, r2, #0
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	0692      	lsls	r2, r2, #26
 8005e2e:	d430      	bmi.n	8005e92 <_printf_common+0xba>
 8005e30:	4649      	mov	r1, r9
 8005e32:	4638      	mov	r0, r7
 8005e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d023      	beq.n	8005e86 <_printf_common+0xae>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	6922      	ldr	r2, [r4, #16]
 8005e42:	f003 0306 	and.w	r3, r3, #6
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	bf14      	ite	ne
 8005e4a:	2500      	movne	r5, #0
 8005e4c:	6833      	ldreq	r3, [r6, #0]
 8005e4e:	f04f 0600 	mov.w	r6, #0
 8005e52:	bf08      	it	eq
 8005e54:	68e5      	ldreq	r5, [r4, #12]
 8005e56:	f104 041a 	add.w	r4, r4, #26
 8005e5a:	bf08      	it	eq
 8005e5c:	1aed      	subeq	r5, r5, r3
 8005e5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e62:	bf08      	it	eq
 8005e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bfc4      	itt	gt
 8005e6c:	1a9b      	subgt	r3, r3, r2
 8005e6e:	18ed      	addgt	r5, r5, r3
 8005e70:	42b5      	cmp	r5, r6
 8005e72:	d11a      	bne.n	8005eaa <_printf_common+0xd2>
 8005e74:	2000      	movs	r0, #0
 8005e76:	e008      	b.n	8005e8a <_printf_common+0xb2>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4652      	mov	r2, sl
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c0      	blx	r8
 8005e82:	3001      	adds	r0, #1
 8005e84:	d103      	bne.n	8005e8e <_printf_common+0xb6>
 8005e86:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8e:	3501      	adds	r5, #1
 8005e90:	e7c1      	b.n	8005e16 <_printf_common+0x3e>
 8005e92:	2030      	movs	r0, #48	; 0x30
 8005e94:	18e1      	adds	r1, r4, r3
 8005e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea0:	4422      	add	r2, r4
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea8:	e7c2      	b.n	8005e30 <_printf_common+0x58>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4622      	mov	r2, r4
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	47c0      	blx	r8
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d0e6      	beq.n	8005e86 <_printf_common+0xae>
 8005eb8:	3601      	adds	r6, #1
 8005eba:	e7d9      	b.n	8005e70 <_printf_common+0x98>

08005ebc <_printf_i>:
 8005ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	7e0f      	ldrb	r7, [r1, #24]
 8005ec2:	4691      	mov	r9, r2
 8005ec4:	2f78      	cmp	r7, #120	; 0x78
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	469a      	mov	sl, r3
 8005ecc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ed2:	d807      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ed4:	2f62      	cmp	r7, #98	; 0x62
 8005ed6:	d80a      	bhi.n	8005eee <_printf_i+0x32>
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	f000 80d5 	beq.w	8006088 <_printf_i+0x1cc>
 8005ede:	2f58      	cmp	r7, #88	; 0x58
 8005ee0:	f000 80c1 	beq.w	8006066 <_printf_i+0x1aa>
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eec:	e03a      	b.n	8005f64 <_printf_i+0xa8>
 8005eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef2:	2b15      	cmp	r3, #21
 8005ef4:	d8f6      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ef6:	a101      	add	r1, pc, #4	; (adr r1, 8005efc <_printf_i+0x40>)
 8005ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005ee5 	.word	0x08005ee5
 8005f08:	08005ee5 	.word	0x08005ee5
 8005f0c:	08005ee5 	.word	0x08005ee5
 8005f10:	08005ee5 	.word	0x08005ee5
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005ee5 	.word	0x08005ee5
 8005f1c:	08005ee5 	.word	0x08005ee5
 8005f20:	08005ee5 	.word	0x08005ee5
 8005f24:	08005ee5 	.word	0x08005ee5
 8005f28:	0800606f 	.word	0x0800606f
 8005f2c:	08005f95 	.word	0x08005f95
 8005f30:	08006029 	.word	0x08006029
 8005f34:	08005ee5 	.word	0x08005ee5
 8005f38:	08005ee5 	.word	0x08005ee5
 8005f3c:	08006091 	.word	0x08006091
 8005f40:	08005ee5 	.word	0x08005ee5
 8005f44:	08005f95 	.word	0x08005f95
 8005f48:	08005ee5 	.word	0x08005ee5
 8005f4c:	08005ee5 	.word	0x08005ee5
 8005f50:	08006031 	.word	0x08006031
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	602a      	str	r2, [r5, #0]
 8005f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0a0      	b.n	80060aa <_printf_i+0x1ee>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	682b      	ldr	r3, [r5, #0]
 8005f6c:	0607      	lsls	r7, r0, #24
 8005f6e:	f103 0104 	add.w	r1, r3, #4
 8005f72:	6029      	str	r1, [r5, #0]
 8005f74:	d501      	bpl.n	8005f7a <_printf_i+0xbe>
 8005f76:	681e      	ldr	r6, [r3, #0]
 8005f78:	e003      	b.n	8005f82 <_printf_i+0xc6>
 8005f7a:	0646      	lsls	r6, r0, #25
 8005f7c:	d5fb      	bpl.n	8005f76 <_printf_i+0xba>
 8005f7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	da03      	bge.n	8005f8e <_printf_i+0xd2>
 8005f86:	232d      	movs	r3, #45	; 0x2d
 8005f88:	4276      	negs	r6, r6
 8005f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f8e:	230a      	movs	r3, #10
 8005f90:	4859      	ldr	r0, [pc, #356]	; (80060f8 <_printf_i+0x23c>)
 8005f92:	e012      	b.n	8005fba <_printf_i+0xfe>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	6820      	ldr	r0, [r4, #0]
 8005f98:	1d19      	adds	r1, r3, #4
 8005f9a:	6029      	str	r1, [r5, #0]
 8005f9c:	0605      	lsls	r5, r0, #24
 8005f9e:	d501      	bpl.n	8005fa4 <_printf_i+0xe8>
 8005fa0:	681e      	ldr	r6, [r3, #0]
 8005fa2:	e002      	b.n	8005faa <_printf_i+0xee>
 8005fa4:	0641      	lsls	r1, r0, #25
 8005fa6:	d5fb      	bpl.n	8005fa0 <_printf_i+0xe4>
 8005fa8:	881e      	ldrh	r6, [r3, #0]
 8005faa:	2f6f      	cmp	r7, #111	; 0x6f
 8005fac:	bf0c      	ite	eq
 8005fae:	2308      	moveq	r3, #8
 8005fb0:	230a      	movne	r3, #10
 8005fb2:	4851      	ldr	r0, [pc, #324]	; (80060f8 <_printf_i+0x23c>)
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fba:	6865      	ldr	r5, [r4, #4]
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	bfa8      	it	ge
 8005fc0:	6821      	ldrge	r1, [r4, #0]
 8005fc2:	60a5      	str	r5, [r4, #8]
 8005fc4:	bfa4      	itt	ge
 8005fc6:	f021 0104 	bicge.w	r1, r1, #4
 8005fca:	6021      	strge	r1, [r4, #0]
 8005fcc:	b90e      	cbnz	r6, 8005fd2 <_printf_i+0x116>
 8005fce:	2d00      	cmp	r5, #0
 8005fd0:	d04b      	beq.n	800606a <_printf_i+0x1ae>
 8005fd2:	4615      	mov	r5, r2
 8005fd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fd8:	fb03 6711 	mls	r7, r3, r1, r6
 8005fdc:	5dc7      	ldrb	r7, [r0, r7]
 8005fde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fe2:	4637      	mov	r7, r6
 8005fe4:	42bb      	cmp	r3, r7
 8005fe6:	460e      	mov	r6, r1
 8005fe8:	d9f4      	bls.n	8005fd4 <_printf_i+0x118>
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d10b      	bne.n	8006006 <_printf_i+0x14a>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	07de      	lsls	r6, r3, #31
 8005ff2:	d508      	bpl.n	8006006 <_printf_i+0x14a>
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	6861      	ldr	r1, [r4, #4]
 8005ff8:	4299      	cmp	r1, r3
 8005ffa:	bfde      	ittt	le
 8005ffc:	2330      	movle	r3, #48	; 0x30
 8005ffe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006002:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006006:	1b52      	subs	r2, r2, r5
 8006008:	6122      	str	r2, [r4, #16]
 800600a:	464b      	mov	r3, r9
 800600c:	4621      	mov	r1, r4
 800600e:	4640      	mov	r0, r8
 8006010:	f8cd a000 	str.w	sl, [sp]
 8006014:	aa03      	add	r2, sp, #12
 8006016:	f7ff fedf 	bl	8005dd8 <_printf_common>
 800601a:	3001      	adds	r0, #1
 800601c:	d14a      	bne.n	80060b4 <_printf_i+0x1f8>
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	b004      	add	sp, #16
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	f043 0320 	orr.w	r3, r3, #32
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	2778      	movs	r7, #120	; 0x78
 8006032:	4832      	ldr	r0, [pc, #200]	; (80060fc <_printf_i+0x240>)
 8006034:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	6829      	ldr	r1, [r5, #0]
 800603c:	061f      	lsls	r7, r3, #24
 800603e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006042:	d402      	bmi.n	800604a <_printf_i+0x18e>
 8006044:	065f      	lsls	r7, r3, #25
 8006046:	bf48      	it	mi
 8006048:	b2b6      	uxthmi	r6, r6
 800604a:	07df      	lsls	r7, r3, #31
 800604c:	bf48      	it	mi
 800604e:	f043 0320 	orrmi.w	r3, r3, #32
 8006052:	6029      	str	r1, [r5, #0]
 8006054:	bf48      	it	mi
 8006056:	6023      	strmi	r3, [r4, #0]
 8006058:	b91e      	cbnz	r6, 8006062 <_printf_i+0x1a6>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f023 0320 	bic.w	r3, r3, #32
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	2310      	movs	r3, #16
 8006064:	e7a6      	b.n	8005fb4 <_printf_i+0xf8>
 8006066:	4824      	ldr	r0, [pc, #144]	; (80060f8 <_printf_i+0x23c>)
 8006068:	e7e4      	b.n	8006034 <_printf_i+0x178>
 800606a:	4615      	mov	r5, r2
 800606c:	e7bd      	b.n	8005fea <_printf_i+0x12e>
 800606e:	682b      	ldr	r3, [r5, #0]
 8006070:	6826      	ldr	r6, [r4, #0]
 8006072:	1d18      	adds	r0, r3, #4
 8006074:	6961      	ldr	r1, [r4, #20]
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	0635      	lsls	r5, r6, #24
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	d501      	bpl.n	8006082 <_printf_i+0x1c6>
 800607e:	6019      	str	r1, [r3, #0]
 8006080:	e002      	b.n	8006088 <_printf_i+0x1cc>
 8006082:	0670      	lsls	r0, r6, #25
 8006084:	d5fb      	bpl.n	800607e <_printf_i+0x1c2>
 8006086:	8019      	strh	r1, [r3, #0]
 8006088:	2300      	movs	r3, #0
 800608a:	4615      	mov	r5, r2
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	e7bc      	b.n	800600a <_printf_i+0x14e>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	2100      	movs	r1, #0
 8006094:	1d1a      	adds	r2, r3, #4
 8006096:	602a      	str	r2, [r5, #0]
 8006098:	681d      	ldr	r5, [r3, #0]
 800609a:	6862      	ldr	r2, [r4, #4]
 800609c:	4628      	mov	r0, r5
 800609e:	f000 fbcf 	bl	8006840 <memchr>
 80060a2:	b108      	cbz	r0, 80060a8 <_printf_i+0x1ec>
 80060a4:	1b40      	subs	r0, r0, r5
 80060a6:	6060      	str	r0, [r4, #4]
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	2300      	movs	r3, #0
 80060ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b2:	e7aa      	b.n	800600a <_printf_i+0x14e>
 80060b4:	462a      	mov	r2, r5
 80060b6:	4649      	mov	r1, r9
 80060b8:	4640      	mov	r0, r8
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	47d0      	blx	sl
 80060be:	3001      	adds	r0, #1
 80060c0:	d0ad      	beq.n	800601e <_printf_i+0x162>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	079b      	lsls	r3, r3, #30
 80060c6:	d413      	bmi.n	80060f0 <_printf_i+0x234>
 80060c8:	68e0      	ldr	r0, [r4, #12]
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	4298      	cmp	r0, r3
 80060ce:	bfb8      	it	lt
 80060d0:	4618      	movlt	r0, r3
 80060d2:	e7a6      	b.n	8006022 <_printf_i+0x166>
 80060d4:	2301      	movs	r3, #1
 80060d6:	4632      	mov	r2, r6
 80060d8:	4649      	mov	r1, r9
 80060da:	4640      	mov	r0, r8
 80060dc:	47d0      	blx	sl
 80060de:	3001      	adds	r0, #1
 80060e0:	d09d      	beq.n	800601e <_printf_i+0x162>
 80060e2:	3501      	adds	r5, #1
 80060e4:	68e3      	ldr	r3, [r4, #12]
 80060e6:	9903      	ldr	r1, [sp, #12]
 80060e8:	1a5b      	subs	r3, r3, r1
 80060ea:	42ab      	cmp	r3, r5
 80060ec:	dcf2      	bgt.n	80060d4 <_printf_i+0x218>
 80060ee:	e7eb      	b.n	80060c8 <_printf_i+0x20c>
 80060f0:	2500      	movs	r5, #0
 80060f2:	f104 0619 	add.w	r6, r4, #25
 80060f6:	e7f5      	b.n	80060e4 <_printf_i+0x228>
 80060f8:	08009fe4 	.word	0x08009fe4
 80060fc:	08009ff5 	.word	0x08009ff5

08006100 <_scanf_float>:
 8006100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006104:	b087      	sub	sp, #28
 8006106:	9303      	str	r3, [sp, #12]
 8006108:	688b      	ldr	r3, [r1, #8]
 800610a:	4617      	mov	r7, r2
 800610c:	1e5a      	subs	r2, r3, #1
 800610e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006112:	bf85      	ittet	hi
 8006114:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006118:	195b      	addhi	r3, r3, r5
 800611a:	2300      	movls	r3, #0
 800611c:	9302      	strhi	r3, [sp, #8]
 800611e:	bf88      	it	hi
 8006120:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006124:	468b      	mov	fp, r1
 8006126:	f04f 0500 	mov.w	r5, #0
 800612a:	bf8c      	ite	hi
 800612c:	608b      	strhi	r3, [r1, #8]
 800612e:	9302      	strls	r3, [sp, #8]
 8006130:	680b      	ldr	r3, [r1, #0]
 8006132:	4680      	mov	r8, r0
 8006134:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006138:	f84b 3b1c 	str.w	r3, [fp], #28
 800613c:	460c      	mov	r4, r1
 800613e:	465e      	mov	r6, fp
 8006140:	46aa      	mov	sl, r5
 8006142:	46a9      	mov	r9, r5
 8006144:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006148:	9501      	str	r5, [sp, #4]
 800614a:	68a2      	ldr	r2, [r4, #8]
 800614c:	b152      	cbz	r2, 8006164 <_scanf_float+0x64>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b4e      	cmp	r3, #78	; 0x4e
 8006154:	d864      	bhi.n	8006220 <_scanf_float+0x120>
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d83c      	bhi.n	80061d4 <_scanf_float+0xd4>
 800615a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800615e:	b2c8      	uxtb	r0, r1
 8006160:	280e      	cmp	r0, #14
 8006162:	d93a      	bls.n	80061da <_scanf_float+0xda>
 8006164:	f1b9 0f00 	cmp.w	r9, #0
 8006168:	d003      	beq.n	8006172 <_scanf_float+0x72>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006176:	f1ba 0f01 	cmp.w	sl, #1
 800617a:	f200 8113 	bhi.w	80063a4 <_scanf_float+0x2a4>
 800617e:	455e      	cmp	r6, fp
 8006180:	f200 8105 	bhi.w	800638e <_scanf_float+0x28e>
 8006184:	2501      	movs	r5, #1
 8006186:	4628      	mov	r0, r5
 8006188:	b007      	add	sp, #28
 800618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006192:	2a0d      	cmp	r2, #13
 8006194:	d8e6      	bhi.n	8006164 <_scanf_float+0x64>
 8006196:	a101      	add	r1, pc, #4	; (adr r1, 800619c <_scanf_float+0x9c>)
 8006198:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800619c:	080062db 	.word	0x080062db
 80061a0:	08006165 	.word	0x08006165
 80061a4:	08006165 	.word	0x08006165
 80061a8:	08006165 	.word	0x08006165
 80061ac:	0800633b 	.word	0x0800633b
 80061b0:	08006313 	.word	0x08006313
 80061b4:	08006165 	.word	0x08006165
 80061b8:	08006165 	.word	0x08006165
 80061bc:	080062e9 	.word	0x080062e9
 80061c0:	08006165 	.word	0x08006165
 80061c4:	08006165 	.word	0x08006165
 80061c8:	08006165 	.word	0x08006165
 80061cc:	08006165 	.word	0x08006165
 80061d0:	080062a1 	.word	0x080062a1
 80061d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061d8:	e7db      	b.n	8006192 <_scanf_float+0x92>
 80061da:	290e      	cmp	r1, #14
 80061dc:	d8c2      	bhi.n	8006164 <_scanf_float+0x64>
 80061de:	a001      	add	r0, pc, #4	; (adr r0, 80061e4 <_scanf_float+0xe4>)
 80061e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061e4:	08006293 	.word	0x08006293
 80061e8:	08006165 	.word	0x08006165
 80061ec:	08006293 	.word	0x08006293
 80061f0:	08006327 	.word	0x08006327
 80061f4:	08006165 	.word	0x08006165
 80061f8:	08006241 	.word	0x08006241
 80061fc:	0800627d 	.word	0x0800627d
 8006200:	0800627d 	.word	0x0800627d
 8006204:	0800627d 	.word	0x0800627d
 8006208:	0800627d 	.word	0x0800627d
 800620c:	0800627d 	.word	0x0800627d
 8006210:	0800627d 	.word	0x0800627d
 8006214:	0800627d 	.word	0x0800627d
 8006218:	0800627d 	.word	0x0800627d
 800621c:	0800627d 	.word	0x0800627d
 8006220:	2b6e      	cmp	r3, #110	; 0x6e
 8006222:	d809      	bhi.n	8006238 <_scanf_float+0x138>
 8006224:	2b60      	cmp	r3, #96	; 0x60
 8006226:	d8b2      	bhi.n	800618e <_scanf_float+0x8e>
 8006228:	2b54      	cmp	r3, #84	; 0x54
 800622a:	d077      	beq.n	800631c <_scanf_float+0x21c>
 800622c:	2b59      	cmp	r3, #89	; 0x59
 800622e:	d199      	bne.n	8006164 <_scanf_float+0x64>
 8006230:	2d07      	cmp	r5, #7
 8006232:	d197      	bne.n	8006164 <_scanf_float+0x64>
 8006234:	2508      	movs	r5, #8
 8006236:	e029      	b.n	800628c <_scanf_float+0x18c>
 8006238:	2b74      	cmp	r3, #116	; 0x74
 800623a:	d06f      	beq.n	800631c <_scanf_float+0x21c>
 800623c:	2b79      	cmp	r3, #121	; 0x79
 800623e:	e7f6      	b.n	800622e <_scanf_float+0x12e>
 8006240:	6821      	ldr	r1, [r4, #0]
 8006242:	05c8      	lsls	r0, r1, #23
 8006244:	d51a      	bpl.n	800627c <_scanf_float+0x17c>
 8006246:	9b02      	ldr	r3, [sp, #8]
 8006248:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800624c:	6021      	str	r1, [r4, #0]
 800624e:	f109 0901 	add.w	r9, r9, #1
 8006252:	b11b      	cbz	r3, 800625c <_scanf_float+0x15c>
 8006254:	3b01      	subs	r3, #1
 8006256:	3201      	adds	r2, #1
 8006258:	9302      	str	r3, [sp, #8]
 800625a:	60a2      	str	r2, [r4, #8]
 800625c:	68a3      	ldr	r3, [r4, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	60a3      	str	r3, [r4, #8]
 8006262:	6923      	ldr	r3, [r4, #16]
 8006264:	3301      	adds	r3, #1
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3b01      	subs	r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	f340 8084 	ble.w	800637c <_scanf_float+0x27c>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	e766      	b.n	800614a <_scanf_float+0x4a>
 800627c:	eb1a 0f05 	cmn.w	sl, r5
 8006280:	f47f af70 	bne.w	8006164 <_scanf_float+0x64>
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800628a:	6022      	str	r2, [r4, #0]
 800628c:	f806 3b01 	strb.w	r3, [r6], #1
 8006290:	e7e4      	b.n	800625c <_scanf_float+0x15c>
 8006292:	6822      	ldr	r2, [r4, #0]
 8006294:	0610      	lsls	r0, r2, #24
 8006296:	f57f af65 	bpl.w	8006164 <_scanf_float+0x64>
 800629a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800629e:	e7f4      	b.n	800628a <_scanf_float+0x18a>
 80062a0:	f1ba 0f00 	cmp.w	sl, #0
 80062a4:	d10e      	bne.n	80062c4 <_scanf_float+0x1c4>
 80062a6:	f1b9 0f00 	cmp.w	r9, #0
 80062aa:	d10e      	bne.n	80062ca <_scanf_float+0x1ca>
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062b6:	d108      	bne.n	80062ca <_scanf_float+0x1ca>
 80062b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062bc:	f04f 0a01 	mov.w	sl, #1
 80062c0:	6022      	str	r2, [r4, #0]
 80062c2:	e7e3      	b.n	800628c <_scanf_float+0x18c>
 80062c4:	f1ba 0f02 	cmp.w	sl, #2
 80062c8:	d055      	beq.n	8006376 <_scanf_float+0x276>
 80062ca:	2d01      	cmp	r5, #1
 80062cc:	d002      	beq.n	80062d4 <_scanf_float+0x1d4>
 80062ce:	2d04      	cmp	r5, #4
 80062d0:	f47f af48 	bne.w	8006164 <_scanf_float+0x64>
 80062d4:	3501      	adds	r5, #1
 80062d6:	b2ed      	uxtb	r5, r5
 80062d8:	e7d8      	b.n	800628c <_scanf_float+0x18c>
 80062da:	f1ba 0f01 	cmp.w	sl, #1
 80062de:	f47f af41 	bne.w	8006164 <_scanf_float+0x64>
 80062e2:	f04f 0a02 	mov.w	sl, #2
 80062e6:	e7d1      	b.n	800628c <_scanf_float+0x18c>
 80062e8:	b97d      	cbnz	r5, 800630a <_scanf_float+0x20a>
 80062ea:	f1b9 0f00 	cmp.w	r9, #0
 80062ee:	f47f af3c 	bne.w	800616a <_scanf_float+0x6a>
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062fc:	f47f af39 	bne.w	8006172 <_scanf_float+0x72>
 8006300:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006304:	2501      	movs	r5, #1
 8006306:	6022      	str	r2, [r4, #0]
 8006308:	e7c0      	b.n	800628c <_scanf_float+0x18c>
 800630a:	2d03      	cmp	r5, #3
 800630c:	d0e2      	beq.n	80062d4 <_scanf_float+0x1d4>
 800630e:	2d05      	cmp	r5, #5
 8006310:	e7de      	b.n	80062d0 <_scanf_float+0x1d0>
 8006312:	2d02      	cmp	r5, #2
 8006314:	f47f af26 	bne.w	8006164 <_scanf_float+0x64>
 8006318:	2503      	movs	r5, #3
 800631a:	e7b7      	b.n	800628c <_scanf_float+0x18c>
 800631c:	2d06      	cmp	r5, #6
 800631e:	f47f af21 	bne.w	8006164 <_scanf_float+0x64>
 8006322:	2507      	movs	r5, #7
 8006324:	e7b2      	b.n	800628c <_scanf_float+0x18c>
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	0591      	lsls	r1, r2, #22
 800632a:	f57f af1b 	bpl.w	8006164 <_scanf_float+0x64>
 800632e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006332:	6022      	str	r2, [r4, #0]
 8006334:	f8cd 9004 	str.w	r9, [sp, #4]
 8006338:	e7a8      	b.n	800628c <_scanf_float+0x18c>
 800633a:	6822      	ldr	r2, [r4, #0]
 800633c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006340:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006344:	d006      	beq.n	8006354 <_scanf_float+0x254>
 8006346:	0550      	lsls	r0, r2, #21
 8006348:	f57f af0c 	bpl.w	8006164 <_scanf_float+0x64>
 800634c:	f1b9 0f00 	cmp.w	r9, #0
 8006350:	f43f af0f 	beq.w	8006172 <_scanf_float+0x72>
 8006354:	0591      	lsls	r1, r2, #22
 8006356:	bf58      	it	pl
 8006358:	9901      	ldrpl	r1, [sp, #4]
 800635a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800635e:	bf58      	it	pl
 8006360:	eba9 0101 	subpl.w	r1, r9, r1
 8006364:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006368:	f04f 0900 	mov.w	r9, #0
 800636c:	bf58      	it	pl
 800636e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006372:	6022      	str	r2, [r4, #0]
 8006374:	e78a      	b.n	800628c <_scanf_float+0x18c>
 8006376:	f04f 0a03 	mov.w	sl, #3
 800637a:	e787      	b.n	800628c <_scanf_float+0x18c>
 800637c:	4639      	mov	r1, r7
 800637e:	4640      	mov	r0, r8
 8006380:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006384:	4798      	blx	r3
 8006386:	2800      	cmp	r0, #0
 8006388:	f43f aedf 	beq.w	800614a <_scanf_float+0x4a>
 800638c:	e6ea      	b.n	8006164 <_scanf_float+0x64>
 800638e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006392:	463a      	mov	r2, r7
 8006394:	4640      	mov	r0, r8
 8006396:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800639a:	4798      	blx	r3
 800639c:	6923      	ldr	r3, [r4, #16]
 800639e:	3b01      	subs	r3, #1
 80063a0:	6123      	str	r3, [r4, #16]
 80063a2:	e6ec      	b.n	800617e <_scanf_float+0x7e>
 80063a4:	1e6b      	subs	r3, r5, #1
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	d825      	bhi.n	80063f6 <_scanf_float+0x2f6>
 80063aa:	2d02      	cmp	r5, #2
 80063ac:	d836      	bhi.n	800641c <_scanf_float+0x31c>
 80063ae:	455e      	cmp	r6, fp
 80063b0:	f67f aee8 	bls.w	8006184 <_scanf_float+0x84>
 80063b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063b8:	463a      	mov	r2, r7
 80063ba:	4640      	mov	r0, r8
 80063bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063c0:	4798      	blx	r3
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	e7f1      	b.n	80063ae <_scanf_float+0x2ae>
 80063ca:	9802      	ldr	r0, [sp, #8]
 80063cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063d4:	463a      	mov	r2, r7
 80063d6:	9002      	str	r0, [sp, #8]
 80063d8:	4640      	mov	r0, r8
 80063da:	4798      	blx	r3
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	3b01      	subs	r3, #1
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063e6:	fa5f fa8a 	uxtb.w	sl, sl
 80063ea:	f1ba 0f02 	cmp.w	sl, #2
 80063ee:	d1ec      	bne.n	80063ca <_scanf_float+0x2ca>
 80063f0:	3d03      	subs	r5, #3
 80063f2:	b2ed      	uxtb	r5, r5
 80063f4:	1b76      	subs	r6, r6, r5
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	05da      	lsls	r2, r3, #23
 80063fa:	d52f      	bpl.n	800645c <_scanf_float+0x35c>
 80063fc:	055b      	lsls	r3, r3, #21
 80063fe:	d510      	bpl.n	8006422 <_scanf_float+0x322>
 8006400:	455e      	cmp	r6, fp
 8006402:	f67f aebf 	bls.w	8006184 <_scanf_float+0x84>
 8006406:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800640a:	463a      	mov	r2, r7
 800640c:	4640      	mov	r0, r8
 800640e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006412:	4798      	blx	r3
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	3b01      	subs	r3, #1
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	e7f1      	b.n	8006400 <_scanf_float+0x300>
 800641c:	46aa      	mov	sl, r5
 800641e:	9602      	str	r6, [sp, #8]
 8006420:	e7df      	b.n	80063e2 <_scanf_float+0x2e2>
 8006422:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	2965      	cmp	r1, #101	; 0x65
 800642a:	f103 33ff 	add.w	r3, r3, #4294967295
 800642e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	d00c      	beq.n	8006450 <_scanf_float+0x350>
 8006436:	2945      	cmp	r1, #69	; 0x45
 8006438:	d00a      	beq.n	8006450 <_scanf_float+0x350>
 800643a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800643e:	463a      	mov	r2, r7
 8006440:	4640      	mov	r0, r8
 8006442:	4798      	blx	r3
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800644a:	3b01      	subs	r3, #1
 800644c:	1eb5      	subs	r5, r6, #2
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	463a      	mov	r2, r7
 8006452:	4640      	mov	r0, r8
 8006454:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006458:	4798      	blx	r3
 800645a:	462e      	mov	r6, r5
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	f015 0510 	ands.w	r5, r5, #16
 8006462:	d155      	bne.n	8006510 <_scanf_float+0x410>
 8006464:	7035      	strb	r5, [r6, #0]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800646c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006470:	d11d      	bne.n	80064ae <_scanf_float+0x3ae>
 8006472:	9b01      	ldr	r3, [sp, #4]
 8006474:	454b      	cmp	r3, r9
 8006476:	eba3 0209 	sub.w	r2, r3, r9
 800647a:	d125      	bne.n	80064c8 <_scanf_float+0x3c8>
 800647c:	2200      	movs	r2, #0
 800647e:	4659      	mov	r1, fp
 8006480:	4640      	mov	r0, r8
 8006482:	f002 fc1d 	bl	8008cc0 <_strtod_r>
 8006486:	9b03      	ldr	r3, [sp, #12]
 8006488:	f8d4 c000 	ldr.w	ip, [r4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f01c 0f02 	tst.w	ip, #2
 8006492:	4606      	mov	r6, r0
 8006494:	460f      	mov	r7, r1
 8006496:	f103 0204 	add.w	r2, r3, #4
 800649a:	d020      	beq.n	80064de <_scanf_float+0x3de>
 800649c:	9903      	ldr	r1, [sp, #12]
 800649e:	600a      	str	r2, [r1, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	e9c3 6700 	strd	r6, r7, [r3]
 80064a6:	68e3      	ldr	r3, [r4, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60e3      	str	r3, [r4, #12]
 80064ac:	e66b      	b.n	8006186 <_scanf_float+0x86>
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0e3      	beq.n	800647c <_scanf_float+0x37c>
 80064b4:	9905      	ldr	r1, [sp, #20]
 80064b6:	230a      	movs	r3, #10
 80064b8:	462a      	mov	r2, r5
 80064ba:	4640      	mov	r0, r8
 80064bc:	3101      	adds	r1, #1
 80064be:	f002 fc83 	bl	8008dc8 <_strtol_r>
 80064c2:	9b04      	ldr	r3, [sp, #16]
 80064c4:	9e05      	ldr	r6, [sp, #20]
 80064c6:	1ac2      	subs	r2, r0, r3
 80064c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064cc:	429e      	cmp	r6, r3
 80064ce:	bf28      	it	cs
 80064d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064d4:	4630      	mov	r0, r6
 80064d6:	490f      	ldr	r1, [pc, #60]	; (8006514 <_scanf_float+0x414>)
 80064d8:	f000 f8d0 	bl	800667c <siprintf>
 80064dc:	e7ce      	b.n	800647c <_scanf_float+0x37c>
 80064de:	f01c 0f04 	tst.w	ip, #4
 80064e2:	d1db      	bne.n	800649c <_scanf_float+0x39c>
 80064e4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80064e8:	f8cc 2000 	str.w	r2, [ip]
 80064ec:	f8d3 8000 	ldr.w	r8, [r3]
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	f7fa fa8a 	bl	8000a0c <__aeabi_dcmpun>
 80064f8:	b128      	cbz	r0, 8006506 <_scanf_float+0x406>
 80064fa:	4807      	ldr	r0, [pc, #28]	; (8006518 <_scanf_float+0x418>)
 80064fc:	f000 f9bc 	bl	8006878 <nanf>
 8006500:	f8c8 0000 	str.w	r0, [r8]
 8006504:	e7cf      	b.n	80064a6 <_scanf_float+0x3a6>
 8006506:	4630      	mov	r0, r6
 8006508:	4639      	mov	r1, r7
 800650a:	f7fa fadd 	bl	8000ac8 <__aeabi_d2f>
 800650e:	e7f7      	b.n	8006500 <_scanf_float+0x400>
 8006510:	2500      	movs	r5, #0
 8006512:	e638      	b.n	8006186 <_scanf_float+0x86>
 8006514:	0800a006 	.word	0x0800a006
 8006518:	0800a39d 	.word	0x0800a39d

0800651c <std>:
 800651c:	2300      	movs	r3, #0
 800651e:	b510      	push	{r4, lr}
 8006520:	4604      	mov	r4, r0
 8006522:	e9c0 3300 	strd	r3, r3, [r0]
 8006526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800652a:	6083      	str	r3, [r0, #8]
 800652c:	8181      	strh	r1, [r0, #12]
 800652e:	6643      	str	r3, [r0, #100]	; 0x64
 8006530:	81c2      	strh	r2, [r0, #14]
 8006532:	6183      	str	r3, [r0, #24]
 8006534:	4619      	mov	r1, r3
 8006536:	2208      	movs	r2, #8
 8006538:	305c      	adds	r0, #92	; 0x5c
 800653a:	f000 f902 	bl	8006742 <memset>
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <std+0x38>)
 8006540:	6224      	str	r4, [r4, #32]
 8006542:	6263      	str	r3, [r4, #36]	; 0x24
 8006544:	4b04      	ldr	r3, [pc, #16]	; (8006558 <std+0x3c>)
 8006546:	62a3      	str	r3, [r4, #40]	; 0x28
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <std+0x40>)
 800654a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800654c:	4b04      	ldr	r3, [pc, #16]	; (8006560 <std+0x44>)
 800654e:	6323      	str	r3, [r4, #48]	; 0x30
 8006550:	bd10      	pop	{r4, pc}
 8006552:	bf00      	nop
 8006554:	080066bd 	.word	0x080066bd
 8006558:	080066df 	.word	0x080066df
 800655c:	08006717 	.word	0x08006717
 8006560:	0800673b 	.word	0x0800673b

08006564 <stdio_exit_handler>:
 8006564:	4a02      	ldr	r2, [pc, #8]	; (8006570 <stdio_exit_handler+0xc>)
 8006566:	4903      	ldr	r1, [pc, #12]	; (8006574 <stdio_exit_handler+0x10>)
 8006568:	4803      	ldr	r0, [pc, #12]	; (8006578 <stdio_exit_handler+0x14>)
 800656a:	f000 b869 	b.w	8006640 <_fwalk_sglue>
 800656e:	bf00      	nop
 8006570:	20000014 	.word	0x20000014
 8006574:	08009405 	.word	0x08009405
 8006578:	20000020 	.word	0x20000020

0800657c <cleanup_stdio>:
 800657c:	6841      	ldr	r1, [r0, #4]
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <cleanup_stdio+0x34>)
 8006580:	b510      	push	{r4, lr}
 8006582:	4299      	cmp	r1, r3
 8006584:	4604      	mov	r4, r0
 8006586:	d001      	beq.n	800658c <cleanup_stdio+0x10>
 8006588:	f002 ff3c 	bl	8009404 <_fflush_r>
 800658c:	68a1      	ldr	r1, [r4, #8]
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <cleanup_stdio+0x38>)
 8006590:	4299      	cmp	r1, r3
 8006592:	d002      	beq.n	800659a <cleanup_stdio+0x1e>
 8006594:	4620      	mov	r0, r4
 8006596:	f002 ff35 	bl	8009404 <_fflush_r>
 800659a:	68e1      	ldr	r1, [r4, #12]
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <cleanup_stdio+0x3c>)
 800659e:	4299      	cmp	r1, r3
 80065a0:	d004      	beq.n	80065ac <cleanup_stdio+0x30>
 80065a2:	4620      	mov	r0, r4
 80065a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a8:	f002 bf2c 	b.w	8009404 <_fflush_r>
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	bf00      	nop
 80065b0:	200004cc 	.word	0x200004cc
 80065b4:	20000534 	.word	0x20000534
 80065b8:	2000059c 	.word	0x2000059c

080065bc <global_stdio_init.part.0>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <global_stdio_init.part.0+0x30>)
 80065c0:	4c0b      	ldr	r4, [pc, #44]	; (80065f0 <global_stdio_init.part.0+0x34>)
 80065c2:	4a0c      	ldr	r2, [pc, #48]	; (80065f4 <global_stdio_init.part.0+0x38>)
 80065c4:	4620      	mov	r0, r4
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	2104      	movs	r1, #4
 80065ca:	2200      	movs	r2, #0
 80065cc:	f7ff ffa6 	bl	800651c <std>
 80065d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065d4:	2201      	movs	r2, #1
 80065d6:	2109      	movs	r1, #9
 80065d8:	f7ff ffa0 	bl	800651c <std>
 80065dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065e0:	2202      	movs	r2, #2
 80065e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e6:	2112      	movs	r1, #18
 80065e8:	f7ff bf98 	b.w	800651c <std>
 80065ec:	20000604 	.word	0x20000604
 80065f0:	200004cc 	.word	0x200004cc
 80065f4:	08006565 	.word	0x08006565

080065f8 <__sfp_lock_acquire>:
 80065f8:	4801      	ldr	r0, [pc, #4]	; (8006600 <__sfp_lock_acquire+0x8>)
 80065fa:	f000 b91f 	b.w	800683c <__retarget_lock_acquire_recursive>
 80065fe:	bf00      	nop
 8006600:	2000060d 	.word	0x2000060d

08006604 <__sfp_lock_release>:
 8006604:	4801      	ldr	r0, [pc, #4]	; (800660c <__sfp_lock_release+0x8>)
 8006606:	f000 b91a 	b.w	800683e <__retarget_lock_release_recursive>
 800660a:	bf00      	nop
 800660c:	2000060d 	.word	0x2000060d

08006610 <__sinit>:
 8006610:	b510      	push	{r4, lr}
 8006612:	4604      	mov	r4, r0
 8006614:	f7ff fff0 	bl	80065f8 <__sfp_lock_acquire>
 8006618:	6a23      	ldr	r3, [r4, #32]
 800661a:	b11b      	cbz	r3, 8006624 <__sinit+0x14>
 800661c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006620:	f7ff bff0 	b.w	8006604 <__sfp_lock_release>
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <__sinit+0x28>)
 8006626:	6223      	str	r3, [r4, #32]
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <__sinit+0x2c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f5      	bne.n	800661c <__sinit+0xc>
 8006630:	f7ff ffc4 	bl	80065bc <global_stdio_init.part.0>
 8006634:	e7f2      	b.n	800661c <__sinit+0xc>
 8006636:	bf00      	nop
 8006638:	0800657d 	.word	0x0800657d
 800663c:	20000604 	.word	0x20000604

08006640 <_fwalk_sglue>:
 8006640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006644:	4607      	mov	r7, r0
 8006646:	4688      	mov	r8, r1
 8006648:	4614      	mov	r4, r2
 800664a:	2600      	movs	r6, #0
 800664c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006650:	f1b9 0901 	subs.w	r9, r9, #1
 8006654:	d505      	bpl.n	8006662 <_fwalk_sglue+0x22>
 8006656:	6824      	ldr	r4, [r4, #0]
 8006658:	2c00      	cmp	r4, #0
 800665a:	d1f7      	bne.n	800664c <_fwalk_sglue+0xc>
 800665c:	4630      	mov	r0, r6
 800665e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d907      	bls.n	8006678 <_fwalk_sglue+0x38>
 8006668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800666c:	3301      	adds	r3, #1
 800666e:	d003      	beq.n	8006678 <_fwalk_sglue+0x38>
 8006670:	4629      	mov	r1, r5
 8006672:	4638      	mov	r0, r7
 8006674:	47c0      	blx	r8
 8006676:	4306      	orrs	r6, r0
 8006678:	3568      	adds	r5, #104	; 0x68
 800667a:	e7e9      	b.n	8006650 <_fwalk_sglue+0x10>

0800667c <siprintf>:
 800667c:	b40e      	push	{r1, r2, r3}
 800667e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006682:	b500      	push	{lr}
 8006684:	b09c      	sub	sp, #112	; 0x70
 8006686:	ab1d      	add	r3, sp, #116	; 0x74
 8006688:	9002      	str	r0, [sp, #8]
 800668a:	9006      	str	r0, [sp, #24]
 800668c:	9107      	str	r1, [sp, #28]
 800668e:	9104      	str	r1, [sp, #16]
 8006690:	4808      	ldr	r0, [pc, #32]	; (80066b4 <siprintf+0x38>)
 8006692:	4909      	ldr	r1, [pc, #36]	; (80066b8 <siprintf+0x3c>)
 8006694:	f853 2b04 	ldr.w	r2, [r3], #4
 8006698:	9105      	str	r1, [sp, #20]
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	a902      	add	r1, sp, #8
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	f002 fbee 	bl	8008e80 <_svfiprintf_r>
 80066a4:	2200      	movs	r2, #0
 80066a6:	9b02      	ldr	r3, [sp, #8]
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	b01c      	add	sp, #112	; 0x70
 80066ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80066b0:	b003      	add	sp, #12
 80066b2:	4770      	bx	lr
 80066b4:	2000006c 	.word	0x2000006c
 80066b8:	ffff0208 	.word	0xffff0208

080066bc <__sread>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	460c      	mov	r4, r1
 80066c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c4:	f000 f86c 	bl	80067a0 <_read_r>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	bfab      	itete	ge
 80066cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ce:	89a3      	ldrhlt	r3, [r4, #12]
 80066d0:	181b      	addge	r3, r3, r0
 80066d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066d6:	bfac      	ite	ge
 80066d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066da:	81a3      	strhlt	r3, [r4, #12]
 80066dc:	bd10      	pop	{r4, pc}

080066de <__swrite>:
 80066de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e2:	461f      	mov	r7, r3
 80066e4:	898b      	ldrh	r3, [r1, #12]
 80066e6:	4605      	mov	r5, r0
 80066e8:	05db      	lsls	r3, r3, #23
 80066ea:	460c      	mov	r4, r1
 80066ec:	4616      	mov	r6, r2
 80066ee:	d505      	bpl.n	80066fc <__swrite+0x1e>
 80066f0:	2302      	movs	r3, #2
 80066f2:	2200      	movs	r2, #0
 80066f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f8:	f000 f840 	bl	800677c <_lseek_r>
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	4632      	mov	r2, r6
 8006700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	4628      	mov	r0, r5
 8006708:	463b      	mov	r3, r7
 800670a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800670e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006712:	f000 b857 	b.w	80067c4 <_write_r>

08006716 <__sseek>:
 8006716:	b510      	push	{r4, lr}
 8006718:	460c      	mov	r4, r1
 800671a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671e:	f000 f82d 	bl	800677c <_lseek_r>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	bf15      	itete	ne
 8006728:	6560      	strne	r0, [r4, #84]	; 0x54
 800672a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800672e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006732:	81a3      	strheq	r3, [r4, #12]
 8006734:	bf18      	it	ne
 8006736:	81a3      	strhne	r3, [r4, #12]
 8006738:	bd10      	pop	{r4, pc}

0800673a <__sclose>:
 800673a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673e:	f000 b80d 	b.w	800675c <_close_r>

08006742 <memset>:
 8006742:	4603      	mov	r3, r0
 8006744:	4402      	add	r2, r0
 8006746:	4293      	cmp	r3, r2
 8006748:	d100      	bne.n	800674c <memset+0xa>
 800674a:	4770      	bx	lr
 800674c:	f803 1b01 	strb.w	r1, [r3], #1
 8006750:	e7f9      	b.n	8006746 <memset+0x4>
	...

08006754 <_localeconv_r>:
 8006754:	4800      	ldr	r0, [pc, #0]	; (8006758 <_localeconv_r+0x4>)
 8006756:	4770      	bx	lr
 8006758:	20000160 	.word	0x20000160

0800675c <_close_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	2300      	movs	r3, #0
 8006760:	4d05      	ldr	r5, [pc, #20]	; (8006778 <_close_r+0x1c>)
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	602b      	str	r3, [r5, #0]
 8006768:	f7fb fada 	bl	8001d20 <_close>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_close_r+0x1a>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_close_r+0x1a>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000608 	.word	0x20000608

0800677c <_lseek_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4604      	mov	r4, r0
 8006780:	4608      	mov	r0, r1
 8006782:	4611      	mov	r1, r2
 8006784:	2200      	movs	r2, #0
 8006786:	4d05      	ldr	r5, [pc, #20]	; (800679c <_lseek_r+0x20>)
 8006788:	602a      	str	r2, [r5, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	f7fb faec 	bl	8001d68 <_lseek>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_lseek_r+0x1e>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_lseek_r+0x1e>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	20000608 	.word	0x20000608

080067a0 <_read_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4604      	mov	r4, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	4611      	mov	r1, r2
 80067a8:	2200      	movs	r2, #0
 80067aa:	4d05      	ldr	r5, [pc, #20]	; (80067c0 <_read_r+0x20>)
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f7fb fa99 	bl	8001ce6 <_read>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_read_r+0x1e>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_read_r+0x1e>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	20000608 	.word	0x20000608

080067c4 <_write_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	2200      	movs	r2, #0
 80067ce:	4d05      	ldr	r5, [pc, #20]	; (80067e4 <_write_r+0x20>)
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fa fb68 	bl	8000ea8 <_write>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_write_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_write_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	20000608 	.word	0x20000608

080067e8 <__errno>:
 80067e8:	4b01      	ldr	r3, [pc, #4]	; (80067f0 <__errno+0x8>)
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	2000006c 	.word	0x2000006c

080067f4 <__libc_init_array>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	2600      	movs	r6, #0
 80067f8:	4d0c      	ldr	r5, [pc, #48]	; (800682c <__libc_init_array+0x38>)
 80067fa:	4c0d      	ldr	r4, [pc, #52]	; (8006830 <__libc_init_array+0x3c>)
 80067fc:	1b64      	subs	r4, r4, r5
 80067fe:	10a4      	asrs	r4, r4, #2
 8006800:	42a6      	cmp	r6, r4
 8006802:	d109      	bne.n	8006818 <__libc_init_array+0x24>
 8006804:	f003 fbc2 	bl	8009f8c <_init>
 8006808:	2600      	movs	r6, #0
 800680a:	4d0a      	ldr	r5, [pc, #40]	; (8006834 <__libc_init_array+0x40>)
 800680c:	4c0a      	ldr	r4, [pc, #40]	; (8006838 <__libc_init_array+0x44>)
 800680e:	1b64      	subs	r4, r4, r5
 8006810:	10a4      	asrs	r4, r4, #2
 8006812:	42a6      	cmp	r6, r4
 8006814:	d105      	bne.n	8006822 <__libc_init_array+0x2e>
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	f855 3b04 	ldr.w	r3, [r5], #4
 800681c:	4798      	blx	r3
 800681e:	3601      	adds	r6, #1
 8006820:	e7ee      	b.n	8006800 <__libc_init_array+0xc>
 8006822:	f855 3b04 	ldr.w	r3, [r5], #4
 8006826:	4798      	blx	r3
 8006828:	3601      	adds	r6, #1
 800682a:	e7f2      	b.n	8006812 <__libc_init_array+0x1e>
 800682c:	0800a400 	.word	0x0800a400
 8006830:	0800a400 	.word	0x0800a400
 8006834:	0800a400 	.word	0x0800a400
 8006838:	0800a404 	.word	0x0800a404

0800683c <__retarget_lock_acquire_recursive>:
 800683c:	4770      	bx	lr

0800683e <__retarget_lock_release_recursive>:
 800683e:	4770      	bx	lr

08006840 <memchr>:
 8006840:	4603      	mov	r3, r0
 8006842:	b510      	push	{r4, lr}
 8006844:	b2c9      	uxtb	r1, r1
 8006846:	4402      	add	r2, r0
 8006848:	4293      	cmp	r3, r2
 800684a:	4618      	mov	r0, r3
 800684c:	d101      	bne.n	8006852 <memchr+0x12>
 800684e:	2000      	movs	r0, #0
 8006850:	e003      	b.n	800685a <memchr+0x1a>
 8006852:	7804      	ldrb	r4, [r0, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	428c      	cmp	r4, r1
 8006858:	d1f6      	bne.n	8006848 <memchr+0x8>
 800685a:	bd10      	pop	{r4, pc}

0800685c <memcpy>:
 800685c:	440a      	add	r2, r1
 800685e:	4291      	cmp	r1, r2
 8006860:	f100 33ff 	add.w	r3, r0, #4294967295
 8006864:	d100      	bne.n	8006868 <memcpy+0xc>
 8006866:	4770      	bx	lr
 8006868:	b510      	push	{r4, lr}
 800686a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800686e:	4291      	cmp	r1, r2
 8006870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006874:	d1f9      	bne.n	800686a <memcpy+0xe>
 8006876:	bd10      	pop	{r4, pc}

08006878 <nanf>:
 8006878:	4800      	ldr	r0, [pc, #0]	; (800687c <nanf+0x4>)
 800687a:	4770      	bx	lr
 800687c:	7fc00000 	.word	0x7fc00000

08006880 <quorem>:
 8006880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	6903      	ldr	r3, [r0, #16]
 8006886:	690c      	ldr	r4, [r1, #16]
 8006888:	4607      	mov	r7, r0
 800688a:	42a3      	cmp	r3, r4
 800688c:	db7f      	blt.n	800698e <quorem+0x10e>
 800688e:	3c01      	subs	r4, #1
 8006890:	f100 0514 	add.w	r5, r0, #20
 8006894:	f101 0814 	add.w	r8, r1, #20
 8006898:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068a6:	3301      	adds	r3, #1
 80068a8:	429a      	cmp	r2, r3
 80068aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80068ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068b6:	d331      	bcc.n	800691c <quorem+0x9c>
 80068b8:	f04f 0e00 	mov.w	lr, #0
 80068bc:	4640      	mov	r0, r8
 80068be:	46ac      	mov	ip, r5
 80068c0:	46f2      	mov	sl, lr
 80068c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80068c6:	b293      	uxth	r3, r2
 80068c8:	fb06 e303 	mla	r3, r6, r3, lr
 80068cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068d0:	0c1a      	lsrs	r2, r3, #16
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	fb06 220e 	mla	r2, r6, lr, r2
 80068d8:	ebaa 0303 	sub.w	r3, sl, r3
 80068dc:	f8dc a000 	ldr.w	sl, [ip]
 80068e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068e4:	fa1f fa8a 	uxth.w	sl, sl
 80068e8:	4453      	add	r3, sl
 80068ea:	f8dc a000 	ldr.w	sl, [ip]
 80068ee:	b292      	uxth	r2, r2
 80068f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068fe:	4581      	cmp	r9, r0
 8006900:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006904:	f84c 3b04 	str.w	r3, [ip], #4
 8006908:	d2db      	bcs.n	80068c2 <quorem+0x42>
 800690a:	f855 300b 	ldr.w	r3, [r5, fp]
 800690e:	b92b      	cbnz	r3, 800691c <quorem+0x9c>
 8006910:	9b01      	ldr	r3, [sp, #4]
 8006912:	3b04      	subs	r3, #4
 8006914:	429d      	cmp	r5, r3
 8006916:	461a      	mov	r2, r3
 8006918:	d32d      	bcc.n	8006976 <quorem+0xf6>
 800691a:	613c      	str	r4, [r7, #16]
 800691c:	4638      	mov	r0, r7
 800691e:	f001 f9df 	bl	8007ce0 <__mcmp>
 8006922:	2800      	cmp	r0, #0
 8006924:	db23      	blt.n	800696e <quorem+0xee>
 8006926:	4629      	mov	r1, r5
 8006928:	2000      	movs	r0, #0
 800692a:	3601      	adds	r6, #1
 800692c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006930:	f8d1 c000 	ldr.w	ip, [r1]
 8006934:	b293      	uxth	r3, r2
 8006936:	1ac3      	subs	r3, r0, r3
 8006938:	0c12      	lsrs	r2, r2, #16
 800693a:	fa1f f08c 	uxth.w	r0, ip
 800693e:	4403      	add	r3, r0
 8006940:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006948:	b29b      	uxth	r3, r3
 800694a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800694e:	45c1      	cmp	r9, r8
 8006950:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006954:	f841 3b04 	str.w	r3, [r1], #4
 8006958:	d2e8      	bcs.n	800692c <quorem+0xac>
 800695a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800695e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006962:	b922      	cbnz	r2, 800696e <quorem+0xee>
 8006964:	3b04      	subs	r3, #4
 8006966:	429d      	cmp	r5, r3
 8006968:	461a      	mov	r2, r3
 800696a:	d30a      	bcc.n	8006982 <quorem+0x102>
 800696c:	613c      	str	r4, [r7, #16]
 800696e:	4630      	mov	r0, r6
 8006970:	b003      	add	sp, #12
 8006972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	3b04      	subs	r3, #4
 800697a:	2a00      	cmp	r2, #0
 800697c:	d1cd      	bne.n	800691a <quorem+0x9a>
 800697e:	3c01      	subs	r4, #1
 8006980:	e7c8      	b.n	8006914 <quorem+0x94>
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	3b04      	subs	r3, #4
 8006986:	2a00      	cmp	r2, #0
 8006988:	d1f0      	bne.n	800696c <quorem+0xec>
 800698a:	3c01      	subs	r4, #1
 800698c:	e7eb      	b.n	8006966 <quorem+0xe6>
 800698e:	2000      	movs	r0, #0
 8006990:	e7ee      	b.n	8006970 <quorem+0xf0>
 8006992:	0000      	movs	r0, r0
 8006994:	0000      	movs	r0, r0
	...

08006998 <_dtoa_r>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	4616      	mov	r6, r2
 800699e:	461f      	mov	r7, r3
 80069a0:	69c4      	ldr	r4, [r0, #28]
 80069a2:	b099      	sub	sp, #100	; 0x64
 80069a4:	4605      	mov	r5, r0
 80069a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80069aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80069ae:	b974      	cbnz	r4, 80069ce <_dtoa_r+0x36>
 80069b0:	2010      	movs	r0, #16
 80069b2:	f000 fe1d 	bl	80075f0 <malloc>
 80069b6:	4602      	mov	r2, r0
 80069b8:	61e8      	str	r0, [r5, #28]
 80069ba:	b920      	cbnz	r0, 80069c6 <_dtoa_r+0x2e>
 80069bc:	21ef      	movs	r1, #239	; 0xef
 80069be:	4bac      	ldr	r3, [pc, #688]	; (8006c70 <_dtoa_r+0x2d8>)
 80069c0:	48ac      	ldr	r0, [pc, #688]	; (8006c74 <_dtoa_r+0x2dc>)
 80069c2:	f002 fe1f 	bl	8009604 <__assert_func>
 80069c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069ca:	6004      	str	r4, [r0, #0]
 80069cc:	60c4      	str	r4, [r0, #12]
 80069ce:	69eb      	ldr	r3, [r5, #28]
 80069d0:	6819      	ldr	r1, [r3, #0]
 80069d2:	b151      	cbz	r1, 80069ea <_dtoa_r+0x52>
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	2301      	movs	r3, #1
 80069d8:	4093      	lsls	r3, r2
 80069da:	604a      	str	r2, [r1, #4]
 80069dc:	608b      	str	r3, [r1, #8]
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 fefa 	bl	80077d8 <_Bfree>
 80069e4:	2200      	movs	r2, #0
 80069e6:	69eb      	ldr	r3, [r5, #28]
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	1e3b      	subs	r3, r7, #0
 80069ec:	bfaf      	iteee	ge
 80069ee:	2300      	movge	r3, #0
 80069f0:	2201      	movlt	r2, #1
 80069f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069f6:	9305      	strlt	r3, [sp, #20]
 80069f8:	bfa8      	it	ge
 80069fa:	f8c8 3000 	strge.w	r3, [r8]
 80069fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006a02:	4b9d      	ldr	r3, [pc, #628]	; (8006c78 <_dtoa_r+0x2e0>)
 8006a04:	bfb8      	it	lt
 8006a06:	f8c8 2000 	strlt.w	r2, [r8]
 8006a0a:	ea33 0309 	bics.w	r3, r3, r9
 8006a0e:	d119      	bne.n	8006a44 <_dtoa_r+0xac>
 8006a10:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a1c:	4333      	orrs	r3, r6
 8006a1e:	f000 8589 	beq.w	8007534 <_dtoa_r+0xb9c>
 8006a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a24:	b953      	cbnz	r3, 8006a3c <_dtoa_r+0xa4>
 8006a26:	4b95      	ldr	r3, [pc, #596]	; (8006c7c <_dtoa_r+0x2e4>)
 8006a28:	e023      	b.n	8006a72 <_dtoa_r+0xda>
 8006a2a:	4b95      	ldr	r3, [pc, #596]	; (8006c80 <_dtoa_r+0x2e8>)
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	9803      	ldr	r0, [sp, #12]
 8006a36:	b019      	add	sp, #100	; 0x64
 8006a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3c:	4b8f      	ldr	r3, [pc, #572]	; (8006c7c <_dtoa_r+0x2e4>)
 8006a3e:	9303      	str	r3, [sp, #12]
 8006a40:	3303      	adds	r3, #3
 8006a42:	e7f5      	b.n	8006a30 <_dtoa_r+0x98>
 8006a44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a50:	2200      	movs	r2, #0
 8006a52:	2300      	movs	r3, #0
 8006a54:	f7f9 ffa8 	bl	80009a8 <__aeabi_dcmpeq>
 8006a58:	4680      	mov	r8, r0
 8006a5a:	b160      	cbz	r0, 8006a76 <_dtoa_r+0xde>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8562 	beq.w	800752e <_dtoa_r+0xb96>
 8006a6a:	4b86      	ldr	r3, [pc, #536]	; (8006c84 <_dtoa_r+0x2ec>)
 8006a6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	e7de      	b.n	8006a34 <_dtoa_r+0x9c>
 8006a76:	ab16      	add	r3, sp, #88	; 0x58
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	ab17      	add	r3, sp, #92	; 0x5c
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4628      	mov	r0, r5
 8006a80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a84:	f001 fa3c 	bl	8007f00 <__d2b>
 8006a88:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	2c00      	cmp	r4, #0
 8006a90:	d07e      	beq.n	8006b90 <_dtoa_r+0x1f8>
 8006a92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006aa4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006aa8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006aac:	4619      	mov	r1, r3
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4b75      	ldr	r3, [pc, #468]	; (8006c88 <_dtoa_r+0x2f0>)
 8006ab2:	f7f9 fb59 	bl	8000168 <__aeabi_dsub>
 8006ab6:	a368      	add	r3, pc, #416	; (adr r3, 8006c58 <_dtoa_r+0x2c0>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fd0c 	bl	80004d8 <__aeabi_dmul>
 8006ac0:	a367      	add	r3, pc, #412	; (adr r3, 8006c60 <_dtoa_r+0x2c8>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f7f9 fb51 	bl	800016c <__adddf3>
 8006aca:	4606      	mov	r6, r0
 8006acc:	4620      	mov	r0, r4
 8006ace:	460f      	mov	r7, r1
 8006ad0:	f7f9 fc98 	bl	8000404 <__aeabi_i2d>
 8006ad4:	a364      	add	r3, pc, #400	; (adr r3, 8006c68 <_dtoa_r+0x2d0>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 fcfd 	bl	80004d8 <__aeabi_dmul>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	f7f9 fb41 	bl	800016c <__adddf3>
 8006aea:	4606      	mov	r6, r0
 8006aec:	460f      	mov	r7, r1
 8006aee:	f7f9 ffa3 	bl	8000a38 <__aeabi_d2iz>
 8006af2:	2200      	movs	r2, #0
 8006af4:	4683      	mov	fp, r0
 8006af6:	2300      	movs	r3, #0
 8006af8:	4630      	mov	r0, r6
 8006afa:	4639      	mov	r1, r7
 8006afc:	f7f9 ff5e 	bl	80009bc <__aeabi_dcmplt>
 8006b00:	b148      	cbz	r0, 8006b16 <_dtoa_r+0x17e>
 8006b02:	4658      	mov	r0, fp
 8006b04:	f7f9 fc7e 	bl	8000404 <__aeabi_i2d>
 8006b08:	4632      	mov	r2, r6
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	f7f9 ff4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006b10:	b908      	cbnz	r0, 8006b16 <_dtoa_r+0x17e>
 8006b12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b16:	f1bb 0f16 	cmp.w	fp, #22
 8006b1a:	d857      	bhi.n	8006bcc <_dtoa_r+0x234>
 8006b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b20:	4b5a      	ldr	r3, [pc, #360]	; (8006c8c <_dtoa_r+0x2f4>)
 8006b22:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f7f9 ff47 	bl	80009bc <__aeabi_dcmplt>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d04e      	beq.n	8006bd0 <_dtoa_r+0x238>
 8006b32:	2300      	movs	r3, #0
 8006b34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b38:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b3c:	1b1b      	subs	r3, r3, r4
 8006b3e:	1e5a      	subs	r2, r3, #1
 8006b40:	bf46      	itte	mi
 8006b42:	f1c3 0901 	rsbmi	r9, r3, #1
 8006b46:	2300      	movmi	r3, #0
 8006b48:	f04f 0900 	movpl.w	r9, #0
 8006b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b4e:	bf48      	it	mi
 8006b50:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006b52:	f1bb 0f00 	cmp.w	fp, #0
 8006b56:	db3d      	blt.n	8006bd4 <_dtoa_r+0x23c>
 8006b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006b5e:	445b      	add	r3, fp
 8006b60:	9309      	str	r3, [sp, #36]	; 0x24
 8006b62:	2300      	movs	r3, #0
 8006b64:	930a      	str	r3, [sp, #40]	; 0x28
 8006b66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b68:	2b09      	cmp	r3, #9
 8006b6a:	d867      	bhi.n	8006c3c <_dtoa_r+0x2a4>
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	bfc4      	itt	gt
 8006b70:	3b04      	subgt	r3, #4
 8006b72:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b76:	bfc8      	it	gt
 8006b78:	2400      	movgt	r4, #0
 8006b7a:	f1a3 0302 	sub.w	r3, r3, #2
 8006b7e:	bfd8      	it	le
 8006b80:	2401      	movle	r4, #1
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	f200 8086 	bhi.w	8006c94 <_dtoa_r+0x2fc>
 8006b88:	e8df f003 	tbb	[pc, r3]
 8006b8c:	5637392c 	.word	0x5637392c
 8006b90:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006b94:	441c      	add	r4, r3
 8006b96:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	bfc1      	itttt	gt
 8006b9e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ba2:	fa09 f903 	lslgt.w	r9, r9, r3
 8006ba6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006baa:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006bae:	bfd6      	itet	le
 8006bb0:	f1c3 0320 	rsble	r3, r3, #32
 8006bb4:	ea49 0003 	orrgt.w	r0, r9, r3
 8006bb8:	fa06 f003 	lslle.w	r0, r6, r3
 8006bbc:	f7f9 fc12 	bl	80003e4 <__aeabi_ui2d>
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006bc6:	3c01      	subs	r4, #1
 8006bc8:	9213      	str	r2, [sp, #76]	; 0x4c
 8006bca:	e76f      	b.n	8006aac <_dtoa_r+0x114>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e7b3      	b.n	8006b38 <_dtoa_r+0x1a0>
 8006bd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8006bd2:	e7b2      	b.n	8006b3a <_dtoa_r+0x1a2>
 8006bd4:	f1cb 0300 	rsb	r3, fp, #0
 8006bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bda:	2300      	movs	r3, #0
 8006bdc:	eba9 090b 	sub.w	r9, r9, fp
 8006be0:	930e      	str	r3, [sp, #56]	; 0x38
 8006be2:	e7c0      	b.n	8006b66 <_dtoa_r+0x1ce>
 8006be4:	2300      	movs	r3, #0
 8006be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006be8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	dc55      	bgt.n	8006c9a <_dtoa_r+0x302>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	9306      	str	r3, [sp, #24]
 8006bf4:	9308      	str	r3, [sp, #32]
 8006bf6:	9223      	str	r2, [sp, #140]	; 0x8c
 8006bf8:	e00b      	b.n	8006c12 <_dtoa_r+0x27a>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e7f3      	b.n	8006be6 <_dtoa_r+0x24e>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c04:	445b      	add	r3, fp
 8006c06:	9306      	str	r3, [sp, #24]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	9308      	str	r3, [sp, #32]
 8006c0e:	bfb8      	it	lt
 8006c10:	2301      	movlt	r3, #1
 8006c12:	2100      	movs	r1, #0
 8006c14:	2204      	movs	r2, #4
 8006c16:	69e8      	ldr	r0, [r5, #28]
 8006c18:	f102 0614 	add.w	r6, r2, #20
 8006c1c:	429e      	cmp	r6, r3
 8006c1e:	d940      	bls.n	8006ca2 <_dtoa_r+0x30a>
 8006c20:	6041      	str	r1, [r0, #4]
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 fd98 	bl	8007758 <_Balloc>
 8006c28:	9003      	str	r0, [sp, #12]
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d13c      	bne.n	8006ca8 <_dtoa_r+0x310>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	f240 11af 	movw	r1, #431	; 0x1af
 8006c34:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <_dtoa_r+0x2f8>)
 8006c36:	e6c3      	b.n	80069c0 <_dtoa_r+0x28>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e7e1      	b.n	8006c00 <_dtoa_r+0x268>
 8006c3c:	2401      	movs	r4, #1
 8006c3e:	2300      	movs	r3, #0
 8006c40:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c42:	9322      	str	r3, [sp, #136]	; 0x88
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
 8006c48:	2200      	movs	r2, #0
 8006c4a:	9306      	str	r3, [sp, #24]
 8006c4c:	9308      	str	r3, [sp, #32]
 8006c4e:	2312      	movs	r3, #18
 8006c50:	e7d1      	b.n	8006bf6 <_dtoa_r+0x25e>
 8006c52:	bf00      	nop
 8006c54:	f3af 8000 	nop.w
 8006c58:	636f4361 	.word	0x636f4361
 8006c5c:	3fd287a7 	.word	0x3fd287a7
 8006c60:	8b60c8b3 	.word	0x8b60c8b3
 8006c64:	3fc68a28 	.word	0x3fc68a28
 8006c68:	509f79fb 	.word	0x509f79fb
 8006c6c:	3fd34413 	.word	0x3fd34413
 8006c70:	0800a018 	.word	0x0800a018
 8006c74:	0800a02f 	.word	0x0800a02f
 8006c78:	7ff00000 	.word	0x7ff00000
 8006c7c:	0800a014 	.word	0x0800a014
 8006c80:	0800a00b 	.word	0x0800a00b
 8006c84:	08009fe3 	.word	0x08009fe3
 8006c88:	3ff80000 	.word	0x3ff80000
 8006c8c:	0800a120 	.word	0x0800a120
 8006c90:	0800a087 	.word	0x0800a087
 8006c94:	2301      	movs	r3, #1
 8006c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c98:	e7d4      	b.n	8006c44 <_dtoa_r+0x2ac>
 8006c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	9308      	str	r3, [sp, #32]
 8006ca0:	e7b7      	b.n	8006c12 <_dtoa_r+0x27a>
 8006ca2:	3101      	adds	r1, #1
 8006ca4:	0052      	lsls	r2, r2, #1
 8006ca6:	e7b7      	b.n	8006c18 <_dtoa_r+0x280>
 8006ca8:	69eb      	ldr	r3, [r5, #28]
 8006caa:	9a03      	ldr	r2, [sp, #12]
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	9b08      	ldr	r3, [sp, #32]
 8006cb0:	2b0e      	cmp	r3, #14
 8006cb2:	f200 80a8 	bhi.w	8006e06 <_dtoa_r+0x46e>
 8006cb6:	2c00      	cmp	r4, #0
 8006cb8:	f000 80a5 	beq.w	8006e06 <_dtoa_r+0x46e>
 8006cbc:	f1bb 0f00 	cmp.w	fp, #0
 8006cc0:	dd34      	ble.n	8006d2c <_dtoa_r+0x394>
 8006cc2:	4b9a      	ldr	r3, [pc, #616]	; (8006f2c <_dtoa_r+0x594>)
 8006cc4:	f00b 020f 	and.w	r2, fp, #15
 8006cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ccc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006cd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cd8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006cdc:	d016      	beq.n	8006d0c <_dtoa_r+0x374>
 8006cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ce2:	4b93      	ldr	r3, [pc, #588]	; (8006f30 <_dtoa_r+0x598>)
 8006ce4:	2703      	movs	r7, #3
 8006ce6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cea:	f7f9 fd1f 	bl	800072c <__aeabi_ddiv>
 8006cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cf2:	f004 040f 	and.w	r4, r4, #15
 8006cf6:	4e8e      	ldr	r6, [pc, #568]	; (8006f30 <_dtoa_r+0x598>)
 8006cf8:	b954      	cbnz	r4, 8006d10 <_dtoa_r+0x378>
 8006cfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d02:	f7f9 fd13 	bl	800072c <__aeabi_ddiv>
 8006d06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d0a:	e029      	b.n	8006d60 <_dtoa_r+0x3c8>
 8006d0c:	2702      	movs	r7, #2
 8006d0e:	e7f2      	b.n	8006cf6 <_dtoa_r+0x35e>
 8006d10:	07e1      	lsls	r1, r4, #31
 8006d12:	d508      	bpl.n	8006d26 <_dtoa_r+0x38e>
 8006d14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d1c:	f7f9 fbdc 	bl	80004d8 <__aeabi_dmul>
 8006d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d24:	3701      	adds	r7, #1
 8006d26:	1064      	asrs	r4, r4, #1
 8006d28:	3608      	adds	r6, #8
 8006d2a:	e7e5      	b.n	8006cf8 <_dtoa_r+0x360>
 8006d2c:	f000 80a5 	beq.w	8006e7a <_dtoa_r+0x4e2>
 8006d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d34:	f1cb 0400 	rsb	r4, fp, #0
 8006d38:	4b7c      	ldr	r3, [pc, #496]	; (8006f2c <_dtoa_r+0x594>)
 8006d3a:	f004 020f 	and.w	r2, r4, #15
 8006d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fbc7 	bl	80004d8 <__aeabi_dmul>
 8006d4a:	2702      	movs	r7, #2
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d52:	4e77      	ldr	r6, [pc, #476]	; (8006f30 <_dtoa_r+0x598>)
 8006d54:	1124      	asrs	r4, r4, #4
 8006d56:	2c00      	cmp	r4, #0
 8006d58:	f040 8084 	bne.w	8006e64 <_dtoa_r+0x4cc>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1d2      	bne.n	8006d06 <_dtoa_r+0x36e>
 8006d60:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8087 	beq.w	8006e7e <_dtoa_r+0x4e6>
 8006d70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d74:	2200      	movs	r2, #0
 8006d76:	4b6f      	ldr	r3, [pc, #444]	; (8006f34 <_dtoa_r+0x59c>)
 8006d78:	f7f9 fe20 	bl	80009bc <__aeabi_dcmplt>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d07e      	beq.n	8006e7e <_dtoa_r+0x4e6>
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d07b      	beq.n	8006e7e <_dtoa_r+0x4e6>
 8006d86:	9b06      	ldr	r3, [sp, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dd38      	ble.n	8006dfe <_dtoa_r+0x466>
 8006d8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d90:	2200      	movs	r2, #0
 8006d92:	4b69      	ldr	r3, [pc, #420]	; (8006f38 <_dtoa_r+0x5a0>)
 8006d94:	f7f9 fba0 	bl	80004d8 <__aeabi_dmul>
 8006d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d9c:	9c06      	ldr	r4, [sp, #24]
 8006d9e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006da2:	3701      	adds	r7, #1
 8006da4:	4638      	mov	r0, r7
 8006da6:	f7f9 fb2d 	bl	8000404 <__aeabi_i2d>
 8006daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dae:	f7f9 fb93 	bl	80004d8 <__aeabi_dmul>
 8006db2:	2200      	movs	r2, #0
 8006db4:	4b61      	ldr	r3, [pc, #388]	; (8006f3c <_dtoa_r+0x5a4>)
 8006db6:	f7f9 f9d9 	bl	800016c <__adddf3>
 8006dba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006dbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dc2:	9611      	str	r6, [sp, #68]	; 0x44
 8006dc4:	2c00      	cmp	r4, #0
 8006dc6:	d15d      	bne.n	8006e84 <_dtoa_r+0x4ec>
 8006dc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4b5c      	ldr	r3, [pc, #368]	; (8006f40 <_dtoa_r+0x5a8>)
 8006dd0:	f7f9 f9ca 	bl	8000168 <__aeabi_dsub>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ddc:	4633      	mov	r3, r6
 8006dde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006de0:	f7f9 fe0a 	bl	80009f8 <__aeabi_dcmpgt>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f040 8295 	bne.w	8007314 <_dtoa_r+0x97c>
 8006dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006df0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006df4:	f7f9 fde2 	bl	80009bc <__aeabi_dcmplt>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	f040 8289 	bne.w	8007310 <_dtoa_r+0x978>
 8006dfe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006e02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f2c0 8151 	blt.w	80070b0 <_dtoa_r+0x718>
 8006e0e:	f1bb 0f0e 	cmp.w	fp, #14
 8006e12:	f300 814d 	bgt.w	80070b0 <_dtoa_r+0x718>
 8006e16:	4b45      	ldr	r3, [pc, #276]	; (8006f2c <_dtoa_r+0x594>)
 8006e18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f280 80da 	bge.w	8006fe0 <_dtoa_r+0x648>
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f300 80d6 	bgt.w	8006fe0 <_dtoa_r+0x648>
 8006e34:	f040 826b 	bne.w	800730e <_dtoa_r+0x976>
 8006e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4b40      	ldr	r3, [pc, #256]	; (8006f40 <_dtoa_r+0x5a8>)
 8006e40:	f7f9 fb4a 	bl	80004d8 <__aeabi_dmul>
 8006e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e48:	f7f9 fdcc 	bl	80009e4 <__aeabi_dcmpge>
 8006e4c:	9c08      	ldr	r4, [sp, #32]
 8006e4e:	4626      	mov	r6, r4
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f040 8241 	bne.w	80072d8 <_dtoa_r+0x940>
 8006e56:	2331      	movs	r3, #49	; 0x31
 8006e58:	9f03      	ldr	r7, [sp, #12]
 8006e5a:	f10b 0b01 	add.w	fp, fp, #1
 8006e5e:	f807 3b01 	strb.w	r3, [r7], #1
 8006e62:	e23d      	b.n	80072e0 <_dtoa_r+0x948>
 8006e64:	07e2      	lsls	r2, r4, #31
 8006e66:	d505      	bpl.n	8006e74 <_dtoa_r+0x4dc>
 8006e68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e6c:	f7f9 fb34 	bl	80004d8 <__aeabi_dmul>
 8006e70:	2301      	movs	r3, #1
 8006e72:	3701      	adds	r7, #1
 8006e74:	1064      	asrs	r4, r4, #1
 8006e76:	3608      	adds	r6, #8
 8006e78:	e76d      	b.n	8006d56 <_dtoa_r+0x3be>
 8006e7a:	2702      	movs	r7, #2
 8006e7c:	e770      	b.n	8006d60 <_dtoa_r+0x3c8>
 8006e7e:	46d8      	mov	r8, fp
 8006e80:	9c08      	ldr	r4, [sp, #32]
 8006e82:	e78f      	b.n	8006da4 <_dtoa_r+0x40c>
 8006e84:	9903      	ldr	r1, [sp, #12]
 8006e86:	4b29      	ldr	r3, [pc, #164]	; (8006f2c <_dtoa_r+0x594>)
 8006e88:	4421      	add	r1, r4
 8006e8a:	9112      	str	r1, [sp, #72]	; 0x48
 8006e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e9a:	2900      	cmp	r1, #0
 8006e9c:	d054      	beq.n	8006f48 <_dtoa_r+0x5b0>
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	4928      	ldr	r1, [pc, #160]	; (8006f44 <_dtoa_r+0x5ac>)
 8006ea2:	f7f9 fc43 	bl	800072c <__aeabi_ddiv>
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	f7f9 f95d 	bl	8000168 <__aeabi_dsub>
 8006eae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006eb2:	9f03      	ldr	r7, [sp, #12]
 8006eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb8:	f7f9 fdbe 	bl	8000a38 <__aeabi_d2iz>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	f7f9 faa1 	bl	8000404 <__aeabi_i2d>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eca:	f7f9 f94d 	bl	8000168 <__aeabi_dsub>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	3430      	adds	r4, #48	; 0x30
 8006ed4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ed8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006edc:	f807 4b01 	strb.w	r4, [r7], #1
 8006ee0:	f7f9 fd6c 	bl	80009bc <__aeabi_dcmplt>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d173      	bne.n	8006fd0 <_dtoa_r+0x638>
 8006ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eec:	2000      	movs	r0, #0
 8006eee:	4911      	ldr	r1, [pc, #68]	; (8006f34 <_dtoa_r+0x59c>)
 8006ef0:	f7f9 f93a 	bl	8000168 <__aeabi_dsub>
 8006ef4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ef8:	f7f9 fd60 	bl	80009bc <__aeabi_dcmplt>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f040 80b6 	bne.w	800706e <_dtoa_r+0x6d6>
 8006f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f04:	429f      	cmp	r7, r3
 8006f06:	f43f af7a 	beq.w	8006dfe <_dtoa_r+0x466>
 8006f0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <_dtoa_r+0x5a0>)
 8006f12:	f7f9 fae1 	bl	80004d8 <__aeabi_dmul>
 8006f16:	2200      	movs	r2, #0
 8006f18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <_dtoa_r+0x5a0>)
 8006f22:	f7f9 fad9 	bl	80004d8 <__aeabi_dmul>
 8006f26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f2a:	e7c3      	b.n	8006eb4 <_dtoa_r+0x51c>
 8006f2c:	0800a120 	.word	0x0800a120
 8006f30:	0800a0f8 	.word	0x0800a0f8
 8006f34:	3ff00000 	.word	0x3ff00000
 8006f38:	40240000 	.word	0x40240000
 8006f3c:	401c0000 	.word	0x401c0000
 8006f40:	40140000 	.word	0x40140000
 8006f44:	3fe00000 	.word	0x3fe00000
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	f7f9 fac4 	bl	80004d8 <__aeabi_dmul>
 8006f50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f56:	9c03      	ldr	r4, [sp, #12]
 8006f58:	9314      	str	r3, [sp, #80]	; 0x50
 8006f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f5e:	f7f9 fd6b 	bl	8000a38 <__aeabi_d2iz>
 8006f62:	9015      	str	r0, [sp, #84]	; 0x54
 8006f64:	f7f9 fa4e 	bl	8000404 <__aeabi_i2d>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f70:	f7f9 f8fa 	bl	8000168 <__aeabi_dsub>
 8006f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f76:	4606      	mov	r6, r0
 8006f78:	3330      	adds	r3, #48	; 0x30
 8006f7a:	f804 3b01 	strb.w	r3, [r4], #1
 8006f7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f80:	460f      	mov	r7, r1
 8006f82:	429c      	cmp	r4, r3
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	d124      	bne.n	8006fd4 <_dtoa_r+0x63c>
 8006f8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f8e:	4baf      	ldr	r3, [pc, #700]	; (800724c <_dtoa_r+0x8b4>)
 8006f90:	f7f9 f8ec 	bl	800016c <__adddf3>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4630      	mov	r0, r6
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	f7f9 fd2c 	bl	80009f8 <__aeabi_dcmpgt>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d163      	bne.n	800706c <_dtoa_r+0x6d4>
 8006fa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fa8:	2000      	movs	r0, #0
 8006faa:	49a8      	ldr	r1, [pc, #672]	; (800724c <_dtoa_r+0x8b4>)
 8006fac:	f7f9 f8dc 	bl	8000168 <__aeabi_dsub>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	f7f9 fd00 	bl	80009bc <__aeabi_dcmplt>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f43f af1e 	beq.w	8006dfe <_dtoa_r+0x466>
 8006fc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006fc4:	1e7b      	subs	r3, r7, #1
 8006fc6:	9314      	str	r3, [sp, #80]	; 0x50
 8006fc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006fcc:	2b30      	cmp	r3, #48	; 0x30
 8006fce:	d0f8      	beq.n	8006fc2 <_dtoa_r+0x62a>
 8006fd0:	46c3      	mov	fp, r8
 8006fd2:	e03b      	b.n	800704c <_dtoa_r+0x6b4>
 8006fd4:	4b9e      	ldr	r3, [pc, #632]	; (8007250 <_dtoa_r+0x8b8>)
 8006fd6:	f7f9 fa7f 	bl	80004d8 <__aeabi_dmul>
 8006fda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fde:	e7bc      	b.n	8006f5a <_dtoa_r+0x5c2>
 8006fe0:	9f03      	ldr	r7, [sp, #12]
 8006fe2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006fe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	f7f9 fb9d 	bl	800072c <__aeabi_ddiv>
 8006ff2:	f7f9 fd21 	bl	8000a38 <__aeabi_d2iz>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	f7f9 fa04 	bl	8000404 <__aeabi_i2d>
 8006ffc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007000:	f7f9 fa6a 	bl	80004d8 <__aeabi_dmul>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4640      	mov	r0, r8
 800700a:	4649      	mov	r1, r9
 800700c:	f7f9 f8ac 	bl	8000168 <__aeabi_dsub>
 8007010:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007014:	f807 6b01 	strb.w	r6, [r7], #1
 8007018:	9e03      	ldr	r6, [sp, #12]
 800701a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800701e:	1bbe      	subs	r6, r7, r6
 8007020:	45b4      	cmp	ip, r6
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	d136      	bne.n	8007096 <_dtoa_r+0x6fe>
 8007028:	f7f9 f8a0 	bl	800016c <__adddf3>
 800702c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007030:	4680      	mov	r8, r0
 8007032:	4689      	mov	r9, r1
 8007034:	f7f9 fce0 	bl	80009f8 <__aeabi_dcmpgt>
 8007038:	bb58      	cbnz	r0, 8007092 <_dtoa_r+0x6fa>
 800703a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800703e:	4640      	mov	r0, r8
 8007040:	4649      	mov	r1, r9
 8007042:	f7f9 fcb1 	bl	80009a8 <__aeabi_dcmpeq>
 8007046:	b108      	cbz	r0, 800704c <_dtoa_r+0x6b4>
 8007048:	07e3      	lsls	r3, r4, #31
 800704a:	d422      	bmi.n	8007092 <_dtoa_r+0x6fa>
 800704c:	4651      	mov	r1, sl
 800704e:	4628      	mov	r0, r5
 8007050:	f000 fbc2 	bl	80077d8 <_Bfree>
 8007054:	2300      	movs	r3, #0
 8007056:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007058:	703b      	strb	r3, [r7, #0]
 800705a:	f10b 0301 	add.w	r3, fp, #1
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007062:	2b00      	cmp	r3, #0
 8007064:	f43f ace6 	beq.w	8006a34 <_dtoa_r+0x9c>
 8007068:	601f      	str	r7, [r3, #0]
 800706a:	e4e3      	b.n	8006a34 <_dtoa_r+0x9c>
 800706c:	4627      	mov	r7, r4
 800706e:	463b      	mov	r3, r7
 8007070:	461f      	mov	r7, r3
 8007072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007076:	2a39      	cmp	r2, #57	; 0x39
 8007078:	d107      	bne.n	800708a <_dtoa_r+0x6f2>
 800707a:	9a03      	ldr	r2, [sp, #12]
 800707c:	429a      	cmp	r2, r3
 800707e:	d1f7      	bne.n	8007070 <_dtoa_r+0x6d8>
 8007080:	2230      	movs	r2, #48	; 0x30
 8007082:	9903      	ldr	r1, [sp, #12]
 8007084:	f108 0801 	add.w	r8, r8, #1
 8007088:	700a      	strb	r2, [r1, #0]
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	3201      	adds	r2, #1
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e79e      	b.n	8006fd0 <_dtoa_r+0x638>
 8007092:	46d8      	mov	r8, fp
 8007094:	e7eb      	b.n	800706e <_dtoa_r+0x6d6>
 8007096:	2200      	movs	r2, #0
 8007098:	4b6d      	ldr	r3, [pc, #436]	; (8007250 <_dtoa_r+0x8b8>)
 800709a:	f7f9 fa1d 	bl	80004d8 <__aeabi_dmul>
 800709e:	2200      	movs	r2, #0
 80070a0:	2300      	movs	r3, #0
 80070a2:	4680      	mov	r8, r0
 80070a4:	4689      	mov	r9, r1
 80070a6:	f7f9 fc7f 	bl	80009a8 <__aeabi_dcmpeq>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d09b      	beq.n	8006fe6 <_dtoa_r+0x64e>
 80070ae:	e7cd      	b.n	800704c <_dtoa_r+0x6b4>
 80070b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070b2:	2a00      	cmp	r2, #0
 80070b4:	f000 80c4 	beq.w	8007240 <_dtoa_r+0x8a8>
 80070b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070ba:	2a01      	cmp	r2, #1
 80070bc:	f300 80a8 	bgt.w	8007210 <_dtoa_r+0x878>
 80070c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070c2:	2a00      	cmp	r2, #0
 80070c4:	f000 80a0 	beq.w	8007208 <_dtoa_r+0x870>
 80070c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070cc:	464f      	mov	r7, r9
 80070ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d2:	2101      	movs	r1, #1
 80070d4:	441a      	add	r2, r3
 80070d6:	4628      	mov	r0, r5
 80070d8:	4499      	add	r9, r3
 80070da:	9209      	str	r2, [sp, #36]	; 0x24
 80070dc:	f000 fc7c 	bl	80079d8 <__i2b>
 80070e0:	4606      	mov	r6, r0
 80070e2:	b15f      	cbz	r7, 80070fc <_dtoa_r+0x764>
 80070e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dd08      	ble.n	80070fc <_dtoa_r+0x764>
 80070ea:	42bb      	cmp	r3, r7
 80070ec:	bfa8      	it	ge
 80070ee:	463b      	movge	r3, r7
 80070f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f2:	eba9 0903 	sub.w	r9, r9, r3
 80070f6:	1aff      	subs	r7, r7, r3
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	9309      	str	r3, [sp, #36]	; 0x24
 80070fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070fe:	b1f3      	cbz	r3, 800713e <_dtoa_r+0x7a6>
 8007100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 80a0 	beq.w	8007248 <_dtoa_r+0x8b0>
 8007108:	2c00      	cmp	r4, #0
 800710a:	dd10      	ble.n	800712e <_dtoa_r+0x796>
 800710c:	4631      	mov	r1, r6
 800710e:	4622      	mov	r2, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 fd1f 	bl	8007b54 <__pow5mult>
 8007116:	4652      	mov	r2, sl
 8007118:	4601      	mov	r1, r0
 800711a:	4606      	mov	r6, r0
 800711c:	4628      	mov	r0, r5
 800711e:	f000 fc71 	bl	8007a04 <__multiply>
 8007122:	4680      	mov	r8, r0
 8007124:	4651      	mov	r1, sl
 8007126:	4628      	mov	r0, r5
 8007128:	f000 fb56 	bl	80077d8 <_Bfree>
 800712c:	46c2      	mov	sl, r8
 800712e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007130:	1b1a      	subs	r2, r3, r4
 8007132:	d004      	beq.n	800713e <_dtoa_r+0x7a6>
 8007134:	4651      	mov	r1, sl
 8007136:	4628      	mov	r0, r5
 8007138:	f000 fd0c 	bl	8007b54 <__pow5mult>
 800713c:	4682      	mov	sl, r0
 800713e:	2101      	movs	r1, #1
 8007140:	4628      	mov	r0, r5
 8007142:	f000 fc49 	bl	80079d8 <__i2b>
 8007146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007148:	4604      	mov	r4, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	f340 8082 	ble.w	8007254 <_dtoa_r+0x8bc>
 8007150:	461a      	mov	r2, r3
 8007152:	4601      	mov	r1, r0
 8007154:	4628      	mov	r0, r5
 8007156:	f000 fcfd 	bl	8007b54 <__pow5mult>
 800715a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800715c:	4604      	mov	r4, r0
 800715e:	2b01      	cmp	r3, #1
 8007160:	dd7b      	ble.n	800725a <_dtoa_r+0x8c2>
 8007162:	f04f 0800 	mov.w	r8, #0
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800716c:	6918      	ldr	r0, [r3, #16]
 800716e:	f000 fbe5 	bl	800793c <__hi0bits>
 8007172:	f1c0 0020 	rsb	r0, r0, #32
 8007176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007178:	4418      	add	r0, r3
 800717a:	f010 001f 	ands.w	r0, r0, #31
 800717e:	f000 8092 	beq.w	80072a6 <_dtoa_r+0x90e>
 8007182:	f1c0 0320 	rsb	r3, r0, #32
 8007186:	2b04      	cmp	r3, #4
 8007188:	f340 8085 	ble.w	8007296 <_dtoa_r+0x8fe>
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	f1c0 001c 	rsb	r0, r0, #28
 8007192:	4403      	add	r3, r0
 8007194:	4481      	add	r9, r0
 8007196:	4407      	add	r7, r0
 8007198:	9309      	str	r3, [sp, #36]	; 0x24
 800719a:	f1b9 0f00 	cmp.w	r9, #0
 800719e:	dd05      	ble.n	80071ac <_dtoa_r+0x814>
 80071a0:	4651      	mov	r1, sl
 80071a2:	464a      	mov	r2, r9
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 fd2f 	bl	8007c08 <__lshift>
 80071aa:	4682      	mov	sl, r0
 80071ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd05      	ble.n	80071be <_dtoa_r+0x826>
 80071b2:	4621      	mov	r1, r4
 80071b4:	461a      	mov	r2, r3
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 fd26 	bl	8007c08 <__lshift>
 80071bc:	4604      	mov	r4, r0
 80071be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d072      	beq.n	80072aa <_dtoa_r+0x912>
 80071c4:	4621      	mov	r1, r4
 80071c6:	4650      	mov	r0, sl
 80071c8:	f000 fd8a 	bl	8007ce0 <__mcmp>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	da6c      	bge.n	80072aa <_dtoa_r+0x912>
 80071d0:	2300      	movs	r3, #0
 80071d2:	4651      	mov	r1, sl
 80071d4:	220a      	movs	r2, #10
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 fb20 	bl	800781c <__multadd>
 80071dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071de:	4682      	mov	sl, r0
 80071e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 81ac 	beq.w	8007542 <_dtoa_r+0xbaa>
 80071ea:	2300      	movs	r3, #0
 80071ec:	4631      	mov	r1, r6
 80071ee:	220a      	movs	r2, #10
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 fb13 	bl	800781c <__multadd>
 80071f6:	9b06      	ldr	r3, [sp, #24]
 80071f8:	4606      	mov	r6, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f300 8093 	bgt.w	8007326 <_dtoa_r+0x98e>
 8007200:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007202:	2b02      	cmp	r3, #2
 8007204:	dc59      	bgt.n	80072ba <_dtoa_r+0x922>
 8007206:	e08e      	b.n	8007326 <_dtoa_r+0x98e>
 8007208:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800720a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800720e:	e75d      	b.n	80070cc <_dtoa_r+0x734>
 8007210:	9b08      	ldr	r3, [sp, #32]
 8007212:	1e5c      	subs	r4, r3, #1
 8007214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007216:	42a3      	cmp	r3, r4
 8007218:	bfbf      	itttt	lt
 800721a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800721c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800721e:	1ae3      	sublt	r3, r4, r3
 8007220:	18d2      	addlt	r2, r2, r3
 8007222:	bfa8      	it	ge
 8007224:	1b1c      	subge	r4, r3, r4
 8007226:	9b08      	ldr	r3, [sp, #32]
 8007228:	bfbe      	ittt	lt
 800722a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800722c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800722e:	2400      	movlt	r4, #0
 8007230:	2b00      	cmp	r3, #0
 8007232:	bfb5      	itete	lt
 8007234:	eba9 0703 	sublt.w	r7, r9, r3
 8007238:	464f      	movge	r7, r9
 800723a:	2300      	movlt	r3, #0
 800723c:	9b08      	ldrge	r3, [sp, #32]
 800723e:	e747      	b.n	80070d0 <_dtoa_r+0x738>
 8007240:	464f      	mov	r7, r9
 8007242:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007244:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007246:	e74c      	b.n	80070e2 <_dtoa_r+0x74a>
 8007248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800724a:	e773      	b.n	8007134 <_dtoa_r+0x79c>
 800724c:	3fe00000 	.word	0x3fe00000
 8007250:	40240000 	.word	0x40240000
 8007254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007256:	2b01      	cmp	r3, #1
 8007258:	dc18      	bgt.n	800728c <_dtoa_r+0x8f4>
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	b9b3      	cbnz	r3, 800728c <_dtoa_r+0x8f4>
 800725e:	9b05      	ldr	r3, [sp, #20]
 8007260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007264:	b993      	cbnz	r3, 800728c <_dtoa_r+0x8f4>
 8007266:	9b05      	ldr	r3, [sp, #20]
 8007268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800726c:	0d1b      	lsrs	r3, r3, #20
 800726e:	051b      	lsls	r3, r3, #20
 8007270:	b17b      	cbz	r3, 8007292 <_dtoa_r+0x8fa>
 8007272:	f04f 0801 	mov.w	r8, #1
 8007276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007278:	f109 0901 	add.w	r9, r9, #1
 800727c:	3301      	adds	r3, #1
 800727e:	9309      	str	r3, [sp, #36]	; 0x24
 8007280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007282:	2b00      	cmp	r3, #0
 8007284:	f47f af6f 	bne.w	8007166 <_dtoa_r+0x7ce>
 8007288:	2001      	movs	r0, #1
 800728a:	e774      	b.n	8007176 <_dtoa_r+0x7de>
 800728c:	f04f 0800 	mov.w	r8, #0
 8007290:	e7f6      	b.n	8007280 <_dtoa_r+0x8e8>
 8007292:	4698      	mov	r8, r3
 8007294:	e7f4      	b.n	8007280 <_dtoa_r+0x8e8>
 8007296:	d080      	beq.n	800719a <_dtoa_r+0x802>
 8007298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800729a:	331c      	adds	r3, #28
 800729c:	441a      	add	r2, r3
 800729e:	4499      	add	r9, r3
 80072a0:	441f      	add	r7, r3
 80072a2:	9209      	str	r2, [sp, #36]	; 0x24
 80072a4:	e779      	b.n	800719a <_dtoa_r+0x802>
 80072a6:	4603      	mov	r3, r0
 80072a8:	e7f6      	b.n	8007298 <_dtoa_r+0x900>
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dc34      	bgt.n	800731a <_dtoa_r+0x982>
 80072b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	dd31      	ble.n	800731a <_dtoa_r+0x982>
 80072b6:	9b08      	ldr	r3, [sp, #32]
 80072b8:	9306      	str	r3, [sp, #24]
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	b963      	cbnz	r3, 80072d8 <_dtoa_r+0x940>
 80072be:	4621      	mov	r1, r4
 80072c0:	2205      	movs	r2, #5
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 faaa 	bl	800781c <__multadd>
 80072c8:	4601      	mov	r1, r0
 80072ca:	4604      	mov	r4, r0
 80072cc:	4650      	mov	r0, sl
 80072ce:	f000 fd07 	bl	8007ce0 <__mcmp>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	f73f adbf 	bgt.w	8006e56 <_dtoa_r+0x4be>
 80072d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072da:	9f03      	ldr	r7, [sp, #12]
 80072dc:	ea6f 0b03 	mvn.w	fp, r3
 80072e0:	f04f 0800 	mov.w	r8, #0
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fa76 	bl	80077d8 <_Bfree>
 80072ec:	2e00      	cmp	r6, #0
 80072ee:	f43f aead 	beq.w	800704c <_dtoa_r+0x6b4>
 80072f2:	f1b8 0f00 	cmp.w	r8, #0
 80072f6:	d005      	beq.n	8007304 <_dtoa_r+0x96c>
 80072f8:	45b0      	cmp	r8, r6
 80072fa:	d003      	beq.n	8007304 <_dtoa_r+0x96c>
 80072fc:	4641      	mov	r1, r8
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 fa6a 	bl	80077d8 <_Bfree>
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	f000 fa66 	bl	80077d8 <_Bfree>
 800730c:	e69e      	b.n	800704c <_dtoa_r+0x6b4>
 800730e:	2400      	movs	r4, #0
 8007310:	4626      	mov	r6, r4
 8007312:	e7e1      	b.n	80072d8 <_dtoa_r+0x940>
 8007314:	46c3      	mov	fp, r8
 8007316:	4626      	mov	r6, r4
 8007318:	e59d      	b.n	8006e56 <_dtoa_r+0x4be>
 800731a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 80c8 	beq.w	80074b2 <_dtoa_r+0xb1a>
 8007322:	9b08      	ldr	r3, [sp, #32]
 8007324:	9306      	str	r3, [sp, #24]
 8007326:	2f00      	cmp	r7, #0
 8007328:	dd05      	ble.n	8007336 <_dtoa_r+0x99e>
 800732a:	4631      	mov	r1, r6
 800732c:	463a      	mov	r2, r7
 800732e:	4628      	mov	r0, r5
 8007330:	f000 fc6a 	bl	8007c08 <__lshift>
 8007334:	4606      	mov	r6, r0
 8007336:	f1b8 0f00 	cmp.w	r8, #0
 800733a:	d05b      	beq.n	80073f4 <_dtoa_r+0xa5c>
 800733c:	4628      	mov	r0, r5
 800733e:	6871      	ldr	r1, [r6, #4]
 8007340:	f000 fa0a 	bl	8007758 <_Balloc>
 8007344:	4607      	mov	r7, r0
 8007346:	b928      	cbnz	r0, 8007354 <_dtoa_r+0x9bc>
 8007348:	4602      	mov	r2, r0
 800734a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800734e:	4b81      	ldr	r3, [pc, #516]	; (8007554 <_dtoa_r+0xbbc>)
 8007350:	f7ff bb36 	b.w	80069c0 <_dtoa_r+0x28>
 8007354:	6932      	ldr	r2, [r6, #16]
 8007356:	f106 010c 	add.w	r1, r6, #12
 800735a:	3202      	adds	r2, #2
 800735c:	0092      	lsls	r2, r2, #2
 800735e:	300c      	adds	r0, #12
 8007360:	f7ff fa7c 	bl	800685c <memcpy>
 8007364:	2201      	movs	r2, #1
 8007366:	4639      	mov	r1, r7
 8007368:	4628      	mov	r0, r5
 800736a:	f000 fc4d 	bl	8007c08 <__lshift>
 800736e:	46b0      	mov	r8, r6
 8007370:	4606      	mov	r6, r0
 8007372:	9b03      	ldr	r3, [sp, #12]
 8007374:	9a03      	ldr	r2, [sp, #12]
 8007376:	3301      	adds	r3, #1
 8007378:	9308      	str	r3, [sp, #32]
 800737a:	9b06      	ldr	r3, [sp, #24]
 800737c:	4413      	add	r3, r2
 800737e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007380:	9b04      	ldr	r3, [sp, #16]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	930a      	str	r3, [sp, #40]	; 0x28
 8007388:	9b08      	ldr	r3, [sp, #32]
 800738a:	4621      	mov	r1, r4
 800738c:	3b01      	subs	r3, #1
 800738e:	4650      	mov	r0, sl
 8007390:	9304      	str	r3, [sp, #16]
 8007392:	f7ff fa75 	bl	8006880 <quorem>
 8007396:	4641      	mov	r1, r8
 8007398:	9006      	str	r0, [sp, #24]
 800739a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800739e:	4650      	mov	r0, sl
 80073a0:	f000 fc9e 	bl	8007ce0 <__mcmp>
 80073a4:	4632      	mov	r2, r6
 80073a6:	9009      	str	r0, [sp, #36]	; 0x24
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 fcb4 	bl	8007d18 <__mdiff>
 80073b0:	68c2      	ldr	r2, [r0, #12]
 80073b2:	4607      	mov	r7, r0
 80073b4:	bb02      	cbnz	r2, 80073f8 <_dtoa_r+0xa60>
 80073b6:	4601      	mov	r1, r0
 80073b8:	4650      	mov	r0, sl
 80073ba:	f000 fc91 	bl	8007ce0 <__mcmp>
 80073be:	4602      	mov	r2, r0
 80073c0:	4639      	mov	r1, r7
 80073c2:	4628      	mov	r0, r5
 80073c4:	920c      	str	r2, [sp, #48]	; 0x30
 80073c6:	f000 fa07 	bl	80077d8 <_Bfree>
 80073ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ce:	9f08      	ldr	r7, [sp, #32]
 80073d0:	ea43 0102 	orr.w	r1, r3, r2
 80073d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d6:	4319      	orrs	r1, r3
 80073d8:	d110      	bne.n	80073fc <_dtoa_r+0xa64>
 80073da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073de:	d029      	beq.n	8007434 <_dtoa_r+0xa9c>
 80073e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dd02      	ble.n	80073ec <_dtoa_r+0xa54>
 80073e6:	9b06      	ldr	r3, [sp, #24]
 80073e8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	f883 9000 	strb.w	r9, [r3]
 80073f2:	e777      	b.n	80072e4 <_dtoa_r+0x94c>
 80073f4:	4630      	mov	r0, r6
 80073f6:	e7ba      	b.n	800736e <_dtoa_r+0x9d6>
 80073f8:	2201      	movs	r2, #1
 80073fa:	e7e1      	b.n	80073c0 <_dtoa_r+0xa28>
 80073fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	db04      	blt.n	800740c <_dtoa_r+0xa74>
 8007402:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007404:	430b      	orrs	r3, r1
 8007406:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007408:	430b      	orrs	r3, r1
 800740a:	d120      	bne.n	800744e <_dtoa_r+0xab6>
 800740c:	2a00      	cmp	r2, #0
 800740e:	dded      	ble.n	80073ec <_dtoa_r+0xa54>
 8007410:	4651      	mov	r1, sl
 8007412:	2201      	movs	r2, #1
 8007414:	4628      	mov	r0, r5
 8007416:	f000 fbf7 	bl	8007c08 <__lshift>
 800741a:	4621      	mov	r1, r4
 800741c:	4682      	mov	sl, r0
 800741e:	f000 fc5f 	bl	8007ce0 <__mcmp>
 8007422:	2800      	cmp	r0, #0
 8007424:	dc03      	bgt.n	800742e <_dtoa_r+0xa96>
 8007426:	d1e1      	bne.n	80073ec <_dtoa_r+0xa54>
 8007428:	f019 0f01 	tst.w	r9, #1
 800742c:	d0de      	beq.n	80073ec <_dtoa_r+0xa54>
 800742e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007432:	d1d8      	bne.n	80073e6 <_dtoa_r+0xa4e>
 8007434:	2339      	movs	r3, #57	; 0x39
 8007436:	9a04      	ldr	r2, [sp, #16]
 8007438:	7013      	strb	r3, [r2, #0]
 800743a:	463b      	mov	r3, r7
 800743c:	461f      	mov	r7, r3
 800743e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007442:	3b01      	subs	r3, #1
 8007444:	2a39      	cmp	r2, #57	; 0x39
 8007446:	d06b      	beq.n	8007520 <_dtoa_r+0xb88>
 8007448:	3201      	adds	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e74a      	b.n	80072e4 <_dtoa_r+0x94c>
 800744e:	2a00      	cmp	r2, #0
 8007450:	dd07      	ble.n	8007462 <_dtoa_r+0xaca>
 8007452:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007456:	d0ed      	beq.n	8007434 <_dtoa_r+0xa9c>
 8007458:	9a04      	ldr	r2, [sp, #16]
 800745a:	f109 0301 	add.w	r3, r9, #1
 800745e:	7013      	strb	r3, [r2, #0]
 8007460:	e740      	b.n	80072e4 <_dtoa_r+0x94c>
 8007462:	9b08      	ldr	r3, [sp, #32]
 8007464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007466:	f803 9c01 	strb.w	r9, [r3, #-1]
 800746a:	4293      	cmp	r3, r2
 800746c:	d042      	beq.n	80074f4 <_dtoa_r+0xb5c>
 800746e:	4651      	mov	r1, sl
 8007470:	2300      	movs	r3, #0
 8007472:	220a      	movs	r2, #10
 8007474:	4628      	mov	r0, r5
 8007476:	f000 f9d1 	bl	800781c <__multadd>
 800747a:	45b0      	cmp	r8, r6
 800747c:	4682      	mov	sl, r0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	f04f 020a 	mov.w	r2, #10
 8007486:	4641      	mov	r1, r8
 8007488:	4628      	mov	r0, r5
 800748a:	d107      	bne.n	800749c <_dtoa_r+0xb04>
 800748c:	f000 f9c6 	bl	800781c <__multadd>
 8007490:	4680      	mov	r8, r0
 8007492:	4606      	mov	r6, r0
 8007494:	9b08      	ldr	r3, [sp, #32]
 8007496:	3301      	adds	r3, #1
 8007498:	9308      	str	r3, [sp, #32]
 800749a:	e775      	b.n	8007388 <_dtoa_r+0x9f0>
 800749c:	f000 f9be 	bl	800781c <__multadd>
 80074a0:	4631      	mov	r1, r6
 80074a2:	4680      	mov	r8, r0
 80074a4:	2300      	movs	r3, #0
 80074a6:	220a      	movs	r2, #10
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 f9b7 	bl	800781c <__multadd>
 80074ae:	4606      	mov	r6, r0
 80074b0:	e7f0      	b.n	8007494 <_dtoa_r+0xafc>
 80074b2:	9b08      	ldr	r3, [sp, #32]
 80074b4:	9306      	str	r3, [sp, #24]
 80074b6:	9f03      	ldr	r7, [sp, #12]
 80074b8:	4621      	mov	r1, r4
 80074ba:	4650      	mov	r0, sl
 80074bc:	f7ff f9e0 	bl	8006880 <quorem>
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074c6:	f807 9b01 	strb.w	r9, [r7], #1
 80074ca:	1afa      	subs	r2, r7, r3
 80074cc:	9b06      	ldr	r3, [sp, #24]
 80074ce:	4293      	cmp	r3, r2
 80074d0:	dd07      	ble.n	80074e2 <_dtoa_r+0xb4a>
 80074d2:	4651      	mov	r1, sl
 80074d4:	2300      	movs	r3, #0
 80074d6:	220a      	movs	r2, #10
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 f99f 	bl	800781c <__multadd>
 80074de:	4682      	mov	sl, r0
 80074e0:	e7ea      	b.n	80074b8 <_dtoa_r+0xb20>
 80074e2:	9b06      	ldr	r3, [sp, #24]
 80074e4:	f04f 0800 	mov.w	r8, #0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfcc      	ite	gt
 80074ec:	461f      	movgt	r7, r3
 80074ee:	2701      	movle	r7, #1
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	441f      	add	r7, r3
 80074f4:	4651      	mov	r1, sl
 80074f6:	2201      	movs	r2, #1
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 fb85 	bl	8007c08 <__lshift>
 80074fe:	4621      	mov	r1, r4
 8007500:	4682      	mov	sl, r0
 8007502:	f000 fbed 	bl	8007ce0 <__mcmp>
 8007506:	2800      	cmp	r0, #0
 8007508:	dc97      	bgt.n	800743a <_dtoa_r+0xaa2>
 800750a:	d102      	bne.n	8007512 <_dtoa_r+0xb7a>
 800750c:	f019 0f01 	tst.w	r9, #1
 8007510:	d193      	bne.n	800743a <_dtoa_r+0xaa2>
 8007512:	463b      	mov	r3, r7
 8007514:	461f      	mov	r7, r3
 8007516:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800751a:	2a30      	cmp	r2, #48	; 0x30
 800751c:	d0fa      	beq.n	8007514 <_dtoa_r+0xb7c>
 800751e:	e6e1      	b.n	80072e4 <_dtoa_r+0x94c>
 8007520:	9a03      	ldr	r2, [sp, #12]
 8007522:	429a      	cmp	r2, r3
 8007524:	d18a      	bne.n	800743c <_dtoa_r+0xaa4>
 8007526:	2331      	movs	r3, #49	; 0x31
 8007528:	f10b 0b01 	add.w	fp, fp, #1
 800752c:	e797      	b.n	800745e <_dtoa_r+0xac6>
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <_dtoa_r+0xbc0>)
 8007530:	f7ff ba9f 	b.w	8006a72 <_dtoa_r+0xda>
 8007534:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007536:	2b00      	cmp	r3, #0
 8007538:	f47f aa77 	bne.w	8006a2a <_dtoa_r+0x92>
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <_dtoa_r+0xbc4>)
 800753e:	f7ff ba98 	b.w	8006a72 <_dtoa_r+0xda>
 8007542:	9b06      	ldr	r3, [sp, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dcb6      	bgt.n	80074b6 <_dtoa_r+0xb1e>
 8007548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800754a:	2b02      	cmp	r3, #2
 800754c:	f73f aeb5 	bgt.w	80072ba <_dtoa_r+0x922>
 8007550:	e7b1      	b.n	80074b6 <_dtoa_r+0xb1e>
 8007552:	bf00      	nop
 8007554:	0800a087 	.word	0x0800a087
 8007558:	08009fe2 	.word	0x08009fe2
 800755c:	0800a00b 	.word	0x0800a00b

08007560 <_free_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4605      	mov	r5, r0
 8007564:	2900      	cmp	r1, #0
 8007566:	d040      	beq.n	80075ea <_free_r+0x8a>
 8007568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756c:	1f0c      	subs	r4, r1, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfb8      	it	lt
 8007572:	18e4      	addlt	r4, r4, r3
 8007574:	f000 f8e4 	bl	8007740 <__malloc_lock>
 8007578:	4a1c      	ldr	r2, [pc, #112]	; (80075ec <_free_r+0x8c>)
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	b933      	cbnz	r3, 800758c <_free_r+0x2c>
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	6014      	str	r4, [r2, #0]
 8007582:	4628      	mov	r0, r5
 8007584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007588:	f000 b8e0 	b.w	800774c <__malloc_unlock>
 800758c:	42a3      	cmp	r3, r4
 800758e:	d908      	bls.n	80075a2 <_free_r+0x42>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	1821      	adds	r1, r4, r0
 8007594:	428b      	cmp	r3, r1
 8007596:	bf01      	itttt	eq
 8007598:	6819      	ldreq	r1, [r3, #0]
 800759a:	685b      	ldreq	r3, [r3, #4]
 800759c:	1809      	addeq	r1, r1, r0
 800759e:	6021      	streq	r1, [r4, #0]
 80075a0:	e7ed      	b.n	800757e <_free_r+0x1e>
 80075a2:	461a      	mov	r2, r3
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	b10b      	cbz	r3, 80075ac <_free_r+0x4c>
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	d9fa      	bls.n	80075a2 <_free_r+0x42>
 80075ac:	6811      	ldr	r1, [r2, #0]
 80075ae:	1850      	adds	r0, r2, r1
 80075b0:	42a0      	cmp	r0, r4
 80075b2:	d10b      	bne.n	80075cc <_free_r+0x6c>
 80075b4:	6820      	ldr	r0, [r4, #0]
 80075b6:	4401      	add	r1, r0
 80075b8:	1850      	adds	r0, r2, r1
 80075ba:	4283      	cmp	r3, r0
 80075bc:	6011      	str	r1, [r2, #0]
 80075be:	d1e0      	bne.n	8007582 <_free_r+0x22>
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	4408      	add	r0, r1
 80075c6:	6010      	str	r0, [r2, #0]
 80075c8:	6053      	str	r3, [r2, #4]
 80075ca:	e7da      	b.n	8007582 <_free_r+0x22>
 80075cc:	d902      	bls.n	80075d4 <_free_r+0x74>
 80075ce:	230c      	movs	r3, #12
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	e7d6      	b.n	8007582 <_free_r+0x22>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	1821      	adds	r1, r4, r0
 80075d8:	428b      	cmp	r3, r1
 80075da:	bf01      	itttt	eq
 80075dc:	6819      	ldreq	r1, [r3, #0]
 80075de:	685b      	ldreq	r3, [r3, #4]
 80075e0:	1809      	addeq	r1, r1, r0
 80075e2:	6021      	streq	r1, [r4, #0]
 80075e4:	6063      	str	r3, [r4, #4]
 80075e6:	6054      	str	r4, [r2, #4]
 80075e8:	e7cb      	b.n	8007582 <_free_r+0x22>
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20000610 	.word	0x20000610

080075f0 <malloc>:
 80075f0:	4b02      	ldr	r3, [pc, #8]	; (80075fc <malloc+0xc>)
 80075f2:	4601      	mov	r1, r0
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	f000 b823 	b.w	8007640 <_malloc_r>
 80075fa:	bf00      	nop
 80075fc:	2000006c 	.word	0x2000006c

08007600 <sbrk_aligned>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4e0e      	ldr	r6, [pc, #56]	; (800763c <sbrk_aligned+0x3c>)
 8007604:	460c      	mov	r4, r1
 8007606:	6831      	ldr	r1, [r6, #0]
 8007608:	4605      	mov	r5, r0
 800760a:	b911      	cbnz	r1, 8007612 <sbrk_aligned+0x12>
 800760c:	f001 ffe4 	bl	80095d8 <_sbrk_r>
 8007610:	6030      	str	r0, [r6, #0]
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f001 ffdf 	bl	80095d8 <_sbrk_r>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d00a      	beq.n	8007634 <sbrk_aligned+0x34>
 800761e:	1cc4      	adds	r4, r0, #3
 8007620:	f024 0403 	bic.w	r4, r4, #3
 8007624:	42a0      	cmp	r0, r4
 8007626:	d007      	beq.n	8007638 <sbrk_aligned+0x38>
 8007628:	1a21      	subs	r1, r4, r0
 800762a:	4628      	mov	r0, r5
 800762c:	f001 ffd4 	bl	80095d8 <_sbrk_r>
 8007630:	3001      	adds	r0, #1
 8007632:	d101      	bne.n	8007638 <sbrk_aligned+0x38>
 8007634:	f04f 34ff 	mov.w	r4, #4294967295
 8007638:	4620      	mov	r0, r4
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	20000614 	.word	0x20000614

08007640 <_malloc_r>:
 8007640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007644:	1ccd      	adds	r5, r1, #3
 8007646:	f025 0503 	bic.w	r5, r5, #3
 800764a:	3508      	adds	r5, #8
 800764c:	2d0c      	cmp	r5, #12
 800764e:	bf38      	it	cc
 8007650:	250c      	movcc	r5, #12
 8007652:	2d00      	cmp	r5, #0
 8007654:	4607      	mov	r7, r0
 8007656:	db01      	blt.n	800765c <_malloc_r+0x1c>
 8007658:	42a9      	cmp	r1, r5
 800765a:	d905      	bls.n	8007668 <_malloc_r+0x28>
 800765c:	230c      	movs	r3, #12
 800765e:	2600      	movs	r6, #0
 8007660:	603b      	str	r3, [r7, #0]
 8007662:	4630      	mov	r0, r6
 8007664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007668:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800773c <_malloc_r+0xfc>
 800766c:	f000 f868 	bl	8007740 <__malloc_lock>
 8007670:	f8d8 3000 	ldr.w	r3, [r8]
 8007674:	461c      	mov	r4, r3
 8007676:	bb5c      	cbnz	r4, 80076d0 <_malloc_r+0x90>
 8007678:	4629      	mov	r1, r5
 800767a:	4638      	mov	r0, r7
 800767c:	f7ff ffc0 	bl	8007600 <sbrk_aligned>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	4604      	mov	r4, r0
 8007684:	d155      	bne.n	8007732 <_malloc_r+0xf2>
 8007686:	f8d8 4000 	ldr.w	r4, [r8]
 800768a:	4626      	mov	r6, r4
 800768c:	2e00      	cmp	r6, #0
 800768e:	d145      	bne.n	800771c <_malloc_r+0xdc>
 8007690:	2c00      	cmp	r4, #0
 8007692:	d048      	beq.n	8007726 <_malloc_r+0xe6>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	4631      	mov	r1, r6
 8007698:	4638      	mov	r0, r7
 800769a:	eb04 0903 	add.w	r9, r4, r3
 800769e:	f001 ff9b 	bl	80095d8 <_sbrk_r>
 80076a2:	4581      	cmp	r9, r0
 80076a4:	d13f      	bne.n	8007726 <_malloc_r+0xe6>
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	4638      	mov	r0, r7
 80076aa:	1a6d      	subs	r5, r5, r1
 80076ac:	4629      	mov	r1, r5
 80076ae:	f7ff ffa7 	bl	8007600 <sbrk_aligned>
 80076b2:	3001      	adds	r0, #1
 80076b4:	d037      	beq.n	8007726 <_malloc_r+0xe6>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	442b      	add	r3, r5
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	f8d8 3000 	ldr.w	r3, [r8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d038      	beq.n	8007736 <_malloc_r+0xf6>
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	42a2      	cmp	r2, r4
 80076c8:	d12b      	bne.n	8007722 <_malloc_r+0xe2>
 80076ca:	2200      	movs	r2, #0
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	e00f      	b.n	80076f0 <_malloc_r+0xb0>
 80076d0:	6822      	ldr	r2, [r4, #0]
 80076d2:	1b52      	subs	r2, r2, r5
 80076d4:	d41f      	bmi.n	8007716 <_malloc_r+0xd6>
 80076d6:	2a0b      	cmp	r2, #11
 80076d8:	d917      	bls.n	800770a <_malloc_r+0xca>
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	42a3      	cmp	r3, r4
 80076de:	6025      	str	r5, [r4, #0]
 80076e0:	bf18      	it	ne
 80076e2:	6059      	strne	r1, [r3, #4]
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	bf08      	it	eq
 80076e8:	f8c8 1000 	streq.w	r1, [r8]
 80076ec:	5162      	str	r2, [r4, r5]
 80076ee:	604b      	str	r3, [r1, #4]
 80076f0:	4638      	mov	r0, r7
 80076f2:	f104 060b 	add.w	r6, r4, #11
 80076f6:	f000 f829 	bl	800774c <__malloc_unlock>
 80076fa:	f026 0607 	bic.w	r6, r6, #7
 80076fe:	1d23      	adds	r3, r4, #4
 8007700:	1af2      	subs	r2, r6, r3
 8007702:	d0ae      	beq.n	8007662 <_malloc_r+0x22>
 8007704:	1b9b      	subs	r3, r3, r6
 8007706:	50a3      	str	r3, [r4, r2]
 8007708:	e7ab      	b.n	8007662 <_malloc_r+0x22>
 800770a:	42a3      	cmp	r3, r4
 800770c:	6862      	ldr	r2, [r4, #4]
 800770e:	d1dd      	bne.n	80076cc <_malloc_r+0x8c>
 8007710:	f8c8 2000 	str.w	r2, [r8]
 8007714:	e7ec      	b.n	80076f0 <_malloc_r+0xb0>
 8007716:	4623      	mov	r3, r4
 8007718:	6864      	ldr	r4, [r4, #4]
 800771a:	e7ac      	b.n	8007676 <_malloc_r+0x36>
 800771c:	4634      	mov	r4, r6
 800771e:	6876      	ldr	r6, [r6, #4]
 8007720:	e7b4      	b.n	800768c <_malloc_r+0x4c>
 8007722:	4613      	mov	r3, r2
 8007724:	e7cc      	b.n	80076c0 <_malloc_r+0x80>
 8007726:	230c      	movs	r3, #12
 8007728:	4638      	mov	r0, r7
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	f000 f80e 	bl	800774c <__malloc_unlock>
 8007730:	e797      	b.n	8007662 <_malloc_r+0x22>
 8007732:	6025      	str	r5, [r4, #0]
 8007734:	e7dc      	b.n	80076f0 <_malloc_r+0xb0>
 8007736:	605b      	str	r3, [r3, #4]
 8007738:	deff      	udf	#255	; 0xff
 800773a:	bf00      	nop
 800773c:	20000610 	.word	0x20000610

08007740 <__malloc_lock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_lock+0x8>)
 8007742:	f7ff b87b 	b.w	800683c <__retarget_lock_acquire_recursive>
 8007746:	bf00      	nop
 8007748:	2000060c 	.word	0x2000060c

0800774c <__malloc_unlock>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__malloc_unlock+0x8>)
 800774e:	f7ff b876 	b.w	800683e <__retarget_lock_release_recursive>
 8007752:	bf00      	nop
 8007754:	2000060c 	.word	0x2000060c

08007758 <_Balloc>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	69c6      	ldr	r6, [r0, #28]
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	b976      	cbnz	r6, 8007780 <_Balloc+0x28>
 8007762:	2010      	movs	r0, #16
 8007764:	f7ff ff44 	bl	80075f0 <malloc>
 8007768:	4602      	mov	r2, r0
 800776a:	61e0      	str	r0, [r4, #28]
 800776c:	b920      	cbnz	r0, 8007778 <_Balloc+0x20>
 800776e:	216b      	movs	r1, #107	; 0x6b
 8007770:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <_Balloc+0x78>)
 8007772:	4818      	ldr	r0, [pc, #96]	; (80077d4 <_Balloc+0x7c>)
 8007774:	f001 ff46 	bl	8009604 <__assert_func>
 8007778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800777c:	6006      	str	r6, [r0, #0]
 800777e:	60c6      	str	r6, [r0, #12]
 8007780:	69e6      	ldr	r6, [r4, #28]
 8007782:	68f3      	ldr	r3, [r6, #12]
 8007784:	b183      	cbz	r3, 80077a8 <_Balloc+0x50>
 8007786:	69e3      	ldr	r3, [r4, #28]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800778e:	b9b8      	cbnz	r0, 80077c0 <_Balloc+0x68>
 8007790:	2101      	movs	r1, #1
 8007792:	fa01 f605 	lsl.w	r6, r1, r5
 8007796:	1d72      	adds	r2, r6, #5
 8007798:	4620      	mov	r0, r4
 800779a:	0092      	lsls	r2, r2, #2
 800779c:	f001 ff50 	bl	8009640 <_calloc_r>
 80077a0:	b160      	cbz	r0, 80077bc <_Balloc+0x64>
 80077a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077a6:	e00e      	b.n	80077c6 <_Balloc+0x6e>
 80077a8:	2221      	movs	r2, #33	; 0x21
 80077aa:	2104      	movs	r1, #4
 80077ac:	4620      	mov	r0, r4
 80077ae:	f001 ff47 	bl	8009640 <_calloc_r>
 80077b2:	69e3      	ldr	r3, [r4, #28]
 80077b4:	60f0      	str	r0, [r6, #12]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e4      	bne.n	8007786 <_Balloc+0x2e>
 80077bc:	2000      	movs	r0, #0
 80077be:	bd70      	pop	{r4, r5, r6, pc}
 80077c0:	6802      	ldr	r2, [r0, #0]
 80077c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077c6:	2300      	movs	r3, #0
 80077c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077cc:	e7f7      	b.n	80077be <_Balloc+0x66>
 80077ce:	bf00      	nop
 80077d0:	0800a018 	.word	0x0800a018
 80077d4:	0800a098 	.word	0x0800a098

080077d8 <_Bfree>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	69c6      	ldr	r6, [r0, #28]
 80077dc:	4605      	mov	r5, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	b976      	cbnz	r6, 8007800 <_Bfree+0x28>
 80077e2:	2010      	movs	r0, #16
 80077e4:	f7ff ff04 	bl	80075f0 <malloc>
 80077e8:	4602      	mov	r2, r0
 80077ea:	61e8      	str	r0, [r5, #28]
 80077ec:	b920      	cbnz	r0, 80077f8 <_Bfree+0x20>
 80077ee:	218f      	movs	r1, #143	; 0x8f
 80077f0:	4b08      	ldr	r3, [pc, #32]	; (8007814 <_Bfree+0x3c>)
 80077f2:	4809      	ldr	r0, [pc, #36]	; (8007818 <_Bfree+0x40>)
 80077f4:	f001 ff06 	bl	8009604 <__assert_func>
 80077f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077fc:	6006      	str	r6, [r0, #0]
 80077fe:	60c6      	str	r6, [r0, #12]
 8007800:	b13c      	cbz	r4, 8007812 <_Bfree+0x3a>
 8007802:	69eb      	ldr	r3, [r5, #28]
 8007804:	6862      	ldr	r2, [r4, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800780c:	6021      	str	r1, [r4, #0]
 800780e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	0800a018 	.word	0x0800a018
 8007818:	0800a098 	.word	0x0800a098

0800781c <__multadd>:
 800781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007820:	4607      	mov	r7, r0
 8007822:	460c      	mov	r4, r1
 8007824:	461e      	mov	r6, r3
 8007826:	2000      	movs	r0, #0
 8007828:	690d      	ldr	r5, [r1, #16]
 800782a:	f101 0c14 	add.w	ip, r1, #20
 800782e:	f8dc 3000 	ldr.w	r3, [ip]
 8007832:	3001      	adds	r0, #1
 8007834:	b299      	uxth	r1, r3
 8007836:	fb02 6101 	mla	r1, r2, r1, r6
 800783a:	0c1e      	lsrs	r6, r3, #16
 800783c:	0c0b      	lsrs	r3, r1, #16
 800783e:	fb02 3306 	mla	r3, r2, r6, r3
 8007842:	b289      	uxth	r1, r1
 8007844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007848:	4285      	cmp	r5, r0
 800784a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800784e:	f84c 1b04 	str.w	r1, [ip], #4
 8007852:	dcec      	bgt.n	800782e <__multadd+0x12>
 8007854:	b30e      	cbz	r6, 800789a <__multadd+0x7e>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	42ab      	cmp	r3, r5
 800785a:	dc19      	bgt.n	8007890 <__multadd+0x74>
 800785c:	6861      	ldr	r1, [r4, #4]
 800785e:	4638      	mov	r0, r7
 8007860:	3101      	adds	r1, #1
 8007862:	f7ff ff79 	bl	8007758 <_Balloc>
 8007866:	4680      	mov	r8, r0
 8007868:	b928      	cbnz	r0, 8007876 <__multadd+0x5a>
 800786a:	4602      	mov	r2, r0
 800786c:	21ba      	movs	r1, #186	; 0xba
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <__multadd+0x84>)
 8007870:	480c      	ldr	r0, [pc, #48]	; (80078a4 <__multadd+0x88>)
 8007872:	f001 fec7 	bl	8009604 <__assert_func>
 8007876:	6922      	ldr	r2, [r4, #16]
 8007878:	f104 010c 	add.w	r1, r4, #12
 800787c:	3202      	adds	r2, #2
 800787e:	0092      	lsls	r2, r2, #2
 8007880:	300c      	adds	r0, #12
 8007882:	f7fe ffeb 	bl	800685c <memcpy>
 8007886:	4621      	mov	r1, r4
 8007888:	4638      	mov	r0, r7
 800788a:	f7ff ffa5 	bl	80077d8 <_Bfree>
 800788e:	4644      	mov	r4, r8
 8007890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007894:	3501      	adds	r5, #1
 8007896:	615e      	str	r6, [r3, #20]
 8007898:	6125      	str	r5, [r4, #16]
 800789a:	4620      	mov	r0, r4
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a0:	0800a087 	.word	0x0800a087
 80078a4:	0800a098 	.word	0x0800a098

080078a8 <__s2b>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	4615      	mov	r5, r2
 80078ae:	2209      	movs	r2, #9
 80078b0:	461f      	mov	r7, r3
 80078b2:	3308      	adds	r3, #8
 80078b4:	460c      	mov	r4, r1
 80078b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ba:	4606      	mov	r6, r0
 80078bc:	2201      	movs	r2, #1
 80078be:	2100      	movs	r1, #0
 80078c0:	429a      	cmp	r2, r3
 80078c2:	db09      	blt.n	80078d8 <__s2b+0x30>
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7ff ff47 	bl	8007758 <_Balloc>
 80078ca:	b940      	cbnz	r0, 80078de <__s2b+0x36>
 80078cc:	4602      	mov	r2, r0
 80078ce:	21d3      	movs	r1, #211	; 0xd3
 80078d0:	4b18      	ldr	r3, [pc, #96]	; (8007934 <__s2b+0x8c>)
 80078d2:	4819      	ldr	r0, [pc, #100]	; (8007938 <__s2b+0x90>)
 80078d4:	f001 fe96 	bl	8009604 <__assert_func>
 80078d8:	0052      	lsls	r2, r2, #1
 80078da:	3101      	adds	r1, #1
 80078dc:	e7f0      	b.n	80078c0 <__s2b+0x18>
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	2d09      	cmp	r5, #9
 80078e2:	6143      	str	r3, [r0, #20]
 80078e4:	f04f 0301 	mov.w	r3, #1
 80078e8:	6103      	str	r3, [r0, #16]
 80078ea:	dd16      	ble.n	800791a <__s2b+0x72>
 80078ec:	f104 0909 	add.w	r9, r4, #9
 80078f0:	46c8      	mov	r8, r9
 80078f2:	442c      	add	r4, r5
 80078f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078f8:	4601      	mov	r1, r0
 80078fa:	220a      	movs	r2, #10
 80078fc:	4630      	mov	r0, r6
 80078fe:	3b30      	subs	r3, #48	; 0x30
 8007900:	f7ff ff8c 	bl	800781c <__multadd>
 8007904:	45a0      	cmp	r8, r4
 8007906:	d1f5      	bne.n	80078f4 <__s2b+0x4c>
 8007908:	f1a5 0408 	sub.w	r4, r5, #8
 800790c:	444c      	add	r4, r9
 800790e:	1b2d      	subs	r5, r5, r4
 8007910:	1963      	adds	r3, r4, r5
 8007912:	42bb      	cmp	r3, r7
 8007914:	db04      	blt.n	8007920 <__s2b+0x78>
 8007916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791a:	2509      	movs	r5, #9
 800791c:	340a      	adds	r4, #10
 800791e:	e7f6      	b.n	800790e <__s2b+0x66>
 8007920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007924:	4601      	mov	r1, r0
 8007926:	220a      	movs	r2, #10
 8007928:	4630      	mov	r0, r6
 800792a:	3b30      	subs	r3, #48	; 0x30
 800792c:	f7ff ff76 	bl	800781c <__multadd>
 8007930:	e7ee      	b.n	8007910 <__s2b+0x68>
 8007932:	bf00      	nop
 8007934:	0800a087 	.word	0x0800a087
 8007938:	0800a098 	.word	0x0800a098

0800793c <__hi0bits>:
 800793c:	0c02      	lsrs	r2, r0, #16
 800793e:	0412      	lsls	r2, r2, #16
 8007940:	4603      	mov	r3, r0
 8007942:	b9ca      	cbnz	r2, 8007978 <__hi0bits+0x3c>
 8007944:	0403      	lsls	r3, r0, #16
 8007946:	2010      	movs	r0, #16
 8007948:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800794c:	bf04      	itt	eq
 800794e:	021b      	lsleq	r3, r3, #8
 8007950:	3008      	addeq	r0, #8
 8007952:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007956:	bf04      	itt	eq
 8007958:	011b      	lsleq	r3, r3, #4
 800795a:	3004      	addeq	r0, #4
 800795c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007960:	bf04      	itt	eq
 8007962:	009b      	lsleq	r3, r3, #2
 8007964:	3002      	addeq	r0, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	db05      	blt.n	8007976 <__hi0bits+0x3a>
 800796a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800796e:	f100 0001 	add.w	r0, r0, #1
 8007972:	bf08      	it	eq
 8007974:	2020      	moveq	r0, #32
 8007976:	4770      	bx	lr
 8007978:	2000      	movs	r0, #0
 800797a:	e7e5      	b.n	8007948 <__hi0bits+0xc>

0800797c <__lo0bits>:
 800797c:	6803      	ldr	r3, [r0, #0]
 800797e:	4602      	mov	r2, r0
 8007980:	f013 0007 	ands.w	r0, r3, #7
 8007984:	d00b      	beq.n	800799e <__lo0bits+0x22>
 8007986:	07d9      	lsls	r1, r3, #31
 8007988:	d421      	bmi.n	80079ce <__lo0bits+0x52>
 800798a:	0798      	lsls	r0, r3, #30
 800798c:	bf49      	itett	mi
 800798e:	085b      	lsrmi	r3, r3, #1
 8007990:	089b      	lsrpl	r3, r3, #2
 8007992:	2001      	movmi	r0, #1
 8007994:	6013      	strmi	r3, [r2, #0]
 8007996:	bf5c      	itt	pl
 8007998:	2002      	movpl	r0, #2
 800799a:	6013      	strpl	r3, [r2, #0]
 800799c:	4770      	bx	lr
 800799e:	b299      	uxth	r1, r3
 80079a0:	b909      	cbnz	r1, 80079a6 <__lo0bits+0x2a>
 80079a2:	2010      	movs	r0, #16
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	b2d9      	uxtb	r1, r3
 80079a8:	b909      	cbnz	r1, 80079ae <__lo0bits+0x32>
 80079aa:	3008      	adds	r0, #8
 80079ac:	0a1b      	lsrs	r3, r3, #8
 80079ae:	0719      	lsls	r1, r3, #28
 80079b0:	bf04      	itt	eq
 80079b2:	091b      	lsreq	r3, r3, #4
 80079b4:	3004      	addeq	r0, #4
 80079b6:	0799      	lsls	r1, r3, #30
 80079b8:	bf04      	itt	eq
 80079ba:	089b      	lsreq	r3, r3, #2
 80079bc:	3002      	addeq	r0, #2
 80079be:	07d9      	lsls	r1, r3, #31
 80079c0:	d403      	bmi.n	80079ca <__lo0bits+0x4e>
 80079c2:	085b      	lsrs	r3, r3, #1
 80079c4:	f100 0001 	add.w	r0, r0, #1
 80079c8:	d003      	beq.n	80079d2 <__lo0bits+0x56>
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	4770      	bx	lr
 80079ce:	2000      	movs	r0, #0
 80079d0:	4770      	bx	lr
 80079d2:	2020      	movs	r0, #32
 80079d4:	4770      	bx	lr
	...

080079d8 <__i2b>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	460c      	mov	r4, r1
 80079dc:	2101      	movs	r1, #1
 80079de:	f7ff febb 	bl	8007758 <_Balloc>
 80079e2:	4602      	mov	r2, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__i2b+0x1a>
 80079e6:	f240 1145 	movw	r1, #325	; 0x145
 80079ea:	4b04      	ldr	r3, [pc, #16]	; (80079fc <__i2b+0x24>)
 80079ec:	4804      	ldr	r0, [pc, #16]	; (8007a00 <__i2b+0x28>)
 80079ee:	f001 fe09 	bl	8009604 <__assert_func>
 80079f2:	2301      	movs	r3, #1
 80079f4:	6144      	str	r4, [r0, #20]
 80079f6:	6103      	str	r3, [r0, #16]
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	bf00      	nop
 80079fc:	0800a087 	.word	0x0800a087
 8007a00:	0800a098 	.word	0x0800a098

08007a04 <__multiply>:
 8007a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a08:	4691      	mov	r9, r2
 8007a0a:	690a      	ldr	r2, [r1, #16]
 8007a0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a10:	460c      	mov	r4, r1
 8007a12:	429a      	cmp	r2, r3
 8007a14:	bfbe      	ittt	lt
 8007a16:	460b      	movlt	r3, r1
 8007a18:	464c      	movlt	r4, r9
 8007a1a:	4699      	movlt	r9, r3
 8007a1c:	6927      	ldr	r7, [r4, #16]
 8007a1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a22:	68a3      	ldr	r3, [r4, #8]
 8007a24:	6861      	ldr	r1, [r4, #4]
 8007a26:	eb07 060a 	add.w	r6, r7, sl
 8007a2a:	42b3      	cmp	r3, r6
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	bfb8      	it	lt
 8007a30:	3101      	addlt	r1, #1
 8007a32:	f7ff fe91 	bl	8007758 <_Balloc>
 8007a36:	b930      	cbnz	r0, 8007a46 <__multiply+0x42>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a3e:	4b43      	ldr	r3, [pc, #268]	; (8007b4c <__multiply+0x148>)
 8007a40:	4843      	ldr	r0, [pc, #268]	; (8007b50 <__multiply+0x14c>)
 8007a42:	f001 fddf 	bl	8009604 <__assert_func>
 8007a46:	f100 0514 	add.w	r5, r0, #20
 8007a4a:	462b      	mov	r3, r5
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a52:	4543      	cmp	r3, r8
 8007a54:	d321      	bcc.n	8007a9a <__multiply+0x96>
 8007a56:	f104 0314 	add.w	r3, r4, #20
 8007a5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a5e:	f109 0314 	add.w	r3, r9, #20
 8007a62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a66:	9202      	str	r2, [sp, #8]
 8007a68:	1b3a      	subs	r2, r7, r4
 8007a6a:	3a15      	subs	r2, #21
 8007a6c:	f022 0203 	bic.w	r2, r2, #3
 8007a70:	3204      	adds	r2, #4
 8007a72:	f104 0115 	add.w	r1, r4, #21
 8007a76:	428f      	cmp	r7, r1
 8007a78:	bf38      	it	cc
 8007a7a:	2204      	movcc	r2, #4
 8007a7c:	9201      	str	r2, [sp, #4]
 8007a7e:	9a02      	ldr	r2, [sp, #8]
 8007a80:	9303      	str	r3, [sp, #12]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d80c      	bhi.n	8007aa0 <__multiply+0x9c>
 8007a86:	2e00      	cmp	r6, #0
 8007a88:	dd03      	ble.n	8007a92 <__multiply+0x8e>
 8007a8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d05a      	beq.n	8007b48 <__multiply+0x144>
 8007a92:	6106      	str	r6, [r0, #16]
 8007a94:	b005      	add	sp, #20
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9a:	f843 2b04 	str.w	r2, [r3], #4
 8007a9e:	e7d8      	b.n	8007a52 <__multiply+0x4e>
 8007aa0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007aa4:	f1ba 0f00 	cmp.w	sl, #0
 8007aa8:	d023      	beq.n	8007af2 <__multiply+0xee>
 8007aaa:	46a9      	mov	r9, r5
 8007aac:	f04f 0c00 	mov.w	ip, #0
 8007ab0:	f104 0e14 	add.w	lr, r4, #20
 8007ab4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ab8:	f8d9 1000 	ldr.w	r1, [r9]
 8007abc:	fa1f fb82 	uxth.w	fp, r2
 8007ac0:	b289      	uxth	r1, r1
 8007ac2:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ac6:	4461      	add	r1, ip
 8007ac8:	f8d9 c000 	ldr.w	ip, [r9]
 8007acc:	0c12      	lsrs	r2, r2, #16
 8007ace:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007ad2:	fb0a c202 	mla	r2, sl, r2, ip
 8007ad6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ada:	b289      	uxth	r1, r1
 8007adc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ae0:	4577      	cmp	r7, lr
 8007ae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ae6:	f849 1b04 	str.w	r1, [r9], #4
 8007aea:	d8e3      	bhi.n	8007ab4 <__multiply+0xb0>
 8007aec:	9a01      	ldr	r2, [sp, #4]
 8007aee:	f845 c002 	str.w	ip, [r5, r2]
 8007af2:	9a03      	ldr	r2, [sp, #12]
 8007af4:	3304      	adds	r3, #4
 8007af6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007afa:	f1b9 0f00 	cmp.w	r9, #0
 8007afe:	d021      	beq.n	8007b44 <__multiply+0x140>
 8007b00:	46ae      	mov	lr, r5
 8007b02:	f04f 0a00 	mov.w	sl, #0
 8007b06:	6829      	ldr	r1, [r5, #0]
 8007b08:	f104 0c14 	add.w	ip, r4, #20
 8007b0c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b14:	b289      	uxth	r1, r1
 8007b16:	fb09 220b 	mla	r2, r9, fp, r2
 8007b1a:	4452      	add	r2, sl
 8007b1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b20:	f84e 1b04 	str.w	r1, [lr], #4
 8007b24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b2c:	f8be 1000 	ldrh.w	r1, [lr]
 8007b30:	4567      	cmp	r7, ip
 8007b32:	fb09 110a 	mla	r1, r9, sl, r1
 8007b36:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b3e:	d8e5      	bhi.n	8007b0c <__multiply+0x108>
 8007b40:	9a01      	ldr	r2, [sp, #4]
 8007b42:	50a9      	str	r1, [r5, r2]
 8007b44:	3504      	adds	r5, #4
 8007b46:	e79a      	b.n	8007a7e <__multiply+0x7a>
 8007b48:	3e01      	subs	r6, #1
 8007b4a:	e79c      	b.n	8007a86 <__multiply+0x82>
 8007b4c:	0800a087 	.word	0x0800a087
 8007b50:	0800a098 	.word	0x0800a098

08007b54 <__pow5mult>:
 8007b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b58:	4615      	mov	r5, r2
 8007b5a:	f012 0203 	ands.w	r2, r2, #3
 8007b5e:	4606      	mov	r6, r0
 8007b60:	460f      	mov	r7, r1
 8007b62:	d007      	beq.n	8007b74 <__pow5mult+0x20>
 8007b64:	4c25      	ldr	r4, [pc, #148]	; (8007bfc <__pow5mult+0xa8>)
 8007b66:	3a01      	subs	r2, #1
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b6e:	f7ff fe55 	bl	800781c <__multadd>
 8007b72:	4607      	mov	r7, r0
 8007b74:	10ad      	asrs	r5, r5, #2
 8007b76:	d03d      	beq.n	8007bf4 <__pow5mult+0xa0>
 8007b78:	69f4      	ldr	r4, [r6, #28]
 8007b7a:	b97c      	cbnz	r4, 8007b9c <__pow5mult+0x48>
 8007b7c:	2010      	movs	r0, #16
 8007b7e:	f7ff fd37 	bl	80075f0 <malloc>
 8007b82:	4602      	mov	r2, r0
 8007b84:	61f0      	str	r0, [r6, #28]
 8007b86:	b928      	cbnz	r0, 8007b94 <__pow5mult+0x40>
 8007b88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b8c:	4b1c      	ldr	r3, [pc, #112]	; (8007c00 <__pow5mult+0xac>)
 8007b8e:	481d      	ldr	r0, [pc, #116]	; (8007c04 <__pow5mult+0xb0>)
 8007b90:	f001 fd38 	bl	8009604 <__assert_func>
 8007b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b98:	6004      	str	r4, [r0, #0]
 8007b9a:	60c4      	str	r4, [r0, #12]
 8007b9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ba4:	b94c      	cbnz	r4, 8007bba <__pow5mult+0x66>
 8007ba6:	f240 2171 	movw	r1, #625	; 0x271
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff ff14 	bl	80079d8 <__i2b>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bb8:	6003      	str	r3, [r0, #0]
 8007bba:	f04f 0900 	mov.w	r9, #0
 8007bbe:	07eb      	lsls	r3, r5, #31
 8007bc0:	d50a      	bpl.n	8007bd8 <__pow5mult+0x84>
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7ff ff1c 	bl	8007a04 <__multiply>
 8007bcc:	4680      	mov	r8, r0
 8007bce:	4639      	mov	r1, r7
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff fe01 	bl	80077d8 <_Bfree>
 8007bd6:	4647      	mov	r7, r8
 8007bd8:	106d      	asrs	r5, r5, #1
 8007bda:	d00b      	beq.n	8007bf4 <__pow5mult+0xa0>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	b938      	cbnz	r0, 8007bf0 <__pow5mult+0x9c>
 8007be0:	4622      	mov	r2, r4
 8007be2:	4621      	mov	r1, r4
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7ff ff0d 	bl	8007a04 <__multiply>
 8007bea:	6020      	str	r0, [r4, #0]
 8007bec:	f8c0 9000 	str.w	r9, [r0]
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	e7e4      	b.n	8007bbe <__pow5mult+0x6a>
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bfa:	bf00      	nop
 8007bfc:	0800a1e8 	.word	0x0800a1e8
 8007c00:	0800a018 	.word	0x0800a018
 8007c04:	0800a098 	.word	0x0800a098

08007c08 <__lshift>:
 8007c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	4607      	mov	r7, r0
 8007c10:	4691      	mov	r9, r2
 8007c12:	6923      	ldr	r3, [r4, #16]
 8007c14:	6849      	ldr	r1, [r1, #4]
 8007c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c20:	f108 0601 	add.w	r6, r8, #1
 8007c24:	42b3      	cmp	r3, r6
 8007c26:	db0b      	blt.n	8007c40 <__lshift+0x38>
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff fd95 	bl	8007758 <_Balloc>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b948      	cbnz	r0, 8007c46 <__lshift+0x3e>
 8007c32:	4602      	mov	r2, r0
 8007c34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c38:	4b27      	ldr	r3, [pc, #156]	; (8007cd8 <__lshift+0xd0>)
 8007c3a:	4828      	ldr	r0, [pc, #160]	; (8007cdc <__lshift+0xd4>)
 8007c3c:	f001 fce2 	bl	8009604 <__assert_func>
 8007c40:	3101      	adds	r1, #1
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	e7ee      	b.n	8007c24 <__lshift+0x1c>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f100 0114 	add.w	r1, r0, #20
 8007c4c:	f100 0210 	add.w	r2, r0, #16
 8007c50:	4618      	mov	r0, r3
 8007c52:	4553      	cmp	r3, sl
 8007c54:	db33      	blt.n	8007cbe <__lshift+0xb6>
 8007c56:	6920      	ldr	r0, [r4, #16]
 8007c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c5c:	f104 0314 	add.w	r3, r4, #20
 8007c60:	f019 091f 	ands.w	r9, r9, #31
 8007c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c6c:	d02b      	beq.n	8007cc6 <__lshift+0xbe>
 8007c6e:	468a      	mov	sl, r1
 8007c70:	2200      	movs	r2, #0
 8007c72:	f1c9 0e20 	rsb	lr, r9, #32
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	fa00 f009 	lsl.w	r0, r0, r9
 8007c7c:	4310      	orrs	r0, r2
 8007c7e:	f84a 0b04 	str.w	r0, [sl], #4
 8007c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c86:	459c      	cmp	ip, r3
 8007c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c8c:	d8f3      	bhi.n	8007c76 <__lshift+0x6e>
 8007c8e:	ebac 0304 	sub.w	r3, ip, r4
 8007c92:	3b15      	subs	r3, #21
 8007c94:	f023 0303 	bic.w	r3, r3, #3
 8007c98:	3304      	adds	r3, #4
 8007c9a:	f104 0015 	add.w	r0, r4, #21
 8007c9e:	4584      	cmp	ip, r0
 8007ca0:	bf38      	it	cc
 8007ca2:	2304      	movcc	r3, #4
 8007ca4:	50ca      	str	r2, [r1, r3]
 8007ca6:	b10a      	cbz	r2, 8007cac <__lshift+0xa4>
 8007ca8:	f108 0602 	add.w	r6, r8, #2
 8007cac:	3e01      	subs	r6, #1
 8007cae:	4638      	mov	r0, r7
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	612e      	str	r6, [r5, #16]
 8007cb4:	f7ff fd90 	bl	80077d8 <_Bfree>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	e7c5      	b.n	8007c52 <__lshift+0x4a>
 8007cc6:	3904      	subs	r1, #4
 8007cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ccc:	459c      	cmp	ip, r3
 8007cce:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cd2:	d8f9      	bhi.n	8007cc8 <__lshift+0xc0>
 8007cd4:	e7ea      	b.n	8007cac <__lshift+0xa4>
 8007cd6:	bf00      	nop
 8007cd8:	0800a087 	.word	0x0800a087
 8007cdc:	0800a098 	.word	0x0800a098

08007ce0 <__mcmp>:
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	690a      	ldr	r2, [r1, #16]
 8007ce4:	6900      	ldr	r0, [r0, #16]
 8007ce6:	b530      	push	{r4, r5, lr}
 8007ce8:	1a80      	subs	r0, r0, r2
 8007cea:	d10d      	bne.n	8007d08 <__mcmp+0x28>
 8007cec:	3314      	adds	r3, #20
 8007cee:	3114      	adds	r1, #20
 8007cf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d00:	4295      	cmp	r5, r2
 8007d02:	d002      	beq.n	8007d0a <__mcmp+0x2a>
 8007d04:	d304      	bcc.n	8007d10 <__mcmp+0x30>
 8007d06:	2001      	movs	r0, #1
 8007d08:	bd30      	pop	{r4, r5, pc}
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	d3f4      	bcc.n	8007cf8 <__mcmp+0x18>
 8007d0e:	e7fb      	b.n	8007d08 <__mcmp+0x28>
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	e7f8      	b.n	8007d08 <__mcmp+0x28>
	...

08007d18 <__mdiff>:
 8007d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	4607      	mov	r7, r0
 8007d20:	4611      	mov	r1, r2
 8007d22:	4628      	mov	r0, r5
 8007d24:	4614      	mov	r4, r2
 8007d26:	f7ff ffdb 	bl	8007ce0 <__mcmp>
 8007d2a:	1e06      	subs	r6, r0, #0
 8007d2c:	d111      	bne.n	8007d52 <__mdiff+0x3a>
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff fd11 	bl	8007758 <_Balloc>
 8007d36:	4602      	mov	r2, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <__mdiff+0x2e>
 8007d3a:	f240 2137 	movw	r1, #567	; 0x237
 8007d3e:	4b3a      	ldr	r3, [pc, #232]	; (8007e28 <__mdiff+0x110>)
 8007d40:	483a      	ldr	r0, [pc, #232]	; (8007e2c <__mdiff+0x114>)
 8007d42:	f001 fc5f 	bl	8009604 <__assert_func>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	bfa4      	itt	ge
 8007d54:	4623      	movge	r3, r4
 8007d56:	462c      	movge	r4, r5
 8007d58:	4638      	mov	r0, r7
 8007d5a:	6861      	ldr	r1, [r4, #4]
 8007d5c:	bfa6      	itte	ge
 8007d5e:	461d      	movge	r5, r3
 8007d60:	2600      	movge	r6, #0
 8007d62:	2601      	movlt	r6, #1
 8007d64:	f7ff fcf8 	bl	8007758 <_Balloc>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	b918      	cbnz	r0, 8007d74 <__mdiff+0x5c>
 8007d6c:	f240 2145 	movw	r1, #581	; 0x245
 8007d70:	4b2d      	ldr	r3, [pc, #180]	; (8007e28 <__mdiff+0x110>)
 8007d72:	e7e5      	b.n	8007d40 <__mdiff+0x28>
 8007d74:	f102 0814 	add.w	r8, r2, #20
 8007d78:	46c2      	mov	sl, r8
 8007d7a:	f04f 0c00 	mov.w	ip, #0
 8007d7e:	6927      	ldr	r7, [r4, #16]
 8007d80:	60c6      	str	r6, [r0, #12]
 8007d82:	692e      	ldr	r6, [r5, #16]
 8007d84:	f104 0014 	add.w	r0, r4, #20
 8007d88:	f105 0914 	add.w	r9, r5, #20
 8007d8c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d94:	3410      	adds	r4, #16
 8007d96:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d9a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d9e:	fa1f f18b 	uxth.w	r1, fp
 8007da2:	4461      	add	r1, ip
 8007da4:	fa1f fc83 	uxth.w	ip, r3
 8007da8:	0c1b      	lsrs	r3, r3, #16
 8007daa:	eba1 010c 	sub.w	r1, r1, ip
 8007dae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007db2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007db6:	b289      	uxth	r1, r1
 8007db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007dbc:	454e      	cmp	r6, r9
 8007dbe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007dc2:	f84a 1b04 	str.w	r1, [sl], #4
 8007dc6:	d8e6      	bhi.n	8007d96 <__mdiff+0x7e>
 8007dc8:	1b73      	subs	r3, r6, r5
 8007dca:	3b15      	subs	r3, #21
 8007dcc:	f023 0303 	bic.w	r3, r3, #3
 8007dd0:	3515      	adds	r5, #21
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	42ae      	cmp	r6, r5
 8007dd6:	bf38      	it	cc
 8007dd8:	2304      	movcc	r3, #4
 8007dda:	4418      	add	r0, r3
 8007ddc:	4443      	add	r3, r8
 8007dde:	461e      	mov	r6, r3
 8007de0:	4605      	mov	r5, r0
 8007de2:	4575      	cmp	r5, lr
 8007de4:	d30e      	bcc.n	8007e04 <__mdiff+0xec>
 8007de6:	f10e 0103 	add.w	r1, lr, #3
 8007dea:	1a09      	subs	r1, r1, r0
 8007dec:	f021 0103 	bic.w	r1, r1, #3
 8007df0:	3803      	subs	r0, #3
 8007df2:	4586      	cmp	lr, r0
 8007df4:	bf38      	it	cc
 8007df6:	2100      	movcc	r1, #0
 8007df8:	440b      	add	r3, r1
 8007dfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dfe:	b189      	cbz	r1, 8007e24 <__mdiff+0x10c>
 8007e00:	6117      	str	r7, [r2, #16]
 8007e02:	e7a3      	b.n	8007d4c <__mdiff+0x34>
 8007e04:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e08:	fa1f f188 	uxth.w	r1, r8
 8007e0c:	4461      	add	r1, ip
 8007e0e:	140c      	asrs	r4, r1, #16
 8007e10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e14:	b289      	uxth	r1, r1
 8007e16:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e1a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e1e:	f846 1b04 	str.w	r1, [r6], #4
 8007e22:	e7de      	b.n	8007de2 <__mdiff+0xca>
 8007e24:	3f01      	subs	r7, #1
 8007e26:	e7e8      	b.n	8007dfa <__mdiff+0xe2>
 8007e28:	0800a087 	.word	0x0800a087
 8007e2c:	0800a098 	.word	0x0800a098

08007e30 <__ulp>:
 8007e30:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <__ulp+0x3c>)
 8007e32:	400b      	ands	r3, r1
 8007e34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dc08      	bgt.n	8007e4e <__ulp+0x1e>
 8007e3c:	425b      	negs	r3, r3
 8007e3e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007e42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e46:	da04      	bge.n	8007e52 <__ulp+0x22>
 8007e48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e4c:	4113      	asrs	r3, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	e008      	b.n	8007e64 <__ulp+0x34>
 8007e52:	f1a2 0314 	sub.w	r3, r2, #20
 8007e56:	2b1e      	cmp	r3, #30
 8007e58:	bfd6      	itet	le
 8007e5a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007e5e:	2201      	movgt	r2, #1
 8007e60:	40da      	lsrle	r2, r3
 8007e62:	2300      	movs	r3, #0
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	7ff00000 	.word	0x7ff00000

08007e70 <__b2d>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	6905      	ldr	r5, [r0, #16]
 8007e74:	f100 0714 	add.w	r7, r0, #20
 8007e78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007e7c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007e80:	1f2e      	subs	r6, r5, #4
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff fd5a 	bl	800793c <__hi0bits>
 8007e88:	f1c0 0220 	rsb	r2, r0, #32
 8007e8c:	280a      	cmp	r0, #10
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007efc <__b2d+0x8c>
 8007e94:	600a      	str	r2, [r1, #0]
 8007e96:	dc12      	bgt.n	8007ebe <__b2d+0x4e>
 8007e98:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e9c:	fa24 f20e 	lsr.w	r2, r4, lr
 8007ea0:	42b7      	cmp	r7, r6
 8007ea2:	ea42 010c 	orr.w	r1, r2, ip
 8007ea6:	bf2c      	ite	cs
 8007ea8:	2200      	movcs	r2, #0
 8007eaa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007eae:	3315      	adds	r3, #21
 8007eb0:	fa04 f303 	lsl.w	r3, r4, r3
 8007eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ebe:	42b7      	cmp	r7, r6
 8007ec0:	bf2e      	itee	cs
 8007ec2:	2200      	movcs	r2, #0
 8007ec4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007ec8:	f1a5 0608 	subcc.w	r6, r5, #8
 8007ecc:	3b0b      	subs	r3, #11
 8007ece:	d012      	beq.n	8007ef6 <__b2d+0x86>
 8007ed0:	f1c3 0520 	rsb	r5, r3, #32
 8007ed4:	fa22 f105 	lsr.w	r1, r2, r5
 8007ed8:	409c      	lsls	r4, r3
 8007eda:	430c      	orrs	r4, r1
 8007edc:	42be      	cmp	r6, r7
 8007ede:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007ee2:	bf94      	ite	ls
 8007ee4:	2400      	movls	r4, #0
 8007ee6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007eea:	409a      	lsls	r2, r3
 8007eec:	40ec      	lsrs	r4, r5
 8007eee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007ef2:	4322      	orrs	r2, r4
 8007ef4:	e7e1      	b.n	8007eba <__b2d+0x4a>
 8007ef6:	ea44 010c 	orr.w	r1, r4, ip
 8007efa:	e7de      	b.n	8007eba <__b2d+0x4a>
 8007efc:	3ff00000 	.word	0x3ff00000

08007f00 <__d2b>:
 8007f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f02:	2101      	movs	r1, #1
 8007f04:	4617      	mov	r7, r2
 8007f06:	461c      	mov	r4, r3
 8007f08:	9e08      	ldr	r6, [sp, #32]
 8007f0a:	f7ff fc25 	bl	8007758 <_Balloc>
 8007f0e:	4605      	mov	r5, r0
 8007f10:	b930      	cbnz	r0, 8007f20 <__d2b+0x20>
 8007f12:	4602      	mov	r2, r0
 8007f14:	f240 310f 	movw	r1, #783	; 0x30f
 8007f18:	4b22      	ldr	r3, [pc, #136]	; (8007fa4 <__d2b+0xa4>)
 8007f1a:	4823      	ldr	r0, [pc, #140]	; (8007fa8 <__d2b+0xa8>)
 8007f1c:	f001 fb72 	bl	8009604 <__assert_func>
 8007f20:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007f24:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007f28:	bb24      	cbnz	r4, 8007f74 <__d2b+0x74>
 8007f2a:	2f00      	cmp	r7, #0
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	d026      	beq.n	8007f7e <__d2b+0x7e>
 8007f30:	4668      	mov	r0, sp
 8007f32:	9700      	str	r7, [sp, #0]
 8007f34:	f7ff fd22 	bl	800797c <__lo0bits>
 8007f38:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f3c:	b1e8      	cbz	r0, 8007f7a <__d2b+0x7a>
 8007f3e:	f1c0 0320 	rsb	r3, r0, #32
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	430b      	orrs	r3, r1
 8007f48:	40c2      	lsrs	r2, r0
 8007f4a:	616b      	str	r3, [r5, #20]
 8007f4c:	9201      	str	r2, [sp, #4]
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bf14      	ite	ne
 8007f54:	2102      	movne	r1, #2
 8007f56:	2101      	moveq	r1, #1
 8007f58:	61ab      	str	r3, [r5, #24]
 8007f5a:	6129      	str	r1, [r5, #16]
 8007f5c:	b1bc      	cbz	r4, 8007f8e <__d2b+0x8e>
 8007f5e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f62:	4404      	add	r4, r0
 8007f64:	6034      	str	r4, [r6, #0]
 8007f66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6c:	6018      	str	r0, [r3, #0]
 8007f6e:	4628      	mov	r0, r5
 8007f70:	b003      	add	sp, #12
 8007f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f78:	e7d7      	b.n	8007f2a <__d2b+0x2a>
 8007f7a:	6169      	str	r1, [r5, #20]
 8007f7c:	e7e7      	b.n	8007f4e <__d2b+0x4e>
 8007f7e:	a801      	add	r0, sp, #4
 8007f80:	f7ff fcfc 	bl	800797c <__lo0bits>
 8007f84:	9b01      	ldr	r3, [sp, #4]
 8007f86:	2101      	movs	r1, #1
 8007f88:	616b      	str	r3, [r5, #20]
 8007f8a:	3020      	adds	r0, #32
 8007f8c:	e7e5      	b.n	8007f5a <__d2b+0x5a>
 8007f8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f92:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007f96:	6030      	str	r0, [r6, #0]
 8007f98:	6918      	ldr	r0, [r3, #16]
 8007f9a:	f7ff fccf 	bl	800793c <__hi0bits>
 8007f9e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007fa2:	e7e2      	b.n	8007f6a <__d2b+0x6a>
 8007fa4:	0800a087 	.word	0x0800a087
 8007fa8:	0800a098 	.word	0x0800a098

08007fac <__ratio>:
 8007fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb0:	4688      	mov	r8, r1
 8007fb2:	4669      	mov	r1, sp
 8007fb4:	4681      	mov	r9, r0
 8007fb6:	f7ff ff5b 	bl	8007e70 <__b2d>
 8007fba:	460f      	mov	r7, r1
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	a901      	add	r1, sp, #4
 8007fc4:	f7ff ff54 	bl	8007e70 <__b2d>
 8007fc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fcc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007fd0:	468b      	mov	fp, r1
 8007fd2:	eba3 0c02 	sub.w	ip, r3, r2
 8007fd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007fda:	1a9b      	subs	r3, r3, r2
 8007fdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bfd5      	itete	le
 8007fe4:	460a      	movle	r2, r1
 8007fe6:	462a      	movgt	r2, r5
 8007fe8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007fec:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007ff0:	bfd8      	it	le
 8007ff2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f7f8 fb95 	bl	800072c <__aeabi_ddiv>
 8008002:	b003      	add	sp, #12
 8008004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008008 <__copybits>:
 8008008:	3901      	subs	r1, #1
 800800a:	b570      	push	{r4, r5, r6, lr}
 800800c:	1149      	asrs	r1, r1, #5
 800800e:	6914      	ldr	r4, [r2, #16]
 8008010:	3101      	adds	r1, #1
 8008012:	f102 0314 	add.w	r3, r2, #20
 8008016:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800801a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800801e:	1f05      	subs	r5, r0, #4
 8008020:	42a3      	cmp	r3, r4
 8008022:	d30c      	bcc.n	800803e <__copybits+0x36>
 8008024:	1aa3      	subs	r3, r4, r2
 8008026:	3b11      	subs	r3, #17
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	3211      	adds	r2, #17
 800802e:	42a2      	cmp	r2, r4
 8008030:	bf88      	it	hi
 8008032:	2300      	movhi	r3, #0
 8008034:	4418      	add	r0, r3
 8008036:	2300      	movs	r3, #0
 8008038:	4288      	cmp	r0, r1
 800803a:	d305      	bcc.n	8008048 <__copybits+0x40>
 800803c:	bd70      	pop	{r4, r5, r6, pc}
 800803e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008042:	f845 6f04 	str.w	r6, [r5, #4]!
 8008046:	e7eb      	b.n	8008020 <__copybits+0x18>
 8008048:	f840 3b04 	str.w	r3, [r0], #4
 800804c:	e7f4      	b.n	8008038 <__copybits+0x30>

0800804e <__any_on>:
 800804e:	f100 0214 	add.w	r2, r0, #20
 8008052:	6900      	ldr	r0, [r0, #16]
 8008054:	114b      	asrs	r3, r1, #5
 8008056:	4298      	cmp	r0, r3
 8008058:	b510      	push	{r4, lr}
 800805a:	db11      	blt.n	8008080 <__any_on+0x32>
 800805c:	dd0a      	ble.n	8008074 <__any_on+0x26>
 800805e:	f011 011f 	ands.w	r1, r1, #31
 8008062:	d007      	beq.n	8008074 <__any_on+0x26>
 8008064:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008068:	fa24 f001 	lsr.w	r0, r4, r1
 800806c:	fa00 f101 	lsl.w	r1, r0, r1
 8008070:	428c      	cmp	r4, r1
 8008072:	d10b      	bne.n	800808c <__any_on+0x3e>
 8008074:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008078:	4293      	cmp	r3, r2
 800807a:	d803      	bhi.n	8008084 <__any_on+0x36>
 800807c:	2000      	movs	r0, #0
 800807e:	bd10      	pop	{r4, pc}
 8008080:	4603      	mov	r3, r0
 8008082:	e7f7      	b.n	8008074 <__any_on+0x26>
 8008084:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008088:	2900      	cmp	r1, #0
 800808a:	d0f5      	beq.n	8008078 <__any_on+0x2a>
 800808c:	2001      	movs	r0, #1
 800808e:	e7f6      	b.n	800807e <__any_on+0x30>

08008090 <sulp>:
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	460f      	mov	r7, r1
 8008096:	4690      	mov	r8, r2
 8008098:	f7ff feca 	bl	8007e30 <__ulp>
 800809c:	4604      	mov	r4, r0
 800809e:	460d      	mov	r5, r1
 80080a0:	f1b8 0f00 	cmp.w	r8, #0
 80080a4:	d011      	beq.n	80080ca <sulp+0x3a>
 80080a6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80080aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	dd0b      	ble.n	80080ca <sulp+0x3a>
 80080b2:	2400      	movs	r4, #0
 80080b4:	051b      	lsls	r3, r3, #20
 80080b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80080ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80080be:	4622      	mov	r2, r4
 80080c0:	462b      	mov	r3, r5
 80080c2:	f7f8 fa09 	bl	80004d8 <__aeabi_dmul>
 80080c6:	4604      	mov	r4, r0
 80080c8:	460d      	mov	r5, r1
 80080ca:	4620      	mov	r0, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d2:	0000      	movs	r0, r0
 80080d4:	0000      	movs	r0, r0
	...

080080d8 <_strtod_l>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	b09f      	sub	sp, #124	; 0x7c
 80080de:	9217      	str	r2, [sp, #92]	; 0x5c
 80080e0:	2200      	movs	r2, #0
 80080e2:	4604      	mov	r4, r0
 80080e4:	921a      	str	r2, [sp, #104]	; 0x68
 80080e6:	460d      	mov	r5, r1
 80080e8:	f04f 0800 	mov.w	r8, #0
 80080ec:	f04f 0900 	mov.w	r9, #0
 80080f0:	460a      	mov	r2, r1
 80080f2:	9219      	str	r2, [sp, #100]	; 0x64
 80080f4:	7811      	ldrb	r1, [r2, #0]
 80080f6:	292b      	cmp	r1, #43	; 0x2b
 80080f8:	d04a      	beq.n	8008190 <_strtod_l+0xb8>
 80080fa:	d838      	bhi.n	800816e <_strtod_l+0x96>
 80080fc:	290d      	cmp	r1, #13
 80080fe:	d832      	bhi.n	8008166 <_strtod_l+0x8e>
 8008100:	2908      	cmp	r1, #8
 8008102:	d832      	bhi.n	800816a <_strtod_l+0x92>
 8008104:	2900      	cmp	r1, #0
 8008106:	d03b      	beq.n	8008180 <_strtod_l+0xa8>
 8008108:	2200      	movs	r2, #0
 800810a:	920e      	str	r2, [sp, #56]	; 0x38
 800810c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800810e:	7832      	ldrb	r2, [r6, #0]
 8008110:	2a30      	cmp	r2, #48	; 0x30
 8008112:	f040 80b2 	bne.w	800827a <_strtod_l+0x1a2>
 8008116:	7872      	ldrb	r2, [r6, #1]
 8008118:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800811c:	2a58      	cmp	r2, #88	; 0x58
 800811e:	d16e      	bne.n	80081fe <_strtod_l+0x126>
 8008120:	9302      	str	r3, [sp, #8]
 8008122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008124:	4620      	mov	r0, r4
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	ab1a      	add	r3, sp, #104	; 0x68
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	4a8c      	ldr	r2, [pc, #560]	; (8008360 <_strtod_l+0x288>)
 800812e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008130:	a919      	add	r1, sp, #100	; 0x64
 8008132:	f001 fb01 	bl	8009738 <__gethex>
 8008136:	f010 070f 	ands.w	r7, r0, #15
 800813a:	4605      	mov	r5, r0
 800813c:	d005      	beq.n	800814a <_strtod_l+0x72>
 800813e:	2f06      	cmp	r7, #6
 8008140:	d128      	bne.n	8008194 <_strtod_l+0xbc>
 8008142:	2300      	movs	r3, #0
 8008144:	3601      	adds	r6, #1
 8008146:	9619      	str	r6, [sp, #100]	; 0x64
 8008148:	930e      	str	r3, [sp, #56]	; 0x38
 800814a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 85a0 	bne.w	8008c92 <_strtod_l+0xbba>
 8008152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008154:	b1cb      	cbz	r3, 800818a <_strtod_l+0xb2>
 8008156:	4642      	mov	r2, r8
 8008158:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800815c:	4610      	mov	r0, r2
 800815e:	4619      	mov	r1, r3
 8008160:	b01f      	add	sp, #124	; 0x7c
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	2920      	cmp	r1, #32
 8008168:	d1ce      	bne.n	8008108 <_strtod_l+0x30>
 800816a:	3201      	adds	r2, #1
 800816c:	e7c1      	b.n	80080f2 <_strtod_l+0x1a>
 800816e:	292d      	cmp	r1, #45	; 0x2d
 8008170:	d1ca      	bne.n	8008108 <_strtod_l+0x30>
 8008172:	2101      	movs	r1, #1
 8008174:	910e      	str	r1, [sp, #56]	; 0x38
 8008176:	1c51      	adds	r1, r2, #1
 8008178:	9119      	str	r1, [sp, #100]	; 0x64
 800817a:	7852      	ldrb	r2, [r2, #1]
 800817c:	2a00      	cmp	r2, #0
 800817e:	d1c5      	bne.n	800810c <_strtod_l+0x34>
 8008180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008182:	9519      	str	r5, [sp, #100]	; 0x64
 8008184:	2b00      	cmp	r3, #0
 8008186:	f040 8582 	bne.w	8008c8e <_strtod_l+0xbb6>
 800818a:	4642      	mov	r2, r8
 800818c:	464b      	mov	r3, r9
 800818e:	e7e5      	b.n	800815c <_strtod_l+0x84>
 8008190:	2100      	movs	r1, #0
 8008192:	e7ef      	b.n	8008174 <_strtod_l+0x9c>
 8008194:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008196:	b13a      	cbz	r2, 80081a8 <_strtod_l+0xd0>
 8008198:	2135      	movs	r1, #53	; 0x35
 800819a:	a81c      	add	r0, sp, #112	; 0x70
 800819c:	f7ff ff34 	bl	8008008 <__copybits>
 80081a0:	4620      	mov	r0, r4
 80081a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081a4:	f7ff fb18 	bl	80077d8 <_Bfree>
 80081a8:	3f01      	subs	r7, #1
 80081aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80081ac:	2f04      	cmp	r7, #4
 80081ae:	d806      	bhi.n	80081be <_strtod_l+0xe6>
 80081b0:	e8df f007 	tbb	[pc, r7]
 80081b4:	201d0314 	.word	0x201d0314
 80081b8:	14          	.byte	0x14
 80081b9:	00          	.byte	0x00
 80081ba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80081be:	05e9      	lsls	r1, r5, #23
 80081c0:	bf48      	it	mi
 80081c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80081c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081ca:	0d1b      	lsrs	r3, r3, #20
 80081cc:	051b      	lsls	r3, r3, #20
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1bb      	bne.n	800814a <_strtod_l+0x72>
 80081d2:	f7fe fb09 	bl	80067e8 <__errno>
 80081d6:	2322      	movs	r3, #34	; 0x22
 80081d8:	6003      	str	r3, [r0, #0]
 80081da:	e7b6      	b.n	800814a <_strtod_l+0x72>
 80081dc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081e0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80081e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80081ec:	e7e7      	b.n	80081be <_strtod_l+0xe6>
 80081ee:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008364 <_strtod_l+0x28c>
 80081f2:	e7e4      	b.n	80081be <_strtod_l+0xe6>
 80081f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80081f8:	f04f 38ff 	mov.w	r8, #4294967295
 80081fc:	e7df      	b.n	80081be <_strtod_l+0xe6>
 80081fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	9219      	str	r2, [sp, #100]	; 0x64
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b30      	cmp	r3, #48	; 0x30
 8008208:	d0f9      	beq.n	80081fe <_strtod_l+0x126>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d09d      	beq.n	800814a <_strtod_l+0x72>
 800820e:	2301      	movs	r3, #1
 8008210:	f04f 0a00 	mov.w	sl, #0
 8008214:	220a      	movs	r2, #10
 8008216:	46d3      	mov	fp, sl
 8008218:	9305      	str	r3, [sp, #20]
 800821a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800821c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008220:	930b      	str	r3, [sp, #44]	; 0x2c
 8008222:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008224:	7806      	ldrb	r6, [r0, #0]
 8008226:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800822a:	b2d9      	uxtb	r1, r3
 800822c:	2909      	cmp	r1, #9
 800822e:	d926      	bls.n	800827e <_strtod_l+0x1a6>
 8008230:	2201      	movs	r2, #1
 8008232:	494d      	ldr	r1, [pc, #308]	; (8008368 <_strtod_l+0x290>)
 8008234:	f001 f9be 	bl	80095b4 <strncmp>
 8008238:	2800      	cmp	r0, #0
 800823a:	d030      	beq.n	800829e <_strtod_l+0x1c6>
 800823c:	2000      	movs	r0, #0
 800823e:	4632      	mov	r2, r6
 8008240:	4603      	mov	r3, r0
 8008242:	465e      	mov	r6, fp
 8008244:	9008      	str	r0, [sp, #32]
 8008246:	2a65      	cmp	r2, #101	; 0x65
 8008248:	d001      	beq.n	800824e <_strtod_l+0x176>
 800824a:	2a45      	cmp	r2, #69	; 0x45
 800824c:	d113      	bne.n	8008276 <_strtod_l+0x19e>
 800824e:	b91e      	cbnz	r6, 8008258 <_strtod_l+0x180>
 8008250:	9a05      	ldr	r2, [sp, #20]
 8008252:	4302      	orrs	r2, r0
 8008254:	d094      	beq.n	8008180 <_strtod_l+0xa8>
 8008256:	2600      	movs	r6, #0
 8008258:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800825a:	1c6a      	adds	r2, r5, #1
 800825c:	9219      	str	r2, [sp, #100]	; 0x64
 800825e:	786a      	ldrb	r2, [r5, #1]
 8008260:	2a2b      	cmp	r2, #43	; 0x2b
 8008262:	d074      	beq.n	800834e <_strtod_l+0x276>
 8008264:	2a2d      	cmp	r2, #45	; 0x2d
 8008266:	d078      	beq.n	800835a <_strtod_l+0x282>
 8008268:	f04f 0c00 	mov.w	ip, #0
 800826c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008270:	2909      	cmp	r1, #9
 8008272:	d97f      	bls.n	8008374 <_strtod_l+0x29c>
 8008274:	9519      	str	r5, [sp, #100]	; 0x64
 8008276:	2700      	movs	r7, #0
 8008278:	e09e      	b.n	80083b8 <_strtod_l+0x2e0>
 800827a:	2300      	movs	r3, #0
 800827c:	e7c8      	b.n	8008210 <_strtod_l+0x138>
 800827e:	f1bb 0f08 	cmp.w	fp, #8
 8008282:	bfd8      	it	le
 8008284:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008286:	f100 0001 	add.w	r0, r0, #1
 800828a:	bfd6      	itet	le
 800828c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008290:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008294:	930a      	strle	r3, [sp, #40]	; 0x28
 8008296:	f10b 0b01 	add.w	fp, fp, #1
 800829a:	9019      	str	r0, [sp, #100]	; 0x64
 800829c:	e7c1      	b.n	8008222 <_strtod_l+0x14a>
 800829e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	9219      	str	r2, [sp, #100]	; 0x64
 80082a4:	785a      	ldrb	r2, [r3, #1]
 80082a6:	f1bb 0f00 	cmp.w	fp, #0
 80082aa:	d037      	beq.n	800831c <_strtod_l+0x244>
 80082ac:	465e      	mov	r6, fp
 80082ae:	9008      	str	r0, [sp, #32]
 80082b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80082b4:	2b09      	cmp	r3, #9
 80082b6:	d912      	bls.n	80082de <_strtod_l+0x206>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e7c4      	b.n	8008246 <_strtod_l+0x16e>
 80082bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082be:	3001      	adds	r0, #1
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	9219      	str	r2, [sp, #100]	; 0x64
 80082c4:	785a      	ldrb	r2, [r3, #1]
 80082c6:	2a30      	cmp	r2, #48	; 0x30
 80082c8:	d0f8      	beq.n	80082bc <_strtod_l+0x1e4>
 80082ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	f200 84e4 	bhi.w	8008c9c <_strtod_l+0xbc4>
 80082d4:	9008      	str	r0, [sp, #32]
 80082d6:	2000      	movs	r0, #0
 80082d8:	4606      	mov	r6, r0
 80082da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80082de:	3a30      	subs	r2, #48	; 0x30
 80082e0:	f100 0301 	add.w	r3, r0, #1
 80082e4:	d014      	beq.n	8008310 <_strtod_l+0x238>
 80082e6:	9908      	ldr	r1, [sp, #32]
 80082e8:	eb00 0c06 	add.w	ip, r0, r6
 80082ec:	4419      	add	r1, r3
 80082ee:	9108      	str	r1, [sp, #32]
 80082f0:	4633      	mov	r3, r6
 80082f2:	210a      	movs	r1, #10
 80082f4:	4563      	cmp	r3, ip
 80082f6:	d113      	bne.n	8008320 <_strtod_l+0x248>
 80082f8:	1833      	adds	r3, r6, r0
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	f106 0601 	add.w	r6, r6, #1
 8008300:	4406      	add	r6, r0
 8008302:	dc1a      	bgt.n	800833a <_strtod_l+0x262>
 8008304:	230a      	movs	r3, #10
 8008306:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008308:	fb03 2301 	mla	r3, r3, r1, r2
 800830c:	930a      	str	r3, [sp, #40]	; 0x28
 800830e:	2300      	movs	r3, #0
 8008310:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008312:	4618      	mov	r0, r3
 8008314:	1c51      	adds	r1, r2, #1
 8008316:	9119      	str	r1, [sp, #100]	; 0x64
 8008318:	7852      	ldrb	r2, [r2, #1]
 800831a:	e7c9      	b.n	80082b0 <_strtod_l+0x1d8>
 800831c:	4658      	mov	r0, fp
 800831e:	e7d2      	b.n	80082c6 <_strtod_l+0x1ee>
 8008320:	2b08      	cmp	r3, #8
 8008322:	f103 0301 	add.w	r3, r3, #1
 8008326:	dc03      	bgt.n	8008330 <_strtod_l+0x258>
 8008328:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800832a:	434f      	muls	r7, r1
 800832c:	970a      	str	r7, [sp, #40]	; 0x28
 800832e:	e7e1      	b.n	80082f4 <_strtod_l+0x21c>
 8008330:	2b10      	cmp	r3, #16
 8008332:	bfd8      	it	le
 8008334:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008338:	e7dc      	b.n	80082f4 <_strtod_l+0x21c>
 800833a:	2e10      	cmp	r6, #16
 800833c:	bfdc      	itt	le
 800833e:	230a      	movle	r3, #10
 8008340:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008344:	e7e3      	b.n	800830e <_strtod_l+0x236>
 8008346:	2300      	movs	r3, #0
 8008348:	9308      	str	r3, [sp, #32]
 800834a:	2301      	movs	r3, #1
 800834c:	e780      	b.n	8008250 <_strtod_l+0x178>
 800834e:	f04f 0c00 	mov.w	ip, #0
 8008352:	1caa      	adds	r2, r5, #2
 8008354:	9219      	str	r2, [sp, #100]	; 0x64
 8008356:	78aa      	ldrb	r2, [r5, #2]
 8008358:	e788      	b.n	800826c <_strtod_l+0x194>
 800835a:	f04f 0c01 	mov.w	ip, #1
 800835e:	e7f8      	b.n	8008352 <_strtod_l+0x27a>
 8008360:	0800a1f8 	.word	0x0800a1f8
 8008364:	7ff00000 	.word	0x7ff00000
 8008368:	0800a1f4 	.word	0x0800a1f4
 800836c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800836e:	1c51      	adds	r1, r2, #1
 8008370:	9119      	str	r1, [sp, #100]	; 0x64
 8008372:	7852      	ldrb	r2, [r2, #1]
 8008374:	2a30      	cmp	r2, #48	; 0x30
 8008376:	d0f9      	beq.n	800836c <_strtod_l+0x294>
 8008378:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800837c:	2908      	cmp	r1, #8
 800837e:	f63f af7a 	bhi.w	8008276 <_strtod_l+0x19e>
 8008382:	3a30      	subs	r2, #48	; 0x30
 8008384:	9209      	str	r2, [sp, #36]	; 0x24
 8008386:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008388:	920c      	str	r2, [sp, #48]	; 0x30
 800838a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800838c:	1c57      	adds	r7, r2, #1
 800838e:	9719      	str	r7, [sp, #100]	; 0x64
 8008390:	7852      	ldrb	r2, [r2, #1]
 8008392:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008396:	f1be 0f09 	cmp.w	lr, #9
 800839a:	d938      	bls.n	800840e <_strtod_l+0x336>
 800839c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800839e:	1a7f      	subs	r7, r7, r1
 80083a0:	2f08      	cmp	r7, #8
 80083a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80083a6:	dc03      	bgt.n	80083b0 <_strtod_l+0x2d8>
 80083a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083aa:	428f      	cmp	r7, r1
 80083ac:	bfa8      	it	ge
 80083ae:	460f      	movge	r7, r1
 80083b0:	f1bc 0f00 	cmp.w	ip, #0
 80083b4:	d000      	beq.n	80083b8 <_strtod_l+0x2e0>
 80083b6:	427f      	negs	r7, r7
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	d14f      	bne.n	800845c <_strtod_l+0x384>
 80083bc:	9905      	ldr	r1, [sp, #20]
 80083be:	4301      	orrs	r1, r0
 80083c0:	f47f aec3 	bne.w	800814a <_strtod_l+0x72>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f47f aedb 	bne.w	8008180 <_strtod_l+0xa8>
 80083ca:	2a69      	cmp	r2, #105	; 0x69
 80083cc:	d029      	beq.n	8008422 <_strtod_l+0x34a>
 80083ce:	dc26      	bgt.n	800841e <_strtod_l+0x346>
 80083d0:	2a49      	cmp	r2, #73	; 0x49
 80083d2:	d026      	beq.n	8008422 <_strtod_l+0x34a>
 80083d4:	2a4e      	cmp	r2, #78	; 0x4e
 80083d6:	f47f aed3 	bne.w	8008180 <_strtod_l+0xa8>
 80083da:	499a      	ldr	r1, [pc, #616]	; (8008644 <_strtod_l+0x56c>)
 80083dc:	a819      	add	r0, sp, #100	; 0x64
 80083de:	f001 fbed 	bl	8009bbc <__match>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f43f aecc 	beq.w	8008180 <_strtod_l+0xa8>
 80083e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b28      	cmp	r3, #40	; 0x28
 80083ee:	d12f      	bne.n	8008450 <_strtod_l+0x378>
 80083f0:	4995      	ldr	r1, [pc, #596]	; (8008648 <_strtod_l+0x570>)
 80083f2:	aa1c      	add	r2, sp, #112	; 0x70
 80083f4:	a819      	add	r0, sp, #100	; 0x64
 80083f6:	f001 fbf5 	bl	8009be4 <__hexnan>
 80083fa:	2805      	cmp	r0, #5
 80083fc:	d128      	bne.n	8008450 <_strtod_l+0x378>
 80083fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008400:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008404:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008408:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800840c:	e69d      	b.n	800814a <_strtod_l+0x72>
 800840e:	210a      	movs	r1, #10
 8008410:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008412:	fb01 2107 	mla	r1, r1, r7, r2
 8008416:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800841a:	9209      	str	r2, [sp, #36]	; 0x24
 800841c:	e7b5      	b.n	800838a <_strtod_l+0x2b2>
 800841e:	2a6e      	cmp	r2, #110	; 0x6e
 8008420:	e7d9      	b.n	80083d6 <_strtod_l+0x2fe>
 8008422:	498a      	ldr	r1, [pc, #552]	; (800864c <_strtod_l+0x574>)
 8008424:	a819      	add	r0, sp, #100	; 0x64
 8008426:	f001 fbc9 	bl	8009bbc <__match>
 800842a:	2800      	cmp	r0, #0
 800842c:	f43f aea8 	beq.w	8008180 <_strtod_l+0xa8>
 8008430:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008432:	4987      	ldr	r1, [pc, #540]	; (8008650 <_strtod_l+0x578>)
 8008434:	3b01      	subs	r3, #1
 8008436:	a819      	add	r0, sp, #100	; 0x64
 8008438:	9319      	str	r3, [sp, #100]	; 0x64
 800843a:	f001 fbbf 	bl	8009bbc <__match>
 800843e:	b910      	cbnz	r0, 8008446 <_strtod_l+0x36e>
 8008440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008442:	3301      	adds	r3, #1
 8008444:	9319      	str	r3, [sp, #100]	; 0x64
 8008446:	f04f 0800 	mov.w	r8, #0
 800844a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008654 <_strtod_l+0x57c>
 800844e:	e67c      	b.n	800814a <_strtod_l+0x72>
 8008450:	4881      	ldr	r0, [pc, #516]	; (8008658 <_strtod_l+0x580>)
 8008452:	f001 f8d1 	bl	80095f8 <nan>
 8008456:	4680      	mov	r8, r0
 8008458:	4689      	mov	r9, r1
 800845a:	e676      	b.n	800814a <_strtod_l+0x72>
 800845c:	9b08      	ldr	r3, [sp, #32]
 800845e:	f1bb 0f00 	cmp.w	fp, #0
 8008462:	bf08      	it	eq
 8008464:	46b3      	moveq	fp, r6
 8008466:	1afb      	subs	r3, r7, r3
 8008468:	2e10      	cmp	r6, #16
 800846a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800846c:	4635      	mov	r5, r6
 800846e:	9309      	str	r3, [sp, #36]	; 0x24
 8008470:	bfa8      	it	ge
 8008472:	2510      	movge	r5, #16
 8008474:	f7f7 ffb6 	bl	80003e4 <__aeabi_ui2d>
 8008478:	2e09      	cmp	r6, #9
 800847a:	4680      	mov	r8, r0
 800847c:	4689      	mov	r9, r1
 800847e:	dd13      	ble.n	80084a8 <_strtod_l+0x3d0>
 8008480:	4b76      	ldr	r3, [pc, #472]	; (800865c <_strtod_l+0x584>)
 8008482:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008486:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800848a:	f7f8 f825 	bl	80004d8 <__aeabi_dmul>
 800848e:	4680      	mov	r8, r0
 8008490:	4650      	mov	r0, sl
 8008492:	4689      	mov	r9, r1
 8008494:	f7f7 ffa6 	bl	80003e4 <__aeabi_ui2d>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4640      	mov	r0, r8
 800849e:	4649      	mov	r1, r9
 80084a0:	f7f7 fe64 	bl	800016c <__adddf3>
 80084a4:	4680      	mov	r8, r0
 80084a6:	4689      	mov	r9, r1
 80084a8:	2e0f      	cmp	r6, #15
 80084aa:	dc36      	bgt.n	800851a <_strtod_l+0x442>
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f43f ae4b 	beq.w	800814a <_strtod_l+0x72>
 80084b4:	dd22      	ble.n	80084fc <_strtod_l+0x424>
 80084b6:	2b16      	cmp	r3, #22
 80084b8:	dc09      	bgt.n	80084ce <_strtod_l+0x3f6>
 80084ba:	4968      	ldr	r1, [pc, #416]	; (800865c <_strtod_l+0x584>)
 80084bc:	4642      	mov	r2, r8
 80084be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084c2:	464b      	mov	r3, r9
 80084c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c8:	f7f8 f806 	bl	80004d8 <__aeabi_dmul>
 80084cc:	e7c3      	b.n	8008456 <_strtod_l+0x37e>
 80084ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80084d4:	4293      	cmp	r3, r2
 80084d6:	db20      	blt.n	800851a <_strtod_l+0x442>
 80084d8:	4c60      	ldr	r4, [pc, #384]	; (800865c <_strtod_l+0x584>)
 80084da:	f1c6 060f 	rsb	r6, r6, #15
 80084de:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80084e2:	4642      	mov	r2, r8
 80084e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084e8:	464b      	mov	r3, r9
 80084ea:	f7f7 fff5 	bl	80004d8 <__aeabi_dmul>
 80084ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f0:	1b9e      	subs	r6, r3, r6
 80084f2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80084f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80084fa:	e7e5      	b.n	80084c8 <_strtod_l+0x3f0>
 80084fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fe:	3316      	adds	r3, #22
 8008500:	db0b      	blt.n	800851a <_strtod_l+0x442>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	4640      	mov	r0, r8
 8008506:	1bdf      	subs	r7, r3, r7
 8008508:	4b54      	ldr	r3, [pc, #336]	; (800865c <_strtod_l+0x584>)
 800850a:	4649      	mov	r1, r9
 800850c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008514:	f7f8 f90a 	bl	800072c <__aeabi_ddiv>
 8008518:	e79d      	b.n	8008456 <_strtod_l+0x37e>
 800851a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851c:	1b75      	subs	r5, r6, r5
 800851e:	441d      	add	r5, r3
 8008520:	2d00      	cmp	r5, #0
 8008522:	dd70      	ble.n	8008606 <_strtod_l+0x52e>
 8008524:	f015 030f 	ands.w	r3, r5, #15
 8008528:	d00a      	beq.n	8008540 <_strtod_l+0x468>
 800852a:	494c      	ldr	r1, [pc, #304]	; (800865c <_strtod_l+0x584>)
 800852c:	4642      	mov	r2, r8
 800852e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008536:	464b      	mov	r3, r9
 8008538:	f7f7 ffce 	bl	80004d8 <__aeabi_dmul>
 800853c:	4680      	mov	r8, r0
 800853e:	4689      	mov	r9, r1
 8008540:	f035 050f 	bics.w	r5, r5, #15
 8008544:	d04d      	beq.n	80085e2 <_strtod_l+0x50a>
 8008546:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800854a:	dd22      	ble.n	8008592 <_strtod_l+0x4ba>
 800854c:	2600      	movs	r6, #0
 800854e:	46b3      	mov	fp, r6
 8008550:	960b      	str	r6, [sp, #44]	; 0x2c
 8008552:	9608      	str	r6, [sp, #32]
 8008554:	2322      	movs	r3, #34	; 0x22
 8008556:	f04f 0800 	mov.w	r8, #0
 800855a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008654 <_strtod_l+0x57c>
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008562:	2b00      	cmp	r3, #0
 8008564:	f43f adf1 	beq.w	800814a <_strtod_l+0x72>
 8008568:	4620      	mov	r0, r4
 800856a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800856c:	f7ff f934 	bl	80077d8 <_Bfree>
 8008570:	4620      	mov	r0, r4
 8008572:	9908      	ldr	r1, [sp, #32]
 8008574:	f7ff f930 	bl	80077d8 <_Bfree>
 8008578:	4659      	mov	r1, fp
 800857a:	4620      	mov	r0, r4
 800857c:	f7ff f92c 	bl	80077d8 <_Bfree>
 8008580:	4620      	mov	r0, r4
 8008582:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008584:	f7ff f928 	bl	80077d8 <_Bfree>
 8008588:	4631      	mov	r1, r6
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff f924 	bl	80077d8 <_Bfree>
 8008590:	e5db      	b.n	800814a <_strtod_l+0x72>
 8008592:	4b33      	ldr	r3, [pc, #204]	; (8008660 <_strtod_l+0x588>)
 8008594:	4640      	mov	r0, r8
 8008596:	9305      	str	r3, [sp, #20]
 8008598:	2300      	movs	r3, #0
 800859a:	4649      	mov	r1, r9
 800859c:	469a      	mov	sl, r3
 800859e:	112d      	asrs	r5, r5, #4
 80085a0:	2d01      	cmp	r5, #1
 80085a2:	dc21      	bgt.n	80085e8 <_strtod_l+0x510>
 80085a4:	b10b      	cbz	r3, 80085aa <_strtod_l+0x4d2>
 80085a6:	4680      	mov	r8, r0
 80085a8:	4689      	mov	r9, r1
 80085aa:	492d      	ldr	r1, [pc, #180]	; (8008660 <_strtod_l+0x588>)
 80085ac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80085b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80085b4:	4642      	mov	r2, r8
 80085b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ba:	464b      	mov	r3, r9
 80085bc:	f7f7 ff8c 	bl	80004d8 <__aeabi_dmul>
 80085c0:	4b24      	ldr	r3, [pc, #144]	; (8008654 <_strtod_l+0x57c>)
 80085c2:	460a      	mov	r2, r1
 80085c4:	400b      	ands	r3, r1
 80085c6:	4927      	ldr	r1, [pc, #156]	; (8008664 <_strtod_l+0x58c>)
 80085c8:	4680      	mov	r8, r0
 80085ca:	428b      	cmp	r3, r1
 80085cc:	d8be      	bhi.n	800854c <_strtod_l+0x474>
 80085ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085d2:	428b      	cmp	r3, r1
 80085d4:	bf86      	itte	hi
 80085d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80085da:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008668 <_strtod_l+0x590>
 80085de:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80085e2:	2300      	movs	r3, #0
 80085e4:	9305      	str	r3, [sp, #20]
 80085e6:	e07b      	b.n	80086e0 <_strtod_l+0x608>
 80085e8:	07ea      	lsls	r2, r5, #31
 80085ea:	d505      	bpl.n	80085f8 <_strtod_l+0x520>
 80085ec:	9b05      	ldr	r3, [sp, #20]
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 ff71 	bl	80004d8 <__aeabi_dmul>
 80085f6:	2301      	movs	r3, #1
 80085f8:	9a05      	ldr	r2, [sp, #20]
 80085fa:	f10a 0a01 	add.w	sl, sl, #1
 80085fe:	3208      	adds	r2, #8
 8008600:	106d      	asrs	r5, r5, #1
 8008602:	9205      	str	r2, [sp, #20]
 8008604:	e7cc      	b.n	80085a0 <_strtod_l+0x4c8>
 8008606:	d0ec      	beq.n	80085e2 <_strtod_l+0x50a>
 8008608:	426d      	negs	r5, r5
 800860a:	f015 020f 	ands.w	r2, r5, #15
 800860e:	d00a      	beq.n	8008626 <_strtod_l+0x54e>
 8008610:	4b12      	ldr	r3, [pc, #72]	; (800865c <_strtod_l+0x584>)
 8008612:	4640      	mov	r0, r8
 8008614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008618:	4649      	mov	r1, r9
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f8 f885 	bl	800072c <__aeabi_ddiv>
 8008622:	4680      	mov	r8, r0
 8008624:	4689      	mov	r9, r1
 8008626:	112d      	asrs	r5, r5, #4
 8008628:	d0db      	beq.n	80085e2 <_strtod_l+0x50a>
 800862a:	2d1f      	cmp	r5, #31
 800862c:	dd1e      	ble.n	800866c <_strtod_l+0x594>
 800862e:	2600      	movs	r6, #0
 8008630:	46b3      	mov	fp, r6
 8008632:	960b      	str	r6, [sp, #44]	; 0x2c
 8008634:	9608      	str	r6, [sp, #32]
 8008636:	2322      	movs	r3, #34	; 0x22
 8008638:	f04f 0800 	mov.w	r8, #0
 800863c:	f04f 0900 	mov.w	r9, #0
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	e78d      	b.n	8008560 <_strtod_l+0x488>
 8008644:	08009fdf 	.word	0x08009fdf
 8008648:	0800a20c 	.word	0x0800a20c
 800864c:	08009fd7 	.word	0x08009fd7
 8008650:	0800a00e 	.word	0x0800a00e
 8008654:	7ff00000 	.word	0x7ff00000
 8008658:	0800a39d 	.word	0x0800a39d
 800865c:	0800a120 	.word	0x0800a120
 8008660:	0800a0f8 	.word	0x0800a0f8
 8008664:	7ca00000 	.word	0x7ca00000
 8008668:	7fefffff 	.word	0x7fefffff
 800866c:	f015 0310 	ands.w	r3, r5, #16
 8008670:	bf18      	it	ne
 8008672:	236a      	movne	r3, #106	; 0x6a
 8008674:	4640      	mov	r0, r8
 8008676:	9305      	str	r3, [sp, #20]
 8008678:	4649      	mov	r1, r9
 800867a:	2300      	movs	r3, #0
 800867c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008948 <_strtod_l+0x870>
 8008680:	07ea      	lsls	r2, r5, #31
 8008682:	d504      	bpl.n	800868e <_strtod_l+0x5b6>
 8008684:	e9da 2300 	ldrd	r2, r3, [sl]
 8008688:	f7f7 ff26 	bl	80004d8 <__aeabi_dmul>
 800868c:	2301      	movs	r3, #1
 800868e:	106d      	asrs	r5, r5, #1
 8008690:	f10a 0a08 	add.w	sl, sl, #8
 8008694:	d1f4      	bne.n	8008680 <_strtod_l+0x5a8>
 8008696:	b10b      	cbz	r3, 800869c <_strtod_l+0x5c4>
 8008698:	4680      	mov	r8, r0
 800869a:	4689      	mov	r9, r1
 800869c:	9b05      	ldr	r3, [sp, #20]
 800869e:	b1bb      	cbz	r3, 80086d0 <_strtod_l+0x5f8>
 80086a0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80086a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	4649      	mov	r1, r9
 80086ac:	dd10      	ble.n	80086d0 <_strtod_l+0x5f8>
 80086ae:	2b1f      	cmp	r3, #31
 80086b0:	f340 8128 	ble.w	8008904 <_strtod_l+0x82c>
 80086b4:	2b34      	cmp	r3, #52	; 0x34
 80086b6:	bfd8      	it	le
 80086b8:	f04f 33ff 	movle.w	r3, #4294967295
 80086bc:	f04f 0800 	mov.w	r8, #0
 80086c0:	bfcf      	iteee	gt
 80086c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80086c6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80086ca:	4093      	lslle	r3, r2
 80086cc:	ea03 0901 	andle.w	r9, r3, r1
 80086d0:	2200      	movs	r2, #0
 80086d2:	2300      	movs	r3, #0
 80086d4:	4640      	mov	r0, r8
 80086d6:	4649      	mov	r1, r9
 80086d8:	f7f8 f966 	bl	80009a8 <__aeabi_dcmpeq>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d1a6      	bne.n	800862e <_strtod_l+0x556>
 80086e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e2:	465a      	mov	r2, fp
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	4620      	mov	r0, r4
 80086e8:	4633      	mov	r3, r6
 80086ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086ec:	f7ff f8dc 	bl	80078a8 <__s2b>
 80086f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f43f af2a 	beq.w	800854c <_strtod_l+0x474>
 80086f8:	2600      	movs	r6, #0
 80086fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086fc:	9b08      	ldr	r3, [sp, #32]
 80086fe:	2a00      	cmp	r2, #0
 8008700:	eba3 0307 	sub.w	r3, r3, r7
 8008704:	bfa8      	it	ge
 8008706:	2300      	movge	r3, #0
 8008708:	46b3      	mov	fp, r6
 800870a:	9312      	str	r3, [sp, #72]	; 0x48
 800870c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008710:	9316      	str	r3, [sp, #88]	; 0x58
 8008712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008714:	4620      	mov	r0, r4
 8008716:	6859      	ldr	r1, [r3, #4]
 8008718:	f7ff f81e 	bl	8007758 <_Balloc>
 800871c:	9008      	str	r0, [sp, #32]
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f af18 	beq.w	8008554 <_strtod_l+0x47c>
 8008724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008726:	300c      	adds	r0, #12
 8008728:	691a      	ldr	r2, [r3, #16]
 800872a:	f103 010c 	add.w	r1, r3, #12
 800872e:	3202      	adds	r2, #2
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	f7fe f893 	bl	800685c <memcpy>
 8008736:	ab1c      	add	r3, sp, #112	; 0x70
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	ab1b      	add	r3, sp, #108	; 0x6c
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	4642      	mov	r2, r8
 8008740:	464b      	mov	r3, r9
 8008742:	4620      	mov	r0, r4
 8008744:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008748:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800874c:	f7ff fbd8 	bl	8007f00 <__d2b>
 8008750:	901a      	str	r0, [sp, #104]	; 0x68
 8008752:	2800      	cmp	r0, #0
 8008754:	f43f aefe 	beq.w	8008554 <_strtod_l+0x47c>
 8008758:	2101      	movs	r1, #1
 800875a:	4620      	mov	r0, r4
 800875c:	f7ff f93c 	bl	80079d8 <__i2b>
 8008760:	4683      	mov	fp, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	f43f aef6 	beq.w	8008554 <_strtod_l+0x47c>
 8008768:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800876a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800876c:	2f00      	cmp	r7, #0
 800876e:	bfab      	itete	ge
 8008770:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008772:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008774:	eb07 0a03 	addge.w	sl, r7, r3
 8008778:	1bdd      	sublt	r5, r3, r7
 800877a:	9b05      	ldr	r3, [sp, #20]
 800877c:	bfa8      	it	ge
 800877e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008780:	eba7 0703 	sub.w	r7, r7, r3
 8008784:	4417      	add	r7, r2
 8008786:	4b71      	ldr	r3, [pc, #452]	; (800894c <_strtod_l+0x874>)
 8008788:	f107 37ff 	add.w	r7, r7, #4294967295
 800878c:	bfb8      	it	lt
 800878e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008792:	429f      	cmp	r7, r3
 8008794:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008798:	f280 80c7 	bge.w	800892a <_strtod_l+0x852>
 800879c:	1bdb      	subs	r3, r3, r7
 800879e:	2b1f      	cmp	r3, #31
 80087a0:	f04f 0101 	mov.w	r1, #1
 80087a4:	eba2 0203 	sub.w	r2, r2, r3
 80087a8:	f300 80b3 	bgt.w	8008912 <_strtod_l+0x83a>
 80087ac:	fa01 f303 	lsl.w	r3, r1, r3
 80087b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80087b2:	2300      	movs	r3, #0
 80087b4:	9310      	str	r3, [sp, #64]	; 0x40
 80087b6:	eb0a 0702 	add.w	r7, sl, r2
 80087ba:	9b05      	ldr	r3, [sp, #20]
 80087bc:	45ba      	cmp	sl, r7
 80087be:	4415      	add	r5, r2
 80087c0:	441d      	add	r5, r3
 80087c2:	4653      	mov	r3, sl
 80087c4:	bfa8      	it	ge
 80087c6:	463b      	movge	r3, r7
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	bfa8      	it	ge
 80087cc:	462b      	movge	r3, r5
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	bfc2      	ittt	gt
 80087d2:	1aff      	subgt	r7, r7, r3
 80087d4:	1aed      	subgt	r5, r5, r3
 80087d6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80087da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dd17      	ble.n	8008810 <_strtod_l+0x738>
 80087e0:	4659      	mov	r1, fp
 80087e2:	461a      	mov	r2, r3
 80087e4:	4620      	mov	r0, r4
 80087e6:	f7ff f9b5 	bl	8007b54 <__pow5mult>
 80087ea:	4683      	mov	fp, r0
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f43f aeb1 	beq.w	8008554 <_strtod_l+0x47c>
 80087f2:	4601      	mov	r1, r0
 80087f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087f6:	4620      	mov	r0, r4
 80087f8:	f7ff f904 	bl	8007a04 <__multiply>
 80087fc:	900a      	str	r0, [sp, #40]	; 0x28
 80087fe:	2800      	cmp	r0, #0
 8008800:	f43f aea8 	beq.w	8008554 <_strtod_l+0x47c>
 8008804:	4620      	mov	r0, r4
 8008806:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008808:	f7fe ffe6 	bl	80077d8 <_Bfree>
 800880c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880e:	931a      	str	r3, [sp, #104]	; 0x68
 8008810:	2f00      	cmp	r7, #0
 8008812:	f300 808f 	bgt.w	8008934 <_strtod_l+0x85c>
 8008816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	dd08      	ble.n	800882e <_strtod_l+0x756>
 800881c:	4620      	mov	r0, r4
 800881e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008820:	9908      	ldr	r1, [sp, #32]
 8008822:	f7ff f997 	bl	8007b54 <__pow5mult>
 8008826:	9008      	str	r0, [sp, #32]
 8008828:	2800      	cmp	r0, #0
 800882a:	f43f ae93 	beq.w	8008554 <_strtod_l+0x47c>
 800882e:	2d00      	cmp	r5, #0
 8008830:	dd08      	ble.n	8008844 <_strtod_l+0x76c>
 8008832:	462a      	mov	r2, r5
 8008834:	4620      	mov	r0, r4
 8008836:	9908      	ldr	r1, [sp, #32]
 8008838:	f7ff f9e6 	bl	8007c08 <__lshift>
 800883c:	9008      	str	r0, [sp, #32]
 800883e:	2800      	cmp	r0, #0
 8008840:	f43f ae88 	beq.w	8008554 <_strtod_l+0x47c>
 8008844:	f1ba 0f00 	cmp.w	sl, #0
 8008848:	dd08      	ble.n	800885c <_strtod_l+0x784>
 800884a:	4659      	mov	r1, fp
 800884c:	4652      	mov	r2, sl
 800884e:	4620      	mov	r0, r4
 8008850:	f7ff f9da 	bl	8007c08 <__lshift>
 8008854:	4683      	mov	fp, r0
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f ae7c 	beq.w	8008554 <_strtod_l+0x47c>
 800885c:	4620      	mov	r0, r4
 800885e:	9a08      	ldr	r2, [sp, #32]
 8008860:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008862:	f7ff fa59 	bl	8007d18 <__mdiff>
 8008866:	4606      	mov	r6, r0
 8008868:	2800      	cmp	r0, #0
 800886a:	f43f ae73 	beq.w	8008554 <_strtod_l+0x47c>
 800886e:	2500      	movs	r5, #0
 8008870:	68c3      	ldr	r3, [r0, #12]
 8008872:	4659      	mov	r1, fp
 8008874:	60c5      	str	r5, [r0, #12]
 8008876:	930a      	str	r3, [sp, #40]	; 0x28
 8008878:	f7ff fa32 	bl	8007ce0 <__mcmp>
 800887c:	42a8      	cmp	r0, r5
 800887e:	da6b      	bge.n	8008958 <_strtod_l+0x880>
 8008880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008882:	ea53 0308 	orrs.w	r3, r3, r8
 8008886:	f040 808f 	bne.w	80089a8 <_strtod_l+0x8d0>
 800888a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800888e:	2b00      	cmp	r3, #0
 8008890:	f040 808a 	bne.w	80089a8 <_strtod_l+0x8d0>
 8008894:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008898:	0d1b      	lsrs	r3, r3, #20
 800889a:	051b      	lsls	r3, r3, #20
 800889c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80088a0:	f240 8082 	bls.w	80089a8 <_strtod_l+0x8d0>
 80088a4:	6973      	ldr	r3, [r6, #20]
 80088a6:	b913      	cbnz	r3, 80088ae <_strtod_l+0x7d6>
 80088a8:	6933      	ldr	r3, [r6, #16]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	dd7c      	ble.n	80089a8 <_strtod_l+0x8d0>
 80088ae:	4631      	mov	r1, r6
 80088b0:	2201      	movs	r2, #1
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff f9a8 	bl	8007c08 <__lshift>
 80088b8:	4659      	mov	r1, fp
 80088ba:	4606      	mov	r6, r0
 80088bc:	f7ff fa10 	bl	8007ce0 <__mcmp>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	dd71      	ble.n	80089a8 <_strtod_l+0x8d0>
 80088c4:	9905      	ldr	r1, [sp, #20]
 80088c6:	464b      	mov	r3, r9
 80088c8:	4a21      	ldr	r2, [pc, #132]	; (8008950 <_strtod_l+0x878>)
 80088ca:	2900      	cmp	r1, #0
 80088cc:	f000 808d 	beq.w	80089ea <_strtod_l+0x912>
 80088d0:	ea02 0109 	and.w	r1, r2, r9
 80088d4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80088d8:	f300 8087 	bgt.w	80089ea <_strtod_l+0x912>
 80088dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088e0:	f77f aea9 	ble.w	8008636 <_strtod_l+0x55e>
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <_strtod_l+0x87c>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	f7f7 fdf4 	bl	80004d8 <__aeabi_dmul>
 80088f0:	4b17      	ldr	r3, [pc, #92]	; (8008950 <_strtod_l+0x878>)
 80088f2:	4680      	mov	r8, r0
 80088f4:	400b      	ands	r3, r1
 80088f6:	4689      	mov	r9, r1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f47f ae35 	bne.w	8008568 <_strtod_l+0x490>
 80088fe:	2322      	movs	r3, #34	; 0x22
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	e631      	b.n	8008568 <_strtod_l+0x490>
 8008904:	f04f 32ff 	mov.w	r2, #4294967295
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	ea03 0808 	and.w	r8, r3, r8
 8008910:	e6de      	b.n	80086d0 <_strtod_l+0x5f8>
 8008912:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008916:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800891a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800891e:	37e2      	adds	r7, #226	; 0xe2
 8008920:	fa01 f307 	lsl.w	r3, r1, r7
 8008924:	9310      	str	r3, [sp, #64]	; 0x40
 8008926:	9113      	str	r1, [sp, #76]	; 0x4c
 8008928:	e745      	b.n	80087b6 <_strtod_l+0x6de>
 800892a:	2300      	movs	r3, #0
 800892c:	9310      	str	r3, [sp, #64]	; 0x40
 800892e:	2301      	movs	r3, #1
 8008930:	9313      	str	r3, [sp, #76]	; 0x4c
 8008932:	e740      	b.n	80087b6 <_strtod_l+0x6de>
 8008934:	463a      	mov	r2, r7
 8008936:	4620      	mov	r0, r4
 8008938:	991a      	ldr	r1, [sp, #104]	; 0x68
 800893a:	f7ff f965 	bl	8007c08 <__lshift>
 800893e:	901a      	str	r0, [sp, #104]	; 0x68
 8008940:	2800      	cmp	r0, #0
 8008942:	f47f af68 	bne.w	8008816 <_strtod_l+0x73e>
 8008946:	e605      	b.n	8008554 <_strtod_l+0x47c>
 8008948:	0800a220 	.word	0x0800a220
 800894c:	fffffc02 	.word	0xfffffc02
 8008950:	7ff00000 	.word	0x7ff00000
 8008954:	39500000 	.word	0x39500000
 8008958:	46ca      	mov	sl, r9
 800895a:	d165      	bne.n	8008a28 <_strtod_l+0x950>
 800895c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800895e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008962:	b352      	cbz	r2, 80089ba <_strtod_l+0x8e2>
 8008964:	4a9e      	ldr	r2, [pc, #632]	; (8008be0 <_strtod_l+0xb08>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d12a      	bne.n	80089c0 <_strtod_l+0x8e8>
 800896a:	9b05      	ldr	r3, [sp, #20]
 800896c:	4641      	mov	r1, r8
 800896e:	b1fb      	cbz	r3, 80089b0 <_strtod_l+0x8d8>
 8008970:	4b9c      	ldr	r3, [pc, #624]	; (8008be4 <_strtod_l+0xb0c>)
 8008972:	f04f 32ff 	mov.w	r2, #4294967295
 8008976:	ea09 0303 	and.w	r3, r9, r3
 800897a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800897e:	d81a      	bhi.n	80089b6 <_strtod_l+0x8de>
 8008980:	0d1b      	lsrs	r3, r3, #20
 8008982:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008986:	fa02 f303 	lsl.w	r3, r2, r3
 800898a:	4299      	cmp	r1, r3
 800898c:	d118      	bne.n	80089c0 <_strtod_l+0x8e8>
 800898e:	4b96      	ldr	r3, [pc, #600]	; (8008be8 <_strtod_l+0xb10>)
 8008990:	459a      	cmp	sl, r3
 8008992:	d102      	bne.n	800899a <_strtod_l+0x8c2>
 8008994:	3101      	adds	r1, #1
 8008996:	f43f addd 	beq.w	8008554 <_strtod_l+0x47c>
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	4b91      	ldr	r3, [pc, #580]	; (8008be4 <_strtod_l+0xb0c>)
 80089a0:	ea0a 0303 	and.w	r3, sl, r3
 80089a4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d19a      	bne.n	80088e4 <_strtod_l+0x80c>
 80089ae:	e5db      	b.n	8008568 <_strtod_l+0x490>
 80089b0:	f04f 33ff 	mov.w	r3, #4294967295
 80089b4:	e7e9      	b.n	800898a <_strtod_l+0x8b2>
 80089b6:	4613      	mov	r3, r2
 80089b8:	e7e7      	b.n	800898a <_strtod_l+0x8b2>
 80089ba:	ea53 0308 	orrs.w	r3, r3, r8
 80089be:	d081      	beq.n	80088c4 <_strtod_l+0x7ec>
 80089c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089c2:	b1e3      	cbz	r3, 80089fe <_strtod_l+0x926>
 80089c4:	ea13 0f0a 	tst.w	r3, sl
 80089c8:	d0ee      	beq.n	80089a8 <_strtod_l+0x8d0>
 80089ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089cc:	4640      	mov	r0, r8
 80089ce:	4649      	mov	r1, r9
 80089d0:	9a05      	ldr	r2, [sp, #20]
 80089d2:	b1c3      	cbz	r3, 8008a06 <_strtod_l+0x92e>
 80089d4:	f7ff fb5c 	bl	8008090 <sulp>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089e0:	f7f7 fbc4 	bl	800016c <__adddf3>
 80089e4:	4680      	mov	r8, r0
 80089e6:	4689      	mov	r9, r1
 80089e8:	e7de      	b.n	80089a8 <_strtod_l+0x8d0>
 80089ea:	4013      	ands	r3, r2
 80089ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80089f4:	f04f 38ff 	mov.w	r8, #4294967295
 80089f8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80089fc:	e7d4      	b.n	80089a8 <_strtod_l+0x8d0>
 80089fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a00:	ea13 0f08 	tst.w	r3, r8
 8008a04:	e7e0      	b.n	80089c8 <_strtod_l+0x8f0>
 8008a06:	f7ff fb43 	bl	8008090 <sulp>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008a10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a12:	f7f7 fba9 	bl	8000168 <__aeabi_dsub>
 8008a16:	2200      	movs	r2, #0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	4689      	mov	r9, r1
 8008a1e:	f7f7 ffc3 	bl	80009a8 <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d0c0      	beq.n	80089a8 <_strtod_l+0x8d0>
 8008a26:	e606      	b.n	8008636 <_strtod_l+0x55e>
 8008a28:	4659      	mov	r1, fp
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff fabe 	bl	8007fac <__ratio>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a3e:	f7f7 ffc7 	bl	80009d0 <__aeabi_dcmple>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d06f      	beq.n	8008b26 <_strtod_l+0xa4e>
 8008a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d17c      	bne.n	8008b46 <_strtod_l+0xa6e>
 8008a4c:	f1b8 0f00 	cmp.w	r8, #0
 8008a50:	d159      	bne.n	8008b06 <_strtod_l+0xa2e>
 8008a52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d17b      	bne.n	8008b52 <_strtod_l+0xa7a>
 8008a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a5e:	2200      	movs	r2, #0
 8008a60:	4b62      	ldr	r3, [pc, #392]	; (8008bec <_strtod_l+0xb14>)
 8008a62:	f7f7 ffab 	bl	80009bc <__aeabi_dcmplt>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d15a      	bne.n	8008b20 <_strtod_l+0xa48>
 8008a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a6e:	2200      	movs	r2, #0
 8008a70:	4b5f      	ldr	r3, [pc, #380]	; (8008bf0 <_strtod_l+0xb18>)
 8008a72:	f7f7 fd31 	bl	80004d8 <__aeabi_dmul>
 8008a76:	4605      	mov	r5, r0
 8008a78:	460f      	mov	r7, r1
 8008a7a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008a7e:	9506      	str	r5, [sp, #24]
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a86:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008a8a:	4b56      	ldr	r3, [pc, #344]	; (8008be4 <_strtod_l+0xb0c>)
 8008a8c:	4a55      	ldr	r2, [pc, #340]	; (8008be4 <_strtod_l+0xb0c>)
 8008a8e:	ea0a 0303 	and.w	r3, sl, r3
 8008a92:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a94:	4b57      	ldr	r3, [pc, #348]	; (8008bf4 <_strtod_l+0xb1c>)
 8008a96:	ea0a 0202 	and.w	r2, sl, r2
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	f040 80b0 	bne.w	8008c00 <_strtod_l+0xb28>
 8008aa0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	f7ff f9c2 	bl	8007e30 <__ulp>
 8008aac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ab0:	f7f7 fd12 	bl	80004d8 <__aeabi_dmul>
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	464b      	mov	r3, r9
 8008ab8:	f7f7 fb58 	bl	800016c <__adddf3>
 8008abc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008be4 <_strtod_l+0xb0c>
 8008ac0:	4a4d      	ldr	r2, [pc, #308]	; (8008bf8 <_strtod_l+0xb20>)
 8008ac2:	ea01 0a0a 	and.w	sl, r1, sl
 8008ac6:	4592      	cmp	sl, r2
 8008ac8:	4680      	mov	r8, r0
 8008aca:	d948      	bls.n	8008b5e <_strtod_l+0xa86>
 8008acc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ace:	4b46      	ldr	r3, [pc, #280]	; (8008be8 <_strtod_l+0xb10>)
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d103      	bne.n	8008adc <_strtod_l+0xa04>
 8008ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f43f ad3c 	beq.w	8008554 <_strtod_l+0x47c>
 8008adc:	f04f 38ff 	mov.w	r8, #4294967295
 8008ae0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008be8 <_strtod_l+0xb10>
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ae8:	f7fe fe76 	bl	80077d8 <_Bfree>
 8008aec:	4620      	mov	r0, r4
 8008aee:	9908      	ldr	r1, [sp, #32]
 8008af0:	f7fe fe72 	bl	80077d8 <_Bfree>
 8008af4:	4659      	mov	r1, fp
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7fe fe6e 	bl	80077d8 <_Bfree>
 8008afc:	4631      	mov	r1, r6
 8008afe:	4620      	mov	r0, r4
 8008b00:	f7fe fe6a 	bl	80077d8 <_Bfree>
 8008b04:	e605      	b.n	8008712 <_strtod_l+0x63a>
 8008b06:	f1b8 0f01 	cmp.w	r8, #1
 8008b0a:	d103      	bne.n	8008b14 <_strtod_l+0xa3c>
 8008b0c:	f1b9 0f00 	cmp.w	r9, #0
 8008b10:	f43f ad91 	beq.w	8008636 <_strtod_l+0x55e>
 8008b14:	2200      	movs	r2, #0
 8008b16:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <_strtod_l+0xb24>)
 8008b18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b1e:	e016      	b.n	8008b4e <_strtod_l+0xa76>
 8008b20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b22:	4f33      	ldr	r7, [pc, #204]	; (8008bf0 <_strtod_l+0xb18>)
 8008b24:	e7a9      	b.n	8008a7a <_strtod_l+0x9a2>
 8008b26:	4b32      	ldr	r3, [pc, #200]	; (8008bf0 <_strtod_l+0xb18>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b2e:	f7f7 fcd3 	bl	80004d8 <__aeabi_dmul>
 8008b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b34:	4605      	mov	r5, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d09e      	beq.n	8008a7a <_strtod_l+0x9a2>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b44:	e79d      	b.n	8008a82 <_strtod_l+0x9aa>
 8008b46:	2200      	movs	r2, #0
 8008b48:	4b28      	ldr	r3, [pc, #160]	; (8008bec <_strtod_l+0xb14>)
 8008b4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b4e:	4f27      	ldr	r7, [pc, #156]	; (8008bec <_strtod_l+0xb14>)
 8008b50:	e797      	b.n	8008a82 <_strtod_l+0x9aa>
 8008b52:	2200      	movs	r2, #0
 8008b54:	4b29      	ldr	r3, [pc, #164]	; (8008bfc <_strtod_l+0xb24>)
 8008b56:	4645      	mov	r5, r8
 8008b58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b5c:	e7f7      	b.n	8008b4e <_strtod_l+0xa76>
 8008b5e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	46ca      	mov	sl, r9
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1bc      	bne.n	8008ae4 <_strtod_l+0xa0c>
 8008b6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b70:	0d1b      	lsrs	r3, r3, #20
 8008b72:	051b      	lsls	r3, r3, #20
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d1b5      	bne.n	8008ae4 <_strtod_l+0xa0c>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	f7f7 fff4 	bl	8000b68 <__aeabi_d2lz>
 8008b80:	f7f7 fc7c 	bl	800047c <__aeabi_l2d>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4628      	mov	r0, r5
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	f7f7 faec 	bl	8000168 <__aeabi_dsub>
 8008b90:	460b      	mov	r3, r1
 8008b92:	4602      	mov	r2, r0
 8008b94:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008b98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008ba2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008ba6:	d06c      	beq.n	8008c82 <_strtod_l+0xbaa>
 8008ba8:	a309      	add	r3, pc, #36	; (adr r3, 8008bd0 <_strtod_l+0xaf8>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 ff05 	bl	80009bc <__aeabi_dcmplt>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f47f acd8 	bne.w	8008568 <_strtod_l+0x490>
 8008bb8:	a307      	add	r3, pc, #28	; (adr r3, 8008bd8 <_strtod_l+0xb00>)
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bc2:	f7f7 ff19 	bl	80009f8 <__aeabi_dcmpgt>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d08c      	beq.n	8008ae4 <_strtod_l+0xa0c>
 8008bca:	e4cd      	b.n	8008568 <_strtod_l+0x490>
 8008bcc:	f3af 8000 	nop.w
 8008bd0:	94a03595 	.word	0x94a03595
 8008bd4:	3fdfffff 	.word	0x3fdfffff
 8008bd8:	35afe535 	.word	0x35afe535
 8008bdc:	3fe00000 	.word	0x3fe00000
 8008be0:	000fffff 	.word	0x000fffff
 8008be4:	7ff00000 	.word	0x7ff00000
 8008be8:	7fefffff 	.word	0x7fefffff
 8008bec:	3ff00000 	.word	0x3ff00000
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	7fe00000 	.word	0x7fe00000
 8008bf8:	7c9fffff 	.word	0x7c9fffff
 8008bfc:	bff00000 	.word	0xbff00000
 8008c00:	9b05      	ldr	r3, [sp, #20]
 8008c02:	b333      	cbz	r3, 8008c52 <_strtod_l+0xb7a>
 8008c04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c0a:	d822      	bhi.n	8008c52 <_strtod_l+0xb7a>
 8008c0c:	a328      	add	r3, pc, #160	; (adr r3, 8008cb0 <_strtod_l+0xbd8>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	4628      	mov	r0, r5
 8008c14:	4639      	mov	r1, r7
 8008c16:	f7f7 fedb 	bl	80009d0 <__aeabi_dcmple>
 8008c1a:	b1a0      	cbz	r0, 8008c46 <_strtod_l+0xb6e>
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f7f7 ff32 	bl	8000a88 <__aeabi_d2uiz>
 8008c24:	2801      	cmp	r0, #1
 8008c26:	bf38      	it	cc
 8008c28:	2001      	movcc	r0, #1
 8008c2a:	f7f7 fbdb 	bl	80003e4 <__aeabi_ui2d>
 8008c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c30:	4605      	mov	r5, r0
 8008c32:	460f      	mov	r7, r1
 8008c34:	bb03      	cbnz	r3, 8008c78 <_strtod_l+0xba0>
 8008c36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c3a:	9014      	str	r0, [sp, #80]	; 0x50
 8008c3c:	9315      	str	r3, [sp, #84]	; 0x54
 8008c3e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c42:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c4a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	9311      	str	r3, [sp, #68]	; 0x44
 8008c52:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c56:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008c5a:	f7ff f8e9 	bl	8007e30 <__ulp>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4640      	mov	r0, r8
 8008c64:	4649      	mov	r1, r9
 8008c66:	f7f7 fc37 	bl	80004d8 <__aeabi_dmul>
 8008c6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c6e:	f7f7 fa7d 	bl	800016c <__adddf3>
 8008c72:	4680      	mov	r8, r0
 8008c74:	4689      	mov	r9, r1
 8008c76:	e774      	b.n	8008b62 <_strtod_l+0xa8a>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008c80:	e7dd      	b.n	8008c3e <_strtod_l+0xb66>
 8008c82:	a30d      	add	r3, pc, #52	; (adr r3, 8008cb8 <_strtod_l+0xbe0>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 fe98 	bl	80009bc <__aeabi_dcmplt>
 8008c8c:	e79b      	b.n	8008bc6 <_strtod_l+0xaee>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	930e      	str	r3, [sp, #56]	; 0x38
 8008c92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	f7ff ba5b 	b.w	8008152 <_strtod_l+0x7a>
 8008c9c:	2a65      	cmp	r2, #101	; 0x65
 8008c9e:	f43f ab52 	beq.w	8008346 <_strtod_l+0x26e>
 8008ca2:	2a45      	cmp	r2, #69	; 0x45
 8008ca4:	f43f ab4f 	beq.w	8008346 <_strtod_l+0x26e>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f7ff bb87 	b.w	80083bc <_strtod_l+0x2e4>
 8008cae:	bf00      	nop
 8008cb0:	ffc00000 	.word	0xffc00000
 8008cb4:	41dfffff 	.word	0x41dfffff
 8008cb8:	94a03595 	.word	0x94a03595
 8008cbc:	3fcfffff 	.word	0x3fcfffff

08008cc0 <_strtod_r>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	; (8008cc8 <_strtod_r+0x8>)
 8008cc2:	f7ff ba09 	b.w	80080d8 <_strtod_l>
 8008cc6:	bf00      	nop
 8008cc8:	20000070 	.word	0x20000070

08008ccc <_strtol_l.constprop.0>:
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd2:	4686      	mov	lr, r0
 8008cd4:	4690      	mov	r8, r2
 8008cd6:	d001      	beq.n	8008cdc <_strtol_l.constprop.0+0x10>
 8008cd8:	2b24      	cmp	r3, #36	; 0x24
 8008cda:	d906      	bls.n	8008cea <_strtol_l.constprop.0+0x1e>
 8008cdc:	f7fd fd84 	bl	80067e8 <__errno>
 8008ce0:	2316      	movs	r3, #22
 8008ce2:	6003      	str	r3, [r0, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	460d      	mov	r5, r1
 8008cec:	4835      	ldr	r0, [pc, #212]	; (8008dc4 <_strtol_l.constprop.0+0xf8>)
 8008cee:	462a      	mov	r2, r5
 8008cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cf4:	5d06      	ldrb	r6, [r0, r4]
 8008cf6:	f016 0608 	ands.w	r6, r6, #8
 8008cfa:	d1f8      	bne.n	8008cee <_strtol_l.constprop.0+0x22>
 8008cfc:	2c2d      	cmp	r4, #45	; 0x2d
 8008cfe:	d12e      	bne.n	8008d5e <_strtol_l.constprop.0+0x92>
 8008d00:	2601      	movs	r6, #1
 8008d02:	782c      	ldrb	r4, [r5, #0]
 8008d04:	1c95      	adds	r5, r2, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d057      	beq.n	8008dba <_strtol_l.constprop.0+0xee>
 8008d0a:	2b10      	cmp	r3, #16
 8008d0c:	d109      	bne.n	8008d22 <_strtol_l.constprop.0+0x56>
 8008d0e:	2c30      	cmp	r4, #48	; 0x30
 8008d10:	d107      	bne.n	8008d22 <_strtol_l.constprop.0+0x56>
 8008d12:	782a      	ldrb	r2, [r5, #0]
 8008d14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008d18:	2a58      	cmp	r2, #88	; 0x58
 8008d1a:	d149      	bne.n	8008db0 <_strtol_l.constprop.0+0xe4>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	786c      	ldrb	r4, [r5, #1]
 8008d20:	3502      	adds	r5, #2
 8008d22:	2200      	movs	r2, #0
 8008d24:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008d28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d2c:	fbbc f9f3 	udiv	r9, ip, r3
 8008d30:	4610      	mov	r0, r2
 8008d32:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d36:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008d3a:	2f09      	cmp	r7, #9
 8008d3c:	d814      	bhi.n	8008d68 <_strtol_l.constprop.0+0x9c>
 8008d3e:	463c      	mov	r4, r7
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	dd20      	ble.n	8008d86 <_strtol_l.constprop.0+0xba>
 8008d44:	1c57      	adds	r7, r2, #1
 8008d46:	d007      	beq.n	8008d58 <_strtol_l.constprop.0+0x8c>
 8008d48:	4581      	cmp	r9, r0
 8008d4a:	d319      	bcc.n	8008d80 <_strtol_l.constprop.0+0xb4>
 8008d4c:	d101      	bne.n	8008d52 <_strtol_l.constprop.0+0x86>
 8008d4e:	45a2      	cmp	sl, r4
 8008d50:	db16      	blt.n	8008d80 <_strtol_l.constprop.0+0xb4>
 8008d52:	2201      	movs	r2, #1
 8008d54:	fb00 4003 	mla	r0, r0, r3, r4
 8008d58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d5c:	e7eb      	b.n	8008d36 <_strtol_l.constprop.0+0x6a>
 8008d5e:	2c2b      	cmp	r4, #43	; 0x2b
 8008d60:	bf04      	itt	eq
 8008d62:	782c      	ldrbeq	r4, [r5, #0]
 8008d64:	1c95      	addeq	r5, r2, #2
 8008d66:	e7ce      	b.n	8008d06 <_strtol_l.constprop.0+0x3a>
 8008d68:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008d6c:	2f19      	cmp	r7, #25
 8008d6e:	d801      	bhi.n	8008d74 <_strtol_l.constprop.0+0xa8>
 8008d70:	3c37      	subs	r4, #55	; 0x37
 8008d72:	e7e5      	b.n	8008d40 <_strtol_l.constprop.0+0x74>
 8008d74:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008d78:	2f19      	cmp	r7, #25
 8008d7a:	d804      	bhi.n	8008d86 <_strtol_l.constprop.0+0xba>
 8008d7c:	3c57      	subs	r4, #87	; 0x57
 8008d7e:	e7df      	b.n	8008d40 <_strtol_l.constprop.0+0x74>
 8008d80:	f04f 32ff 	mov.w	r2, #4294967295
 8008d84:	e7e8      	b.n	8008d58 <_strtol_l.constprop.0+0x8c>
 8008d86:	1c53      	adds	r3, r2, #1
 8008d88:	d108      	bne.n	8008d9c <_strtol_l.constprop.0+0xd0>
 8008d8a:	2322      	movs	r3, #34	; 0x22
 8008d8c:	4660      	mov	r0, ip
 8008d8e:	f8ce 3000 	str.w	r3, [lr]
 8008d92:	f1b8 0f00 	cmp.w	r8, #0
 8008d96:	d0a6      	beq.n	8008ce6 <_strtol_l.constprop.0+0x1a>
 8008d98:	1e69      	subs	r1, r5, #1
 8008d9a:	e006      	b.n	8008daa <_strtol_l.constprop.0+0xde>
 8008d9c:	b106      	cbz	r6, 8008da0 <_strtol_l.constprop.0+0xd4>
 8008d9e:	4240      	negs	r0, r0
 8008da0:	f1b8 0f00 	cmp.w	r8, #0
 8008da4:	d09f      	beq.n	8008ce6 <_strtol_l.constprop.0+0x1a>
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d1f6      	bne.n	8008d98 <_strtol_l.constprop.0+0xcc>
 8008daa:	f8c8 1000 	str.w	r1, [r8]
 8008dae:	e79a      	b.n	8008ce6 <_strtol_l.constprop.0+0x1a>
 8008db0:	2430      	movs	r4, #48	; 0x30
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1b5      	bne.n	8008d22 <_strtol_l.constprop.0+0x56>
 8008db6:	2308      	movs	r3, #8
 8008db8:	e7b3      	b.n	8008d22 <_strtol_l.constprop.0+0x56>
 8008dba:	2c30      	cmp	r4, #48	; 0x30
 8008dbc:	d0a9      	beq.n	8008d12 <_strtol_l.constprop.0+0x46>
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	e7af      	b.n	8008d22 <_strtol_l.constprop.0+0x56>
 8008dc2:	bf00      	nop
 8008dc4:	0800a249 	.word	0x0800a249

08008dc8 <_strtol_r>:
 8008dc8:	f7ff bf80 	b.w	8008ccc <_strtol_l.constprop.0>

08008dcc <__ssputs_r>:
 8008dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	461f      	mov	r7, r3
 8008dd2:	688e      	ldr	r6, [r1, #8]
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	42be      	cmp	r6, r7
 8008dd8:	460c      	mov	r4, r1
 8008dda:	4690      	mov	r8, r2
 8008ddc:	680b      	ldr	r3, [r1, #0]
 8008dde:	d82c      	bhi.n	8008e3a <__ssputs_r+0x6e>
 8008de0:	898a      	ldrh	r2, [r1, #12]
 8008de2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008de6:	d026      	beq.n	8008e36 <__ssputs_r+0x6a>
 8008de8:	6965      	ldr	r5, [r4, #20]
 8008dea:	6909      	ldr	r1, [r1, #16]
 8008dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008df0:	eba3 0901 	sub.w	r9, r3, r1
 8008df4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008df8:	1c7b      	adds	r3, r7, #1
 8008dfa:	444b      	add	r3, r9
 8008dfc:	106d      	asrs	r5, r5, #1
 8008dfe:	429d      	cmp	r5, r3
 8008e00:	bf38      	it	cc
 8008e02:	461d      	movcc	r5, r3
 8008e04:	0553      	lsls	r3, r2, #21
 8008e06:	d527      	bpl.n	8008e58 <__ssputs_r+0x8c>
 8008e08:	4629      	mov	r1, r5
 8008e0a:	f7fe fc19 	bl	8007640 <_malloc_r>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	b360      	cbz	r0, 8008e6c <__ssputs_r+0xa0>
 8008e12:	464a      	mov	r2, r9
 8008e14:	6921      	ldr	r1, [r4, #16]
 8008e16:	f7fd fd21 	bl	800685c <memcpy>
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	6126      	str	r6, [r4, #16]
 8008e28:	444e      	add	r6, r9
 8008e2a:	6026      	str	r6, [r4, #0]
 8008e2c:	463e      	mov	r6, r7
 8008e2e:	6165      	str	r5, [r4, #20]
 8008e30:	eba5 0509 	sub.w	r5, r5, r9
 8008e34:	60a5      	str	r5, [r4, #8]
 8008e36:	42be      	cmp	r6, r7
 8008e38:	d900      	bls.n	8008e3c <__ssputs_r+0x70>
 8008e3a:	463e      	mov	r6, r7
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4641      	mov	r1, r8
 8008e40:	6820      	ldr	r0, [r4, #0]
 8008e42:	f000 fb9d 	bl	8009580 <memmove>
 8008e46:	2000      	movs	r0, #0
 8008e48:	68a3      	ldr	r3, [r4, #8]
 8008e4a:	1b9b      	subs	r3, r3, r6
 8008e4c:	60a3      	str	r3, [r4, #8]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	4433      	add	r3, r6
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e58:	462a      	mov	r2, r5
 8008e5a:	f000 ff70 	bl	8009d3e <_realloc_r>
 8008e5e:	4606      	mov	r6, r0
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d1e0      	bne.n	8008e26 <__ssputs_r+0x5a>
 8008e64:	4650      	mov	r0, sl
 8008e66:	6921      	ldr	r1, [r4, #16]
 8008e68:	f7fe fb7a 	bl	8007560 <_free_r>
 8008e6c:	230c      	movs	r3, #12
 8008e6e:	f8ca 3000 	str.w	r3, [sl]
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7c:	81a3      	strh	r3, [r4, #12]
 8008e7e:	e7e9      	b.n	8008e54 <__ssputs_r+0x88>

08008e80 <_svfiprintf_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	4698      	mov	r8, r3
 8008e86:	898b      	ldrh	r3, [r1, #12]
 8008e88:	4607      	mov	r7, r0
 8008e8a:	061b      	lsls	r3, r3, #24
 8008e8c:	460d      	mov	r5, r1
 8008e8e:	4614      	mov	r4, r2
 8008e90:	b09d      	sub	sp, #116	; 0x74
 8008e92:	d50e      	bpl.n	8008eb2 <_svfiprintf_r+0x32>
 8008e94:	690b      	ldr	r3, [r1, #16]
 8008e96:	b963      	cbnz	r3, 8008eb2 <_svfiprintf_r+0x32>
 8008e98:	2140      	movs	r1, #64	; 0x40
 8008e9a:	f7fe fbd1 	bl	8007640 <_malloc_r>
 8008e9e:	6028      	str	r0, [r5, #0]
 8008ea0:	6128      	str	r0, [r5, #16]
 8008ea2:	b920      	cbnz	r0, 8008eae <_svfiprintf_r+0x2e>
 8008ea4:	230c      	movs	r3, #12
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eac:	e0d0      	b.n	8009050 <_svfiprintf_r+0x1d0>
 8008eae:	2340      	movs	r3, #64	; 0x40
 8008eb0:	616b      	str	r3, [r5, #20]
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb6:	2320      	movs	r3, #32
 8008eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ebc:	2330      	movs	r3, #48	; 0x30
 8008ebe:	f04f 0901 	mov.w	r9, #1
 8008ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ec6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009068 <_svfiprintf_r+0x1e8>
 8008eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ece:	4623      	mov	r3, r4
 8008ed0:	469a      	mov	sl, r3
 8008ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed6:	b10a      	cbz	r2, 8008edc <_svfiprintf_r+0x5c>
 8008ed8:	2a25      	cmp	r2, #37	; 0x25
 8008eda:	d1f9      	bne.n	8008ed0 <_svfiprintf_r+0x50>
 8008edc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ee0:	d00b      	beq.n	8008efa <_svfiprintf_r+0x7a>
 8008ee2:	465b      	mov	r3, fp
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f7ff ff6f 	bl	8008dcc <__ssputs_r>
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f000 80a9 	beq.w	8009046 <_svfiprintf_r+0x1c6>
 8008ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ef6:	445a      	add	r2, fp
 8008ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8008efa:	f89a 3000 	ldrb.w	r3, [sl]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 80a1 	beq.w	8009046 <_svfiprintf_r+0x1c6>
 8008f04:	2300      	movs	r3, #0
 8008f06:	f04f 32ff 	mov.w	r2, #4294967295
 8008f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f0e:	f10a 0a01 	add.w	sl, sl, #1
 8008f12:	9304      	str	r3, [sp, #16]
 8008f14:	9307      	str	r3, [sp, #28]
 8008f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f1c:	4654      	mov	r4, sl
 8008f1e:	2205      	movs	r2, #5
 8008f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f24:	4850      	ldr	r0, [pc, #320]	; (8009068 <_svfiprintf_r+0x1e8>)
 8008f26:	f7fd fc8b 	bl	8006840 <memchr>
 8008f2a:	9a04      	ldr	r2, [sp, #16]
 8008f2c:	b9d8      	cbnz	r0, 8008f66 <_svfiprintf_r+0xe6>
 8008f2e:	06d0      	lsls	r0, r2, #27
 8008f30:	bf44      	itt	mi
 8008f32:	2320      	movmi	r3, #32
 8008f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f38:	0711      	lsls	r1, r2, #28
 8008f3a:	bf44      	itt	mi
 8008f3c:	232b      	movmi	r3, #43	; 0x2b
 8008f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f42:	f89a 3000 	ldrb.w	r3, [sl]
 8008f46:	2b2a      	cmp	r3, #42	; 0x2a
 8008f48:	d015      	beq.n	8008f76 <_svfiprintf_r+0xf6>
 8008f4a:	4654      	mov	r4, sl
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f04f 0c0a 	mov.w	ip, #10
 8008f52:	9a07      	ldr	r2, [sp, #28]
 8008f54:	4621      	mov	r1, r4
 8008f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f5a:	3b30      	subs	r3, #48	; 0x30
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	d94d      	bls.n	8008ffc <_svfiprintf_r+0x17c>
 8008f60:	b1b0      	cbz	r0, 8008f90 <_svfiprintf_r+0x110>
 8008f62:	9207      	str	r2, [sp, #28]
 8008f64:	e014      	b.n	8008f90 <_svfiprintf_r+0x110>
 8008f66:	eba0 0308 	sub.w	r3, r0, r8
 8008f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	46a2      	mov	sl, r4
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	e7d2      	b.n	8008f1c <_svfiprintf_r+0x9c>
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	1d19      	adds	r1, r3, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	9103      	str	r1, [sp, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bfbb      	ittet	lt
 8008f82:	425b      	neglt	r3, r3
 8008f84:	f042 0202 	orrlt.w	r2, r2, #2
 8008f88:	9307      	strge	r3, [sp, #28]
 8008f8a:	9307      	strlt	r3, [sp, #28]
 8008f8c:	bfb8      	it	lt
 8008f8e:	9204      	strlt	r2, [sp, #16]
 8008f90:	7823      	ldrb	r3, [r4, #0]
 8008f92:	2b2e      	cmp	r3, #46	; 0x2e
 8008f94:	d10c      	bne.n	8008fb0 <_svfiprintf_r+0x130>
 8008f96:	7863      	ldrb	r3, [r4, #1]
 8008f98:	2b2a      	cmp	r3, #42	; 0x2a
 8008f9a:	d134      	bne.n	8009006 <_svfiprintf_r+0x186>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	3402      	adds	r4, #2
 8008fa0:	1d1a      	adds	r2, r3, #4
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	9203      	str	r2, [sp, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bfb8      	it	lt
 8008faa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fae:	9305      	str	r3, [sp, #20]
 8008fb0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800906c <_svfiprintf_r+0x1ec>
 8008fb4:	2203      	movs	r2, #3
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	7821      	ldrb	r1, [r4, #0]
 8008fba:	f7fd fc41 	bl	8006840 <memchr>
 8008fbe:	b138      	cbz	r0, 8008fd0 <_svfiprintf_r+0x150>
 8008fc0:	2240      	movs	r2, #64	; 0x40
 8008fc2:	9b04      	ldr	r3, [sp, #16]
 8008fc4:	eba0 000a 	sub.w	r0, r0, sl
 8008fc8:	4082      	lsls	r2, r0
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	3401      	adds	r4, #1
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd4:	2206      	movs	r2, #6
 8008fd6:	4826      	ldr	r0, [pc, #152]	; (8009070 <_svfiprintf_r+0x1f0>)
 8008fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fdc:	f7fd fc30 	bl	8006840 <memchr>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d038      	beq.n	8009056 <_svfiprintf_r+0x1d6>
 8008fe4:	4b23      	ldr	r3, [pc, #140]	; (8009074 <_svfiprintf_r+0x1f4>)
 8008fe6:	bb1b      	cbnz	r3, 8009030 <_svfiprintf_r+0x1b0>
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	3307      	adds	r3, #7
 8008fec:	f023 0307 	bic.w	r3, r3, #7
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	9303      	str	r3, [sp, #12]
 8008ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff6:	4433      	add	r3, r6
 8008ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8008ffa:	e768      	b.n	8008ece <_svfiprintf_r+0x4e>
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	2001      	movs	r0, #1
 8009000:	fb0c 3202 	mla	r2, ip, r2, r3
 8009004:	e7a6      	b.n	8008f54 <_svfiprintf_r+0xd4>
 8009006:	2300      	movs	r3, #0
 8009008:	f04f 0c0a 	mov.w	ip, #10
 800900c:	4619      	mov	r1, r3
 800900e:	3401      	adds	r4, #1
 8009010:	9305      	str	r3, [sp, #20]
 8009012:	4620      	mov	r0, r4
 8009014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009018:	3a30      	subs	r2, #48	; 0x30
 800901a:	2a09      	cmp	r2, #9
 800901c:	d903      	bls.n	8009026 <_svfiprintf_r+0x1a6>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0c6      	beq.n	8008fb0 <_svfiprintf_r+0x130>
 8009022:	9105      	str	r1, [sp, #20]
 8009024:	e7c4      	b.n	8008fb0 <_svfiprintf_r+0x130>
 8009026:	4604      	mov	r4, r0
 8009028:	2301      	movs	r3, #1
 800902a:	fb0c 2101 	mla	r1, ip, r1, r2
 800902e:	e7f0      	b.n	8009012 <_svfiprintf_r+0x192>
 8009030:	ab03      	add	r3, sp, #12
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	462a      	mov	r2, r5
 8009036:	4638      	mov	r0, r7
 8009038:	4b0f      	ldr	r3, [pc, #60]	; (8009078 <_svfiprintf_r+0x1f8>)
 800903a:	a904      	add	r1, sp, #16
 800903c:	f7fc fc9e 	bl	800597c <_printf_float>
 8009040:	1c42      	adds	r2, r0, #1
 8009042:	4606      	mov	r6, r0
 8009044:	d1d6      	bne.n	8008ff4 <_svfiprintf_r+0x174>
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	065b      	lsls	r3, r3, #25
 800904a:	f53f af2d 	bmi.w	8008ea8 <_svfiprintf_r+0x28>
 800904e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009050:	b01d      	add	sp, #116	; 0x74
 8009052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009056:	ab03      	add	r3, sp, #12
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	462a      	mov	r2, r5
 800905c:	4638      	mov	r0, r7
 800905e:	4b06      	ldr	r3, [pc, #24]	; (8009078 <_svfiprintf_r+0x1f8>)
 8009060:	a904      	add	r1, sp, #16
 8009062:	f7fc ff2b 	bl	8005ebc <_printf_i>
 8009066:	e7eb      	b.n	8009040 <_svfiprintf_r+0x1c0>
 8009068:	0800a349 	.word	0x0800a349
 800906c:	0800a34f 	.word	0x0800a34f
 8009070:	0800a353 	.word	0x0800a353
 8009074:	0800597d 	.word	0x0800597d
 8009078:	08008dcd 	.word	0x08008dcd

0800907c <__sfputc_r>:
 800907c:	6893      	ldr	r3, [r2, #8]
 800907e:	b410      	push	{r4}
 8009080:	3b01      	subs	r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	6093      	str	r3, [r2, #8]
 8009086:	da07      	bge.n	8009098 <__sfputc_r+0x1c>
 8009088:	6994      	ldr	r4, [r2, #24]
 800908a:	42a3      	cmp	r3, r4
 800908c:	db01      	blt.n	8009092 <__sfputc_r+0x16>
 800908e:	290a      	cmp	r1, #10
 8009090:	d102      	bne.n	8009098 <__sfputc_r+0x1c>
 8009092:	bc10      	pop	{r4}
 8009094:	f000 b9de 	b.w	8009454 <__swbuf_r>
 8009098:	6813      	ldr	r3, [r2, #0]
 800909a:	1c58      	adds	r0, r3, #1
 800909c:	6010      	str	r0, [r2, #0]
 800909e:	7019      	strb	r1, [r3, #0]
 80090a0:	4608      	mov	r0, r1
 80090a2:	bc10      	pop	{r4}
 80090a4:	4770      	bx	lr

080090a6 <__sfputs_r>:
 80090a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a8:	4606      	mov	r6, r0
 80090aa:	460f      	mov	r7, r1
 80090ac:	4614      	mov	r4, r2
 80090ae:	18d5      	adds	r5, r2, r3
 80090b0:	42ac      	cmp	r4, r5
 80090b2:	d101      	bne.n	80090b8 <__sfputs_r+0x12>
 80090b4:	2000      	movs	r0, #0
 80090b6:	e007      	b.n	80090c8 <__sfputs_r+0x22>
 80090b8:	463a      	mov	r2, r7
 80090ba:	4630      	mov	r0, r6
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	f7ff ffdc 	bl	800907c <__sfputc_r>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d1f3      	bne.n	80090b0 <__sfputs_r+0xa>
 80090c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090cc <_vfiprintf_r>:
 80090cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	460d      	mov	r5, r1
 80090d2:	4614      	mov	r4, r2
 80090d4:	4698      	mov	r8, r3
 80090d6:	4606      	mov	r6, r0
 80090d8:	b09d      	sub	sp, #116	; 0x74
 80090da:	b118      	cbz	r0, 80090e4 <_vfiprintf_r+0x18>
 80090dc:	6a03      	ldr	r3, [r0, #32]
 80090de:	b90b      	cbnz	r3, 80090e4 <_vfiprintf_r+0x18>
 80090e0:	f7fd fa96 	bl	8006610 <__sinit>
 80090e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090e6:	07d9      	lsls	r1, r3, #31
 80090e8:	d405      	bmi.n	80090f6 <_vfiprintf_r+0x2a>
 80090ea:	89ab      	ldrh	r3, [r5, #12]
 80090ec:	059a      	lsls	r2, r3, #22
 80090ee:	d402      	bmi.n	80090f6 <_vfiprintf_r+0x2a>
 80090f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090f2:	f7fd fba3 	bl	800683c <__retarget_lock_acquire_recursive>
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	071b      	lsls	r3, r3, #28
 80090fa:	d501      	bpl.n	8009100 <_vfiprintf_r+0x34>
 80090fc:	692b      	ldr	r3, [r5, #16]
 80090fe:	b99b      	cbnz	r3, 8009128 <_vfiprintf_r+0x5c>
 8009100:	4629      	mov	r1, r5
 8009102:	4630      	mov	r0, r6
 8009104:	f000 f9e4 	bl	80094d0 <__swsetup_r>
 8009108:	b170      	cbz	r0, 8009128 <_vfiprintf_r+0x5c>
 800910a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800910c:	07dc      	lsls	r4, r3, #31
 800910e:	d504      	bpl.n	800911a <_vfiprintf_r+0x4e>
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	b01d      	add	sp, #116	; 0x74
 8009116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911a:	89ab      	ldrh	r3, [r5, #12]
 800911c:	0598      	lsls	r0, r3, #22
 800911e:	d4f7      	bmi.n	8009110 <_vfiprintf_r+0x44>
 8009120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009122:	f7fd fb8c 	bl	800683e <__retarget_lock_release_recursive>
 8009126:	e7f3      	b.n	8009110 <_vfiprintf_r+0x44>
 8009128:	2300      	movs	r3, #0
 800912a:	9309      	str	r3, [sp, #36]	; 0x24
 800912c:	2320      	movs	r3, #32
 800912e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009132:	2330      	movs	r3, #48	; 0x30
 8009134:	f04f 0901 	mov.w	r9, #1
 8009138:	f8cd 800c 	str.w	r8, [sp, #12]
 800913c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80092ec <_vfiprintf_r+0x220>
 8009140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009144:	4623      	mov	r3, r4
 8009146:	469a      	mov	sl, r3
 8009148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800914c:	b10a      	cbz	r2, 8009152 <_vfiprintf_r+0x86>
 800914e:	2a25      	cmp	r2, #37	; 0x25
 8009150:	d1f9      	bne.n	8009146 <_vfiprintf_r+0x7a>
 8009152:	ebba 0b04 	subs.w	fp, sl, r4
 8009156:	d00b      	beq.n	8009170 <_vfiprintf_r+0xa4>
 8009158:	465b      	mov	r3, fp
 800915a:	4622      	mov	r2, r4
 800915c:	4629      	mov	r1, r5
 800915e:	4630      	mov	r0, r6
 8009160:	f7ff ffa1 	bl	80090a6 <__sfputs_r>
 8009164:	3001      	adds	r0, #1
 8009166:	f000 80a9 	beq.w	80092bc <_vfiprintf_r+0x1f0>
 800916a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800916c:	445a      	add	r2, fp
 800916e:	9209      	str	r2, [sp, #36]	; 0x24
 8009170:	f89a 3000 	ldrb.w	r3, [sl]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 80a1 	beq.w	80092bc <_vfiprintf_r+0x1f0>
 800917a:	2300      	movs	r3, #0
 800917c:	f04f 32ff 	mov.w	r2, #4294967295
 8009180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009184:	f10a 0a01 	add.w	sl, sl, #1
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	9307      	str	r3, [sp, #28]
 800918c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009190:	931a      	str	r3, [sp, #104]	; 0x68
 8009192:	4654      	mov	r4, sl
 8009194:	2205      	movs	r2, #5
 8009196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919a:	4854      	ldr	r0, [pc, #336]	; (80092ec <_vfiprintf_r+0x220>)
 800919c:	f7fd fb50 	bl	8006840 <memchr>
 80091a0:	9a04      	ldr	r2, [sp, #16]
 80091a2:	b9d8      	cbnz	r0, 80091dc <_vfiprintf_r+0x110>
 80091a4:	06d1      	lsls	r1, r2, #27
 80091a6:	bf44      	itt	mi
 80091a8:	2320      	movmi	r3, #32
 80091aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ae:	0713      	lsls	r3, r2, #28
 80091b0:	bf44      	itt	mi
 80091b2:	232b      	movmi	r3, #43	; 0x2b
 80091b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b8:	f89a 3000 	ldrb.w	r3, [sl]
 80091bc:	2b2a      	cmp	r3, #42	; 0x2a
 80091be:	d015      	beq.n	80091ec <_vfiprintf_r+0x120>
 80091c0:	4654      	mov	r4, sl
 80091c2:	2000      	movs	r0, #0
 80091c4:	f04f 0c0a 	mov.w	ip, #10
 80091c8:	9a07      	ldr	r2, [sp, #28]
 80091ca:	4621      	mov	r1, r4
 80091cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d0:	3b30      	subs	r3, #48	; 0x30
 80091d2:	2b09      	cmp	r3, #9
 80091d4:	d94d      	bls.n	8009272 <_vfiprintf_r+0x1a6>
 80091d6:	b1b0      	cbz	r0, 8009206 <_vfiprintf_r+0x13a>
 80091d8:	9207      	str	r2, [sp, #28]
 80091da:	e014      	b.n	8009206 <_vfiprintf_r+0x13a>
 80091dc:	eba0 0308 	sub.w	r3, r0, r8
 80091e0:	fa09 f303 	lsl.w	r3, r9, r3
 80091e4:	4313      	orrs	r3, r2
 80091e6:	46a2      	mov	sl, r4
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	e7d2      	b.n	8009192 <_vfiprintf_r+0xc6>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	1d19      	adds	r1, r3, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	9103      	str	r1, [sp, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bfbb      	ittet	lt
 80091f8:	425b      	neglt	r3, r3
 80091fa:	f042 0202 	orrlt.w	r2, r2, #2
 80091fe:	9307      	strge	r3, [sp, #28]
 8009200:	9307      	strlt	r3, [sp, #28]
 8009202:	bfb8      	it	lt
 8009204:	9204      	strlt	r2, [sp, #16]
 8009206:	7823      	ldrb	r3, [r4, #0]
 8009208:	2b2e      	cmp	r3, #46	; 0x2e
 800920a:	d10c      	bne.n	8009226 <_vfiprintf_r+0x15a>
 800920c:	7863      	ldrb	r3, [r4, #1]
 800920e:	2b2a      	cmp	r3, #42	; 0x2a
 8009210:	d134      	bne.n	800927c <_vfiprintf_r+0x1b0>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	3402      	adds	r4, #2
 8009216:	1d1a      	adds	r2, r3, #4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	9203      	str	r2, [sp, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	bfb8      	it	lt
 8009220:	f04f 33ff 	movlt.w	r3, #4294967295
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092f0 <_vfiprintf_r+0x224>
 800922a:	2203      	movs	r2, #3
 800922c:	4650      	mov	r0, sl
 800922e:	7821      	ldrb	r1, [r4, #0]
 8009230:	f7fd fb06 	bl	8006840 <memchr>
 8009234:	b138      	cbz	r0, 8009246 <_vfiprintf_r+0x17a>
 8009236:	2240      	movs	r2, #64	; 0x40
 8009238:	9b04      	ldr	r3, [sp, #16]
 800923a:	eba0 000a 	sub.w	r0, r0, sl
 800923e:	4082      	lsls	r2, r0
 8009240:	4313      	orrs	r3, r2
 8009242:	3401      	adds	r4, #1
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924a:	2206      	movs	r2, #6
 800924c:	4829      	ldr	r0, [pc, #164]	; (80092f4 <_vfiprintf_r+0x228>)
 800924e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009252:	f7fd faf5 	bl	8006840 <memchr>
 8009256:	2800      	cmp	r0, #0
 8009258:	d03f      	beq.n	80092da <_vfiprintf_r+0x20e>
 800925a:	4b27      	ldr	r3, [pc, #156]	; (80092f8 <_vfiprintf_r+0x22c>)
 800925c:	bb1b      	cbnz	r3, 80092a6 <_vfiprintf_r+0x1da>
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	3307      	adds	r3, #7
 8009262:	f023 0307 	bic.w	r3, r3, #7
 8009266:	3308      	adds	r3, #8
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926c:	443b      	add	r3, r7
 800926e:	9309      	str	r3, [sp, #36]	; 0x24
 8009270:	e768      	b.n	8009144 <_vfiprintf_r+0x78>
 8009272:	460c      	mov	r4, r1
 8009274:	2001      	movs	r0, #1
 8009276:	fb0c 3202 	mla	r2, ip, r2, r3
 800927a:	e7a6      	b.n	80091ca <_vfiprintf_r+0xfe>
 800927c:	2300      	movs	r3, #0
 800927e:	f04f 0c0a 	mov.w	ip, #10
 8009282:	4619      	mov	r1, r3
 8009284:	3401      	adds	r4, #1
 8009286:	9305      	str	r3, [sp, #20]
 8009288:	4620      	mov	r0, r4
 800928a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800928e:	3a30      	subs	r2, #48	; 0x30
 8009290:	2a09      	cmp	r2, #9
 8009292:	d903      	bls.n	800929c <_vfiprintf_r+0x1d0>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0c6      	beq.n	8009226 <_vfiprintf_r+0x15a>
 8009298:	9105      	str	r1, [sp, #20]
 800929a:	e7c4      	b.n	8009226 <_vfiprintf_r+0x15a>
 800929c:	4604      	mov	r4, r0
 800929e:	2301      	movs	r3, #1
 80092a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80092a4:	e7f0      	b.n	8009288 <_vfiprintf_r+0x1bc>
 80092a6:	ab03      	add	r3, sp, #12
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	462a      	mov	r2, r5
 80092ac:	4630      	mov	r0, r6
 80092ae:	4b13      	ldr	r3, [pc, #76]	; (80092fc <_vfiprintf_r+0x230>)
 80092b0:	a904      	add	r1, sp, #16
 80092b2:	f7fc fb63 	bl	800597c <_printf_float>
 80092b6:	4607      	mov	r7, r0
 80092b8:	1c78      	adds	r0, r7, #1
 80092ba:	d1d6      	bne.n	800926a <_vfiprintf_r+0x19e>
 80092bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092be:	07d9      	lsls	r1, r3, #31
 80092c0:	d405      	bmi.n	80092ce <_vfiprintf_r+0x202>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	059a      	lsls	r2, r3, #22
 80092c6:	d402      	bmi.n	80092ce <_vfiprintf_r+0x202>
 80092c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ca:	f7fd fab8 	bl	800683e <__retarget_lock_release_recursive>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	065b      	lsls	r3, r3, #25
 80092d2:	f53f af1d 	bmi.w	8009110 <_vfiprintf_r+0x44>
 80092d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d8:	e71c      	b.n	8009114 <_vfiprintf_r+0x48>
 80092da:	ab03      	add	r3, sp, #12
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	462a      	mov	r2, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	4b06      	ldr	r3, [pc, #24]	; (80092fc <_vfiprintf_r+0x230>)
 80092e4:	a904      	add	r1, sp, #16
 80092e6:	f7fc fde9 	bl	8005ebc <_printf_i>
 80092ea:	e7e4      	b.n	80092b6 <_vfiprintf_r+0x1ea>
 80092ec:	0800a349 	.word	0x0800a349
 80092f0:	0800a34f 	.word	0x0800a34f
 80092f4:	0800a353 	.word	0x0800a353
 80092f8:	0800597d 	.word	0x0800597d
 80092fc:	080090a7 	.word	0x080090a7

08009300 <__sflush_r>:
 8009300:	898a      	ldrh	r2, [r1, #12]
 8009302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009304:	4605      	mov	r5, r0
 8009306:	0710      	lsls	r0, r2, #28
 8009308:	460c      	mov	r4, r1
 800930a:	d457      	bmi.n	80093bc <__sflush_r+0xbc>
 800930c:	684b      	ldr	r3, [r1, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	dc04      	bgt.n	800931c <__sflush_r+0x1c>
 8009312:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc01      	bgt.n	800931c <__sflush_r+0x1c>
 8009318:	2000      	movs	r0, #0
 800931a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800931e:	2e00      	cmp	r6, #0
 8009320:	d0fa      	beq.n	8009318 <__sflush_r+0x18>
 8009322:	2300      	movs	r3, #0
 8009324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009328:	682f      	ldr	r7, [r5, #0]
 800932a:	6a21      	ldr	r1, [r4, #32]
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	d032      	beq.n	8009396 <__sflush_r+0x96>
 8009330:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	075a      	lsls	r2, r3, #29
 8009336:	d505      	bpl.n	8009344 <__sflush_r+0x44>
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	1ac0      	subs	r0, r0, r3
 800933c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800933e:	b10b      	cbz	r3, 8009344 <__sflush_r+0x44>
 8009340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009342:	1ac0      	subs	r0, r0, r3
 8009344:	2300      	movs	r3, #0
 8009346:	4602      	mov	r2, r0
 8009348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800934a:	4628      	mov	r0, r5
 800934c:	6a21      	ldr	r1, [r4, #32]
 800934e:	47b0      	blx	r6
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	d106      	bne.n	8009364 <__sflush_r+0x64>
 8009356:	6829      	ldr	r1, [r5, #0]
 8009358:	291d      	cmp	r1, #29
 800935a:	d82b      	bhi.n	80093b4 <__sflush_r+0xb4>
 800935c:	4a28      	ldr	r2, [pc, #160]	; (8009400 <__sflush_r+0x100>)
 800935e:	410a      	asrs	r2, r1
 8009360:	07d6      	lsls	r6, r2, #31
 8009362:	d427      	bmi.n	80093b4 <__sflush_r+0xb4>
 8009364:	2200      	movs	r2, #0
 8009366:	6062      	str	r2, [r4, #4]
 8009368:	6922      	ldr	r2, [r4, #16]
 800936a:	04d9      	lsls	r1, r3, #19
 800936c:	6022      	str	r2, [r4, #0]
 800936e:	d504      	bpl.n	800937a <__sflush_r+0x7a>
 8009370:	1c42      	adds	r2, r0, #1
 8009372:	d101      	bne.n	8009378 <__sflush_r+0x78>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b903      	cbnz	r3, 800937a <__sflush_r+0x7a>
 8009378:	6560      	str	r0, [r4, #84]	; 0x54
 800937a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800937c:	602f      	str	r7, [r5, #0]
 800937e:	2900      	cmp	r1, #0
 8009380:	d0ca      	beq.n	8009318 <__sflush_r+0x18>
 8009382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009386:	4299      	cmp	r1, r3
 8009388:	d002      	beq.n	8009390 <__sflush_r+0x90>
 800938a:	4628      	mov	r0, r5
 800938c:	f7fe f8e8 	bl	8007560 <_free_r>
 8009390:	2000      	movs	r0, #0
 8009392:	6360      	str	r0, [r4, #52]	; 0x34
 8009394:	e7c1      	b.n	800931a <__sflush_r+0x1a>
 8009396:	2301      	movs	r3, #1
 8009398:	4628      	mov	r0, r5
 800939a:	47b0      	blx	r6
 800939c:	1c41      	adds	r1, r0, #1
 800939e:	d1c8      	bne.n	8009332 <__sflush_r+0x32>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0c5      	beq.n	8009332 <__sflush_r+0x32>
 80093a6:	2b1d      	cmp	r3, #29
 80093a8:	d001      	beq.n	80093ae <__sflush_r+0xae>
 80093aa:	2b16      	cmp	r3, #22
 80093ac:	d101      	bne.n	80093b2 <__sflush_r+0xb2>
 80093ae:	602f      	str	r7, [r5, #0]
 80093b0:	e7b2      	b.n	8009318 <__sflush_r+0x18>
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	e7ae      	b.n	800931a <__sflush_r+0x1a>
 80093bc:	690f      	ldr	r7, [r1, #16]
 80093be:	2f00      	cmp	r7, #0
 80093c0:	d0aa      	beq.n	8009318 <__sflush_r+0x18>
 80093c2:	0793      	lsls	r3, r2, #30
 80093c4:	bf18      	it	ne
 80093c6:	2300      	movne	r3, #0
 80093c8:	680e      	ldr	r6, [r1, #0]
 80093ca:	bf08      	it	eq
 80093cc:	694b      	ldreq	r3, [r1, #20]
 80093ce:	1bf6      	subs	r6, r6, r7
 80093d0:	600f      	str	r7, [r1, #0]
 80093d2:	608b      	str	r3, [r1, #8]
 80093d4:	2e00      	cmp	r6, #0
 80093d6:	dd9f      	ble.n	8009318 <__sflush_r+0x18>
 80093d8:	4633      	mov	r3, r6
 80093da:	463a      	mov	r2, r7
 80093dc:	4628      	mov	r0, r5
 80093de:	6a21      	ldr	r1, [r4, #32]
 80093e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80093e4:	47e0      	blx	ip
 80093e6:	2800      	cmp	r0, #0
 80093e8:	dc06      	bgt.n	80093f8 <__sflush_r+0xf8>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295
 80093f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	e790      	b.n	800931a <__sflush_r+0x1a>
 80093f8:	4407      	add	r7, r0
 80093fa:	1a36      	subs	r6, r6, r0
 80093fc:	e7ea      	b.n	80093d4 <__sflush_r+0xd4>
 80093fe:	bf00      	nop
 8009400:	dfbffffe 	.word	0xdfbffffe

08009404 <_fflush_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	690b      	ldr	r3, [r1, #16]
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b913      	cbnz	r3, 8009414 <_fflush_r+0x10>
 800940e:	2500      	movs	r5, #0
 8009410:	4628      	mov	r0, r5
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	b118      	cbz	r0, 800941e <_fflush_r+0x1a>
 8009416:	6a03      	ldr	r3, [r0, #32]
 8009418:	b90b      	cbnz	r3, 800941e <_fflush_r+0x1a>
 800941a:	f7fd f8f9 	bl	8006610 <__sinit>
 800941e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0f3      	beq.n	800940e <_fflush_r+0xa>
 8009426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009428:	07d0      	lsls	r0, r2, #31
 800942a:	d404      	bmi.n	8009436 <_fflush_r+0x32>
 800942c:	0599      	lsls	r1, r3, #22
 800942e:	d402      	bmi.n	8009436 <_fflush_r+0x32>
 8009430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009432:	f7fd fa03 	bl	800683c <__retarget_lock_acquire_recursive>
 8009436:	4628      	mov	r0, r5
 8009438:	4621      	mov	r1, r4
 800943a:	f7ff ff61 	bl	8009300 <__sflush_r>
 800943e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009440:	4605      	mov	r5, r0
 8009442:	07da      	lsls	r2, r3, #31
 8009444:	d4e4      	bmi.n	8009410 <_fflush_r+0xc>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	059b      	lsls	r3, r3, #22
 800944a:	d4e1      	bmi.n	8009410 <_fflush_r+0xc>
 800944c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800944e:	f7fd f9f6 	bl	800683e <__retarget_lock_release_recursive>
 8009452:	e7dd      	b.n	8009410 <_fflush_r+0xc>

08009454 <__swbuf_r>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	460e      	mov	r6, r1
 8009458:	4614      	mov	r4, r2
 800945a:	4605      	mov	r5, r0
 800945c:	b118      	cbz	r0, 8009466 <__swbuf_r+0x12>
 800945e:	6a03      	ldr	r3, [r0, #32]
 8009460:	b90b      	cbnz	r3, 8009466 <__swbuf_r+0x12>
 8009462:	f7fd f8d5 	bl	8006610 <__sinit>
 8009466:	69a3      	ldr	r3, [r4, #24]
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	071a      	lsls	r2, r3, #28
 800946e:	d525      	bpl.n	80094bc <__swbuf_r+0x68>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	b31b      	cbz	r3, 80094bc <__swbuf_r+0x68>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	6922      	ldr	r2, [r4, #16]
 8009478:	b2f6      	uxtb	r6, r6
 800947a:	1a98      	subs	r0, r3, r2
 800947c:	6963      	ldr	r3, [r4, #20]
 800947e:	4637      	mov	r7, r6
 8009480:	4283      	cmp	r3, r0
 8009482:	dc04      	bgt.n	800948e <__swbuf_r+0x3a>
 8009484:	4621      	mov	r1, r4
 8009486:	4628      	mov	r0, r5
 8009488:	f7ff ffbc 	bl	8009404 <_fflush_r>
 800948c:	b9e0      	cbnz	r0, 80094c8 <__swbuf_r+0x74>
 800948e:	68a3      	ldr	r3, [r4, #8]
 8009490:	3b01      	subs	r3, #1
 8009492:	60a3      	str	r3, [r4, #8]
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	6022      	str	r2, [r4, #0]
 800949a:	701e      	strb	r6, [r3, #0]
 800949c:	6962      	ldr	r2, [r4, #20]
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d004      	beq.n	80094ae <__swbuf_r+0x5a>
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	07db      	lsls	r3, r3, #31
 80094a8:	d506      	bpl.n	80094b8 <__swbuf_r+0x64>
 80094aa:	2e0a      	cmp	r6, #10
 80094ac:	d104      	bne.n	80094b8 <__swbuf_r+0x64>
 80094ae:	4621      	mov	r1, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	f7ff ffa7 	bl	8009404 <_fflush_r>
 80094b6:	b938      	cbnz	r0, 80094c8 <__swbuf_r+0x74>
 80094b8:	4638      	mov	r0, r7
 80094ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094bc:	4621      	mov	r1, r4
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 f806 	bl	80094d0 <__swsetup_r>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d0d5      	beq.n	8009474 <__swbuf_r+0x20>
 80094c8:	f04f 37ff 	mov.w	r7, #4294967295
 80094cc:	e7f4      	b.n	80094b8 <__swbuf_r+0x64>
	...

080094d0 <__swsetup_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4b2a      	ldr	r3, [pc, #168]	; (800957c <__swsetup_r+0xac>)
 80094d4:	4605      	mov	r5, r0
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	460c      	mov	r4, r1
 80094da:	b118      	cbz	r0, 80094e4 <__swsetup_r+0x14>
 80094dc:	6a03      	ldr	r3, [r0, #32]
 80094de:	b90b      	cbnz	r3, 80094e4 <__swsetup_r+0x14>
 80094e0:	f7fd f896 	bl	8006610 <__sinit>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094ea:	0718      	lsls	r0, r3, #28
 80094ec:	d422      	bmi.n	8009534 <__swsetup_r+0x64>
 80094ee:	06d9      	lsls	r1, r3, #27
 80094f0:	d407      	bmi.n	8009502 <__swsetup_r+0x32>
 80094f2:	2309      	movs	r3, #9
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094fa:	f04f 30ff 	mov.w	r0, #4294967295
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	e034      	b.n	800956c <__swsetup_r+0x9c>
 8009502:	0758      	lsls	r0, r3, #29
 8009504:	d512      	bpl.n	800952c <__swsetup_r+0x5c>
 8009506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009508:	b141      	cbz	r1, 800951c <__swsetup_r+0x4c>
 800950a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800950e:	4299      	cmp	r1, r3
 8009510:	d002      	beq.n	8009518 <__swsetup_r+0x48>
 8009512:	4628      	mov	r0, r5
 8009514:	f7fe f824 	bl	8007560 <_free_r>
 8009518:	2300      	movs	r3, #0
 800951a:	6363      	str	r3, [r4, #52]	; 0x34
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009522:	81a3      	strh	r3, [r4, #12]
 8009524:	2300      	movs	r3, #0
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	6023      	str	r3, [r4, #0]
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f043 0308 	orr.w	r3, r3, #8
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	b94b      	cbnz	r3, 800954c <__swsetup_r+0x7c>
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800953e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009542:	d003      	beq.n	800954c <__swsetup_r+0x7c>
 8009544:	4621      	mov	r1, r4
 8009546:	4628      	mov	r0, r5
 8009548:	f000 fc6d 	bl	8009e26 <__smakebuf_r>
 800954c:	89a0      	ldrh	r0, [r4, #12]
 800954e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009552:	f010 0301 	ands.w	r3, r0, #1
 8009556:	d00a      	beq.n	800956e <__swsetup_r+0x9e>
 8009558:	2300      	movs	r3, #0
 800955a:	60a3      	str	r3, [r4, #8]
 800955c:	6963      	ldr	r3, [r4, #20]
 800955e:	425b      	negs	r3, r3
 8009560:	61a3      	str	r3, [r4, #24]
 8009562:	6923      	ldr	r3, [r4, #16]
 8009564:	b943      	cbnz	r3, 8009578 <__swsetup_r+0xa8>
 8009566:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800956a:	d1c4      	bne.n	80094f6 <__swsetup_r+0x26>
 800956c:	bd38      	pop	{r3, r4, r5, pc}
 800956e:	0781      	lsls	r1, r0, #30
 8009570:	bf58      	it	pl
 8009572:	6963      	ldrpl	r3, [r4, #20]
 8009574:	60a3      	str	r3, [r4, #8]
 8009576:	e7f4      	b.n	8009562 <__swsetup_r+0x92>
 8009578:	2000      	movs	r0, #0
 800957a:	e7f7      	b.n	800956c <__swsetup_r+0x9c>
 800957c:	2000006c 	.word	0x2000006c

08009580 <memmove>:
 8009580:	4288      	cmp	r0, r1
 8009582:	b510      	push	{r4, lr}
 8009584:	eb01 0402 	add.w	r4, r1, r2
 8009588:	d902      	bls.n	8009590 <memmove+0x10>
 800958a:	4284      	cmp	r4, r0
 800958c:	4623      	mov	r3, r4
 800958e:	d807      	bhi.n	80095a0 <memmove+0x20>
 8009590:	1e43      	subs	r3, r0, #1
 8009592:	42a1      	cmp	r1, r4
 8009594:	d008      	beq.n	80095a8 <memmove+0x28>
 8009596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800959a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800959e:	e7f8      	b.n	8009592 <memmove+0x12>
 80095a0:	4601      	mov	r1, r0
 80095a2:	4402      	add	r2, r0
 80095a4:	428a      	cmp	r2, r1
 80095a6:	d100      	bne.n	80095aa <memmove+0x2a>
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095b2:	e7f7      	b.n	80095a4 <memmove+0x24>

080095b4 <strncmp>:
 80095b4:	b510      	push	{r4, lr}
 80095b6:	b16a      	cbz	r2, 80095d4 <strncmp+0x20>
 80095b8:	3901      	subs	r1, #1
 80095ba:	1884      	adds	r4, r0, r2
 80095bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d103      	bne.n	80095d0 <strncmp+0x1c>
 80095c8:	42a0      	cmp	r0, r4
 80095ca:	d001      	beq.n	80095d0 <strncmp+0x1c>
 80095cc:	2a00      	cmp	r2, #0
 80095ce:	d1f5      	bne.n	80095bc <strncmp+0x8>
 80095d0:	1ad0      	subs	r0, r2, r3
 80095d2:	bd10      	pop	{r4, pc}
 80095d4:	4610      	mov	r0, r2
 80095d6:	e7fc      	b.n	80095d2 <strncmp+0x1e>

080095d8 <_sbrk_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	2300      	movs	r3, #0
 80095dc:	4d05      	ldr	r5, [pc, #20]	; (80095f4 <_sbrk_r+0x1c>)
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7f8 fbcc 	bl	8001d80 <_sbrk>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_sbrk_r+0x1a>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_sbrk_r+0x1a>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	20000608 	.word	0x20000608

080095f8 <nan>:
 80095f8:	2000      	movs	r0, #0
 80095fa:	4901      	ldr	r1, [pc, #4]	; (8009600 <nan+0x8>)
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	7ff80000 	.word	0x7ff80000

08009604 <__assert_func>:
 8009604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009606:	4614      	mov	r4, r2
 8009608:	461a      	mov	r2, r3
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <__assert_func+0x2c>)
 800960c:	4605      	mov	r5, r0
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68d8      	ldr	r0, [r3, #12]
 8009612:	b14c      	cbz	r4, 8009628 <__assert_func+0x24>
 8009614:	4b07      	ldr	r3, [pc, #28]	; (8009634 <__assert_func+0x30>)
 8009616:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800961a:	9100      	str	r1, [sp, #0]
 800961c:	462b      	mov	r3, r5
 800961e:	4906      	ldr	r1, [pc, #24]	; (8009638 <__assert_func+0x34>)
 8009620:	f000 fbca 	bl	8009db8 <fiprintf>
 8009624:	f000 fc5e 	bl	8009ee4 <abort>
 8009628:	4b04      	ldr	r3, [pc, #16]	; (800963c <__assert_func+0x38>)
 800962a:	461c      	mov	r4, r3
 800962c:	e7f3      	b.n	8009616 <__assert_func+0x12>
 800962e:	bf00      	nop
 8009630:	2000006c 	.word	0x2000006c
 8009634:	0800a362 	.word	0x0800a362
 8009638:	0800a36f 	.word	0x0800a36f
 800963c:	0800a39d 	.word	0x0800a39d

08009640 <_calloc_r>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	fba1 5402 	umull	r5, r4, r1, r2
 8009646:	b934      	cbnz	r4, 8009656 <_calloc_r+0x16>
 8009648:	4629      	mov	r1, r5
 800964a:	f7fd fff9 	bl	8007640 <_malloc_r>
 800964e:	4606      	mov	r6, r0
 8009650:	b928      	cbnz	r0, 800965e <_calloc_r+0x1e>
 8009652:	4630      	mov	r0, r6
 8009654:	bd70      	pop	{r4, r5, r6, pc}
 8009656:	220c      	movs	r2, #12
 8009658:	2600      	movs	r6, #0
 800965a:	6002      	str	r2, [r0, #0]
 800965c:	e7f9      	b.n	8009652 <_calloc_r+0x12>
 800965e:	462a      	mov	r2, r5
 8009660:	4621      	mov	r1, r4
 8009662:	f7fd f86e 	bl	8006742 <memset>
 8009666:	e7f4      	b.n	8009652 <_calloc_r+0x12>

08009668 <rshift>:
 8009668:	6903      	ldr	r3, [r0, #16]
 800966a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800966e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009672:	f100 0414 	add.w	r4, r0, #20
 8009676:	ea4f 1261 	mov.w	r2, r1, asr #5
 800967a:	dd46      	ble.n	800970a <rshift+0xa2>
 800967c:	f011 011f 	ands.w	r1, r1, #31
 8009680:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009684:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009688:	d10c      	bne.n	80096a4 <rshift+0x3c>
 800968a:	4629      	mov	r1, r5
 800968c:	f100 0710 	add.w	r7, r0, #16
 8009690:	42b1      	cmp	r1, r6
 8009692:	d335      	bcc.n	8009700 <rshift+0x98>
 8009694:	1a9b      	subs	r3, r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	1eea      	subs	r2, r5, #3
 800969a:	4296      	cmp	r6, r2
 800969c:	bf38      	it	cc
 800969e:	2300      	movcc	r3, #0
 80096a0:	4423      	add	r3, r4
 80096a2:	e015      	b.n	80096d0 <rshift+0x68>
 80096a4:	46a1      	mov	r9, r4
 80096a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096aa:	f1c1 0820 	rsb	r8, r1, #32
 80096ae:	40cf      	lsrs	r7, r1
 80096b0:	f105 0e04 	add.w	lr, r5, #4
 80096b4:	4576      	cmp	r6, lr
 80096b6:	46f4      	mov	ip, lr
 80096b8:	d816      	bhi.n	80096e8 <rshift+0x80>
 80096ba:	1a9a      	subs	r2, r3, r2
 80096bc:	0092      	lsls	r2, r2, #2
 80096be:	3a04      	subs	r2, #4
 80096c0:	3501      	adds	r5, #1
 80096c2:	42ae      	cmp	r6, r5
 80096c4:	bf38      	it	cc
 80096c6:	2200      	movcc	r2, #0
 80096c8:	18a3      	adds	r3, r4, r2
 80096ca:	50a7      	str	r7, [r4, r2]
 80096cc:	b107      	cbz	r7, 80096d0 <rshift+0x68>
 80096ce:	3304      	adds	r3, #4
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	eba3 0204 	sub.w	r2, r3, r4
 80096d6:	bf08      	it	eq
 80096d8:	2300      	moveq	r3, #0
 80096da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096de:	6102      	str	r2, [r0, #16]
 80096e0:	bf08      	it	eq
 80096e2:	6143      	streq	r3, [r0, #20]
 80096e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096e8:	f8dc c000 	ldr.w	ip, [ip]
 80096ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80096f0:	ea4c 0707 	orr.w	r7, ip, r7
 80096f4:	f849 7b04 	str.w	r7, [r9], #4
 80096f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096fc:	40cf      	lsrs	r7, r1
 80096fe:	e7d9      	b.n	80096b4 <rshift+0x4c>
 8009700:	f851 cb04 	ldr.w	ip, [r1], #4
 8009704:	f847 cf04 	str.w	ip, [r7, #4]!
 8009708:	e7c2      	b.n	8009690 <rshift+0x28>
 800970a:	4623      	mov	r3, r4
 800970c:	e7e0      	b.n	80096d0 <rshift+0x68>

0800970e <__hexdig_fun>:
 800970e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009712:	2b09      	cmp	r3, #9
 8009714:	d802      	bhi.n	800971c <__hexdig_fun+0xe>
 8009716:	3820      	subs	r0, #32
 8009718:	b2c0      	uxtb	r0, r0
 800971a:	4770      	bx	lr
 800971c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009720:	2b05      	cmp	r3, #5
 8009722:	d801      	bhi.n	8009728 <__hexdig_fun+0x1a>
 8009724:	3847      	subs	r0, #71	; 0x47
 8009726:	e7f7      	b.n	8009718 <__hexdig_fun+0xa>
 8009728:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800972c:	2b05      	cmp	r3, #5
 800972e:	d801      	bhi.n	8009734 <__hexdig_fun+0x26>
 8009730:	3827      	subs	r0, #39	; 0x27
 8009732:	e7f1      	b.n	8009718 <__hexdig_fun+0xa>
 8009734:	2000      	movs	r0, #0
 8009736:	4770      	bx	lr

08009738 <__gethex>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	4681      	mov	r9, r0
 800973e:	468a      	mov	sl, r1
 8009740:	4617      	mov	r7, r2
 8009742:	680a      	ldr	r2, [r1, #0]
 8009744:	b085      	sub	sp, #20
 8009746:	f102 0b02 	add.w	fp, r2, #2
 800974a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800974e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009752:	9302      	str	r3, [sp, #8]
 8009754:	32fe      	adds	r2, #254	; 0xfe
 8009756:	eb02 030b 	add.w	r3, r2, fp
 800975a:	46d8      	mov	r8, fp
 800975c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	2830      	cmp	r0, #48	; 0x30
 8009764:	d0f7      	beq.n	8009756 <__gethex+0x1e>
 8009766:	f7ff ffd2 	bl	800970e <__hexdig_fun>
 800976a:	4604      	mov	r4, r0
 800976c:	2800      	cmp	r0, #0
 800976e:	d138      	bne.n	80097e2 <__gethex+0xaa>
 8009770:	2201      	movs	r2, #1
 8009772:	4640      	mov	r0, r8
 8009774:	49a7      	ldr	r1, [pc, #668]	; (8009a14 <__gethex+0x2dc>)
 8009776:	f7ff ff1d 	bl	80095b4 <strncmp>
 800977a:	4606      	mov	r6, r0
 800977c:	2800      	cmp	r0, #0
 800977e:	d169      	bne.n	8009854 <__gethex+0x11c>
 8009780:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009784:	465d      	mov	r5, fp
 8009786:	f7ff ffc2 	bl	800970e <__hexdig_fun>
 800978a:	2800      	cmp	r0, #0
 800978c:	d064      	beq.n	8009858 <__gethex+0x120>
 800978e:	465a      	mov	r2, fp
 8009790:	7810      	ldrb	r0, [r2, #0]
 8009792:	4690      	mov	r8, r2
 8009794:	2830      	cmp	r0, #48	; 0x30
 8009796:	f102 0201 	add.w	r2, r2, #1
 800979a:	d0f9      	beq.n	8009790 <__gethex+0x58>
 800979c:	f7ff ffb7 	bl	800970e <__hexdig_fun>
 80097a0:	2301      	movs	r3, #1
 80097a2:	fab0 f480 	clz	r4, r0
 80097a6:	465e      	mov	r6, fp
 80097a8:	0964      	lsrs	r4, r4, #5
 80097aa:	9301      	str	r3, [sp, #4]
 80097ac:	4642      	mov	r2, r8
 80097ae:	4615      	mov	r5, r2
 80097b0:	7828      	ldrb	r0, [r5, #0]
 80097b2:	3201      	adds	r2, #1
 80097b4:	f7ff ffab 	bl	800970e <__hexdig_fun>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d1f8      	bne.n	80097ae <__gethex+0x76>
 80097bc:	2201      	movs	r2, #1
 80097be:	4628      	mov	r0, r5
 80097c0:	4994      	ldr	r1, [pc, #592]	; (8009a14 <__gethex+0x2dc>)
 80097c2:	f7ff fef7 	bl	80095b4 <strncmp>
 80097c6:	b978      	cbnz	r0, 80097e8 <__gethex+0xb0>
 80097c8:	b946      	cbnz	r6, 80097dc <__gethex+0xa4>
 80097ca:	1c6e      	adds	r6, r5, #1
 80097cc:	4632      	mov	r2, r6
 80097ce:	4615      	mov	r5, r2
 80097d0:	7828      	ldrb	r0, [r5, #0]
 80097d2:	3201      	adds	r2, #1
 80097d4:	f7ff ff9b 	bl	800970e <__hexdig_fun>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d1f8      	bne.n	80097ce <__gethex+0x96>
 80097dc:	1b73      	subs	r3, r6, r5
 80097de:	009e      	lsls	r6, r3, #2
 80097e0:	e004      	b.n	80097ec <__gethex+0xb4>
 80097e2:	2400      	movs	r4, #0
 80097e4:	4626      	mov	r6, r4
 80097e6:	e7e1      	b.n	80097ac <__gethex+0x74>
 80097e8:	2e00      	cmp	r6, #0
 80097ea:	d1f7      	bne.n	80097dc <__gethex+0xa4>
 80097ec:	782b      	ldrb	r3, [r5, #0]
 80097ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097f2:	2b50      	cmp	r3, #80	; 0x50
 80097f4:	d13d      	bne.n	8009872 <__gethex+0x13a>
 80097f6:	786b      	ldrb	r3, [r5, #1]
 80097f8:	2b2b      	cmp	r3, #43	; 0x2b
 80097fa:	d02f      	beq.n	800985c <__gethex+0x124>
 80097fc:	2b2d      	cmp	r3, #45	; 0x2d
 80097fe:	d031      	beq.n	8009864 <__gethex+0x12c>
 8009800:	f04f 0b00 	mov.w	fp, #0
 8009804:	1c69      	adds	r1, r5, #1
 8009806:	7808      	ldrb	r0, [r1, #0]
 8009808:	f7ff ff81 	bl	800970e <__hexdig_fun>
 800980c:	1e42      	subs	r2, r0, #1
 800980e:	b2d2      	uxtb	r2, r2
 8009810:	2a18      	cmp	r2, #24
 8009812:	d82e      	bhi.n	8009872 <__gethex+0x13a>
 8009814:	f1a0 0210 	sub.w	r2, r0, #16
 8009818:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800981c:	f7ff ff77 	bl	800970e <__hexdig_fun>
 8009820:	f100 3cff 	add.w	ip, r0, #4294967295
 8009824:	fa5f fc8c 	uxtb.w	ip, ip
 8009828:	f1bc 0f18 	cmp.w	ip, #24
 800982c:	d91d      	bls.n	800986a <__gethex+0x132>
 800982e:	f1bb 0f00 	cmp.w	fp, #0
 8009832:	d000      	beq.n	8009836 <__gethex+0xfe>
 8009834:	4252      	negs	r2, r2
 8009836:	4416      	add	r6, r2
 8009838:	f8ca 1000 	str.w	r1, [sl]
 800983c:	b1dc      	cbz	r4, 8009876 <__gethex+0x13e>
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	bf14      	ite	ne
 8009844:	f04f 0800 	movne.w	r8, #0
 8009848:	f04f 0806 	moveq.w	r8, #6
 800984c:	4640      	mov	r0, r8
 800984e:	b005      	add	sp, #20
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009854:	4645      	mov	r5, r8
 8009856:	4626      	mov	r6, r4
 8009858:	2401      	movs	r4, #1
 800985a:	e7c7      	b.n	80097ec <__gethex+0xb4>
 800985c:	f04f 0b00 	mov.w	fp, #0
 8009860:	1ca9      	adds	r1, r5, #2
 8009862:	e7d0      	b.n	8009806 <__gethex+0xce>
 8009864:	f04f 0b01 	mov.w	fp, #1
 8009868:	e7fa      	b.n	8009860 <__gethex+0x128>
 800986a:	230a      	movs	r3, #10
 800986c:	fb03 0002 	mla	r0, r3, r2, r0
 8009870:	e7d0      	b.n	8009814 <__gethex+0xdc>
 8009872:	4629      	mov	r1, r5
 8009874:	e7e0      	b.n	8009838 <__gethex+0x100>
 8009876:	4621      	mov	r1, r4
 8009878:	eba5 0308 	sub.w	r3, r5, r8
 800987c:	3b01      	subs	r3, #1
 800987e:	2b07      	cmp	r3, #7
 8009880:	dc0a      	bgt.n	8009898 <__gethex+0x160>
 8009882:	4648      	mov	r0, r9
 8009884:	f7fd ff68 	bl	8007758 <_Balloc>
 8009888:	4604      	mov	r4, r0
 800988a:	b940      	cbnz	r0, 800989e <__gethex+0x166>
 800988c:	4602      	mov	r2, r0
 800988e:	21e4      	movs	r1, #228	; 0xe4
 8009890:	4b61      	ldr	r3, [pc, #388]	; (8009a18 <__gethex+0x2e0>)
 8009892:	4862      	ldr	r0, [pc, #392]	; (8009a1c <__gethex+0x2e4>)
 8009894:	f7ff feb6 	bl	8009604 <__assert_func>
 8009898:	3101      	adds	r1, #1
 800989a:	105b      	asrs	r3, r3, #1
 800989c:	e7ef      	b.n	800987e <__gethex+0x146>
 800989e:	2300      	movs	r3, #0
 80098a0:	469b      	mov	fp, r3
 80098a2:	f100 0a14 	add.w	sl, r0, #20
 80098a6:	f8cd a004 	str.w	sl, [sp, #4]
 80098aa:	45a8      	cmp	r8, r5
 80098ac:	d344      	bcc.n	8009938 <__gethex+0x200>
 80098ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098b2:	4658      	mov	r0, fp
 80098b4:	f848 bb04 	str.w	fp, [r8], #4
 80098b8:	eba8 080a 	sub.w	r8, r8, sl
 80098bc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80098c0:	6122      	str	r2, [r4, #16]
 80098c2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80098c6:	f7fe f839 	bl	800793c <__hi0bits>
 80098ca:	683d      	ldr	r5, [r7, #0]
 80098cc:	eba8 0800 	sub.w	r8, r8, r0
 80098d0:	45a8      	cmp	r8, r5
 80098d2:	dd59      	ble.n	8009988 <__gethex+0x250>
 80098d4:	eba8 0805 	sub.w	r8, r8, r5
 80098d8:	4641      	mov	r1, r8
 80098da:	4620      	mov	r0, r4
 80098dc:	f7fe fbb7 	bl	800804e <__any_on>
 80098e0:	4683      	mov	fp, r0
 80098e2:	b1b8      	cbz	r0, 8009914 <__gethex+0x1dc>
 80098e4:	f04f 0b01 	mov.w	fp, #1
 80098e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80098ec:	1159      	asrs	r1, r3, #5
 80098ee:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80098f2:	f003 021f 	and.w	r2, r3, #31
 80098f6:	fa0b f202 	lsl.w	r2, fp, r2
 80098fa:	420a      	tst	r2, r1
 80098fc:	d00a      	beq.n	8009914 <__gethex+0x1dc>
 80098fe:	455b      	cmp	r3, fp
 8009900:	dd06      	ble.n	8009910 <__gethex+0x1d8>
 8009902:	4620      	mov	r0, r4
 8009904:	f1a8 0102 	sub.w	r1, r8, #2
 8009908:	f7fe fba1 	bl	800804e <__any_on>
 800990c:	2800      	cmp	r0, #0
 800990e:	d138      	bne.n	8009982 <__gethex+0x24a>
 8009910:	f04f 0b02 	mov.w	fp, #2
 8009914:	4641      	mov	r1, r8
 8009916:	4620      	mov	r0, r4
 8009918:	f7ff fea6 	bl	8009668 <rshift>
 800991c:	4446      	add	r6, r8
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	42b3      	cmp	r3, r6
 8009922:	da41      	bge.n	80099a8 <__gethex+0x270>
 8009924:	4621      	mov	r1, r4
 8009926:	4648      	mov	r0, r9
 8009928:	f7fd ff56 	bl	80077d8 <_Bfree>
 800992c:	2300      	movs	r3, #0
 800992e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009930:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	e789      	b.n	800984c <__gethex+0x114>
 8009938:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800993c:	2a2e      	cmp	r2, #46	; 0x2e
 800993e:	d014      	beq.n	800996a <__gethex+0x232>
 8009940:	2b20      	cmp	r3, #32
 8009942:	d106      	bne.n	8009952 <__gethex+0x21a>
 8009944:	9b01      	ldr	r3, [sp, #4]
 8009946:	f843 bb04 	str.w	fp, [r3], #4
 800994a:	f04f 0b00 	mov.w	fp, #0
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	465b      	mov	r3, fp
 8009952:	7828      	ldrb	r0, [r5, #0]
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	f7ff feda 	bl	800970e <__hexdig_fun>
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	f000 000f 	and.w	r0, r0, #15
 8009960:	4098      	lsls	r0, r3
 8009962:	ea4b 0b00 	orr.w	fp, fp, r0
 8009966:	3304      	adds	r3, #4
 8009968:	e79f      	b.n	80098aa <__gethex+0x172>
 800996a:	45a8      	cmp	r8, r5
 800996c:	d8e8      	bhi.n	8009940 <__gethex+0x208>
 800996e:	2201      	movs	r2, #1
 8009970:	4628      	mov	r0, r5
 8009972:	4928      	ldr	r1, [pc, #160]	; (8009a14 <__gethex+0x2dc>)
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	f7ff fe1d 	bl	80095b4 <strncmp>
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	2800      	cmp	r0, #0
 800997e:	d1df      	bne.n	8009940 <__gethex+0x208>
 8009980:	e793      	b.n	80098aa <__gethex+0x172>
 8009982:	f04f 0b03 	mov.w	fp, #3
 8009986:	e7c5      	b.n	8009914 <__gethex+0x1dc>
 8009988:	da0b      	bge.n	80099a2 <__gethex+0x26a>
 800998a:	eba5 0808 	sub.w	r8, r5, r8
 800998e:	4621      	mov	r1, r4
 8009990:	4642      	mov	r2, r8
 8009992:	4648      	mov	r0, r9
 8009994:	f7fe f938 	bl	8007c08 <__lshift>
 8009998:	4604      	mov	r4, r0
 800999a:	eba6 0608 	sub.w	r6, r6, r8
 800999e:	f100 0a14 	add.w	sl, r0, #20
 80099a2:	f04f 0b00 	mov.w	fp, #0
 80099a6:	e7ba      	b.n	800991e <__gethex+0x1e6>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	42b3      	cmp	r3, r6
 80099ac:	dd74      	ble.n	8009a98 <__gethex+0x360>
 80099ae:	1b9e      	subs	r6, r3, r6
 80099b0:	42b5      	cmp	r5, r6
 80099b2:	dc35      	bgt.n	8009a20 <__gethex+0x2e8>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d023      	beq.n	8009a02 <__gethex+0x2ca>
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d025      	beq.n	8009a0a <__gethex+0x2d2>
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d115      	bne.n	80099ee <__gethex+0x2b6>
 80099c2:	42b5      	cmp	r5, r6
 80099c4:	d113      	bne.n	80099ee <__gethex+0x2b6>
 80099c6:	2d01      	cmp	r5, #1
 80099c8:	d10b      	bne.n	80099e2 <__gethex+0x2aa>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	9a02      	ldr	r2, [sp, #8]
 80099ce:	f04f 0862 	mov.w	r8, #98	; 0x62
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	2301      	movs	r3, #1
 80099d6:	6123      	str	r3, [r4, #16]
 80099d8:	f8ca 3000 	str.w	r3, [sl]
 80099dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099de:	601c      	str	r4, [r3, #0]
 80099e0:	e734      	b.n	800984c <__gethex+0x114>
 80099e2:	4620      	mov	r0, r4
 80099e4:	1e69      	subs	r1, r5, #1
 80099e6:	f7fe fb32 	bl	800804e <__any_on>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d1ed      	bne.n	80099ca <__gethex+0x292>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4648      	mov	r0, r9
 80099f2:	f7fd fef1 	bl	80077d8 <_Bfree>
 80099f6:	2300      	movs	r3, #0
 80099f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	e724      	b.n	800984c <__gethex+0x114>
 8009a02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1f2      	bne.n	80099ee <__gethex+0x2b6>
 8009a08:	e7df      	b.n	80099ca <__gethex+0x292>
 8009a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1dc      	bne.n	80099ca <__gethex+0x292>
 8009a10:	e7ed      	b.n	80099ee <__gethex+0x2b6>
 8009a12:	bf00      	nop
 8009a14:	0800a1f4 	.word	0x0800a1f4
 8009a18:	0800a087 	.word	0x0800a087
 8009a1c:	0800a39e 	.word	0x0800a39e
 8009a20:	f106 38ff 	add.w	r8, r6, #4294967295
 8009a24:	f1bb 0f00 	cmp.w	fp, #0
 8009a28:	d133      	bne.n	8009a92 <__gethex+0x35a>
 8009a2a:	f1b8 0f00 	cmp.w	r8, #0
 8009a2e:	d004      	beq.n	8009a3a <__gethex+0x302>
 8009a30:	4641      	mov	r1, r8
 8009a32:	4620      	mov	r0, r4
 8009a34:	f7fe fb0b 	bl	800804e <__any_on>
 8009a38:	4683      	mov	fp, r0
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009a40:	f008 081f 	and.w	r8, r8, #31
 8009a44:	fa03 f308 	lsl.w	r3, r3, r8
 8009a48:	f04f 0802 	mov.w	r8, #2
 8009a4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a50:	4631      	mov	r1, r6
 8009a52:	4213      	tst	r3, r2
 8009a54:	4620      	mov	r0, r4
 8009a56:	bf18      	it	ne
 8009a58:	f04b 0b02 	orrne.w	fp, fp, #2
 8009a5c:	1bad      	subs	r5, r5, r6
 8009a5e:	f7ff fe03 	bl	8009668 <rshift>
 8009a62:	687e      	ldr	r6, [r7, #4]
 8009a64:	f1bb 0f00 	cmp.w	fp, #0
 8009a68:	d04a      	beq.n	8009b00 <__gethex+0x3c8>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d016      	beq.n	8009a9e <__gethex+0x366>
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d018      	beq.n	8009aa6 <__gethex+0x36e>
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d109      	bne.n	8009a8c <__gethex+0x354>
 8009a78:	f01b 0f02 	tst.w	fp, #2
 8009a7c:	d006      	beq.n	8009a8c <__gethex+0x354>
 8009a7e:	f8da 3000 	ldr.w	r3, [sl]
 8009a82:	ea4b 0b03 	orr.w	fp, fp, r3
 8009a86:	f01b 0f01 	tst.w	fp, #1
 8009a8a:	d10f      	bne.n	8009aac <__gethex+0x374>
 8009a8c:	f048 0810 	orr.w	r8, r8, #16
 8009a90:	e036      	b.n	8009b00 <__gethex+0x3c8>
 8009a92:	f04f 0b01 	mov.w	fp, #1
 8009a96:	e7d0      	b.n	8009a3a <__gethex+0x302>
 8009a98:	f04f 0801 	mov.w	r8, #1
 8009a9c:	e7e2      	b.n	8009a64 <__gethex+0x32c>
 8009a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa0:	f1c3 0301 	rsb	r3, r3, #1
 8009aa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0ef      	beq.n	8009a8c <__gethex+0x354>
 8009aac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ab0:	f104 0214 	add.w	r2, r4, #20
 8009ab4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	2300      	movs	r3, #0
 8009abc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009ac0:	4694      	mov	ip, r2
 8009ac2:	f852 1b04 	ldr.w	r1, [r2], #4
 8009ac6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009aca:	d01e      	beq.n	8009b0a <__gethex+0x3d2>
 8009acc:	3101      	adds	r1, #1
 8009ace:	f8cc 1000 	str.w	r1, [ip]
 8009ad2:	f1b8 0f02 	cmp.w	r8, #2
 8009ad6:	f104 0214 	add.w	r2, r4, #20
 8009ada:	d13d      	bne.n	8009b58 <__gethex+0x420>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	d10b      	bne.n	8009afc <__gethex+0x3c4>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	1169      	asrs	r1, r5, #5
 8009ae8:	f005 051f 	and.w	r5, r5, #31
 8009aec:	fa03 f505 	lsl.w	r5, r3, r5
 8009af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009af4:	421d      	tst	r5, r3
 8009af6:	bf18      	it	ne
 8009af8:	f04f 0801 	movne.w	r8, #1
 8009afc:	f048 0820 	orr.w	r8, r8, #32
 8009b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b02:	601c      	str	r4, [r3, #0]
 8009b04:	9b02      	ldr	r3, [sp, #8]
 8009b06:	601e      	str	r6, [r3, #0]
 8009b08:	e6a0      	b.n	800984c <__gethex+0x114>
 8009b0a:	4290      	cmp	r0, r2
 8009b0c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009b10:	d8d6      	bhi.n	8009ac0 <__gethex+0x388>
 8009b12:	68a2      	ldr	r2, [r4, #8]
 8009b14:	4593      	cmp	fp, r2
 8009b16:	db17      	blt.n	8009b48 <__gethex+0x410>
 8009b18:	6861      	ldr	r1, [r4, #4]
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	f7fd fe1b 	bl	8007758 <_Balloc>
 8009b22:	4682      	mov	sl, r0
 8009b24:	b918      	cbnz	r0, 8009b2e <__gethex+0x3f6>
 8009b26:	4602      	mov	r2, r0
 8009b28:	2184      	movs	r1, #132	; 0x84
 8009b2a:	4b1a      	ldr	r3, [pc, #104]	; (8009b94 <__gethex+0x45c>)
 8009b2c:	e6b1      	b.n	8009892 <__gethex+0x15a>
 8009b2e:	6922      	ldr	r2, [r4, #16]
 8009b30:	f104 010c 	add.w	r1, r4, #12
 8009b34:	3202      	adds	r2, #2
 8009b36:	0092      	lsls	r2, r2, #2
 8009b38:	300c      	adds	r0, #12
 8009b3a:	f7fc fe8f 	bl	800685c <memcpy>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4648      	mov	r0, r9
 8009b42:	f7fd fe49 	bl	80077d8 <_Bfree>
 8009b46:	4654      	mov	r4, sl
 8009b48:	6922      	ldr	r2, [r4, #16]
 8009b4a:	1c51      	adds	r1, r2, #1
 8009b4c:	6121      	str	r1, [r4, #16]
 8009b4e:	2101      	movs	r1, #1
 8009b50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b54:	6151      	str	r1, [r2, #20]
 8009b56:	e7bc      	b.n	8009ad2 <__gethex+0x39a>
 8009b58:	6921      	ldr	r1, [r4, #16]
 8009b5a:	4559      	cmp	r1, fp
 8009b5c:	dd0b      	ble.n	8009b76 <__gethex+0x43e>
 8009b5e:	2101      	movs	r1, #1
 8009b60:	4620      	mov	r0, r4
 8009b62:	f7ff fd81 	bl	8009668 <rshift>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3601      	adds	r6, #1
 8009b6a:	42b3      	cmp	r3, r6
 8009b6c:	f6ff aeda 	blt.w	8009924 <__gethex+0x1ec>
 8009b70:	f04f 0801 	mov.w	r8, #1
 8009b74:	e7c2      	b.n	8009afc <__gethex+0x3c4>
 8009b76:	f015 051f 	ands.w	r5, r5, #31
 8009b7a:	d0f9      	beq.n	8009b70 <__gethex+0x438>
 8009b7c:	9b01      	ldr	r3, [sp, #4]
 8009b7e:	f1c5 0520 	rsb	r5, r5, #32
 8009b82:	441a      	add	r2, r3
 8009b84:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009b88:	f7fd fed8 	bl	800793c <__hi0bits>
 8009b8c:	42a8      	cmp	r0, r5
 8009b8e:	dbe6      	blt.n	8009b5e <__gethex+0x426>
 8009b90:	e7ee      	b.n	8009b70 <__gethex+0x438>
 8009b92:	bf00      	nop
 8009b94:	0800a087 	.word	0x0800a087

08009b98 <L_shift>:
 8009b98:	f1c2 0208 	rsb	r2, r2, #8
 8009b9c:	0092      	lsls	r2, r2, #2
 8009b9e:	b570      	push	{r4, r5, r6, lr}
 8009ba0:	f1c2 0620 	rsb	r6, r2, #32
 8009ba4:	6843      	ldr	r3, [r0, #4]
 8009ba6:	6804      	ldr	r4, [r0, #0]
 8009ba8:	fa03 f506 	lsl.w	r5, r3, r6
 8009bac:	432c      	orrs	r4, r5
 8009bae:	40d3      	lsrs	r3, r2
 8009bb0:	6004      	str	r4, [r0, #0]
 8009bb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bb6:	4288      	cmp	r0, r1
 8009bb8:	d3f4      	bcc.n	8009ba4 <L_shift+0xc>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}

08009bbc <__match>:
 8009bbc:	b530      	push	{r4, r5, lr}
 8009bbe:	6803      	ldr	r3, [r0, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bc6:	b914      	cbnz	r4, 8009bce <__match+0x12>
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	2001      	movs	r0, #1
 8009bcc:	bd30      	pop	{r4, r5, pc}
 8009bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009bd6:	2d19      	cmp	r5, #25
 8009bd8:	bf98      	it	ls
 8009bda:	3220      	addls	r2, #32
 8009bdc:	42a2      	cmp	r2, r4
 8009bde:	d0f0      	beq.n	8009bc2 <__match+0x6>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e7f3      	b.n	8009bcc <__match+0x10>

08009be4 <__hexnan>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	2500      	movs	r5, #0
 8009bea:	680b      	ldr	r3, [r1, #0]
 8009bec:	4682      	mov	sl, r0
 8009bee:	115e      	asrs	r6, r3, #5
 8009bf0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009bf4:	f013 031f 	ands.w	r3, r3, #31
 8009bf8:	bf18      	it	ne
 8009bfa:	3604      	addne	r6, #4
 8009bfc:	1f37      	subs	r7, r6, #4
 8009bfe:	4690      	mov	r8, r2
 8009c00:	46b9      	mov	r9, r7
 8009c02:	463c      	mov	r4, r7
 8009c04:	46ab      	mov	fp, r5
 8009c06:	b087      	sub	sp, #28
 8009c08:	6801      	ldr	r1, [r0, #0]
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c10:	9502      	str	r5, [sp, #8]
 8009c12:	784a      	ldrb	r2, [r1, #1]
 8009c14:	1c4b      	adds	r3, r1, #1
 8009c16:	9303      	str	r3, [sp, #12]
 8009c18:	b342      	cbz	r2, 8009c6c <__hexnan+0x88>
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	9105      	str	r1, [sp, #20]
 8009c1e:	9204      	str	r2, [sp, #16]
 8009c20:	f7ff fd75 	bl	800970e <__hexdig_fun>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d14f      	bne.n	8009cc8 <__hexnan+0xe4>
 8009c28:	9a04      	ldr	r2, [sp, #16]
 8009c2a:	9905      	ldr	r1, [sp, #20]
 8009c2c:	2a20      	cmp	r2, #32
 8009c2e:	d818      	bhi.n	8009c62 <__hexnan+0x7e>
 8009c30:	9b02      	ldr	r3, [sp, #8]
 8009c32:	459b      	cmp	fp, r3
 8009c34:	dd13      	ble.n	8009c5e <__hexnan+0x7a>
 8009c36:	454c      	cmp	r4, r9
 8009c38:	d206      	bcs.n	8009c48 <__hexnan+0x64>
 8009c3a:	2d07      	cmp	r5, #7
 8009c3c:	dc04      	bgt.n	8009c48 <__hexnan+0x64>
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4649      	mov	r1, r9
 8009c42:	4620      	mov	r0, r4
 8009c44:	f7ff ffa8 	bl	8009b98 <L_shift>
 8009c48:	4544      	cmp	r4, r8
 8009c4a:	d950      	bls.n	8009cee <__hexnan+0x10a>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f1a4 0904 	sub.w	r9, r4, #4
 8009c52:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c56:	461d      	mov	r5, r3
 8009c58:	464c      	mov	r4, r9
 8009c5a:	f8cd b008 	str.w	fp, [sp, #8]
 8009c5e:	9903      	ldr	r1, [sp, #12]
 8009c60:	e7d7      	b.n	8009c12 <__hexnan+0x2e>
 8009c62:	2a29      	cmp	r2, #41	; 0x29
 8009c64:	d155      	bne.n	8009d12 <__hexnan+0x12e>
 8009c66:	3102      	adds	r1, #2
 8009c68:	f8ca 1000 	str.w	r1, [sl]
 8009c6c:	f1bb 0f00 	cmp.w	fp, #0
 8009c70:	d04f      	beq.n	8009d12 <__hexnan+0x12e>
 8009c72:	454c      	cmp	r4, r9
 8009c74:	d206      	bcs.n	8009c84 <__hexnan+0xa0>
 8009c76:	2d07      	cmp	r5, #7
 8009c78:	dc04      	bgt.n	8009c84 <__hexnan+0xa0>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff ff8a 	bl	8009b98 <L_shift>
 8009c84:	4544      	cmp	r4, r8
 8009c86:	d934      	bls.n	8009cf2 <__hexnan+0x10e>
 8009c88:	4623      	mov	r3, r4
 8009c8a:	f1a8 0204 	sub.w	r2, r8, #4
 8009c8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c92:	429f      	cmp	r7, r3
 8009c94:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c98:	d2f9      	bcs.n	8009c8e <__hexnan+0xaa>
 8009c9a:	1b3b      	subs	r3, r7, r4
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	3e03      	subs	r6, #3
 8009ca4:	3401      	adds	r4, #1
 8009ca6:	42a6      	cmp	r6, r4
 8009ca8:	bf38      	it	cc
 8009caa:	2304      	movcc	r3, #4
 8009cac:	2200      	movs	r2, #0
 8009cae:	4443      	add	r3, r8
 8009cb0:	f843 2b04 	str.w	r2, [r3], #4
 8009cb4:	429f      	cmp	r7, r3
 8009cb6:	d2fb      	bcs.n	8009cb0 <__hexnan+0xcc>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	b91b      	cbnz	r3, 8009cc4 <__hexnan+0xe0>
 8009cbc:	4547      	cmp	r7, r8
 8009cbe:	d126      	bne.n	8009d0e <__hexnan+0x12a>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	2005      	movs	r0, #5
 8009cc6:	e025      	b.n	8009d14 <__hexnan+0x130>
 8009cc8:	3501      	adds	r5, #1
 8009cca:	2d08      	cmp	r5, #8
 8009ccc:	f10b 0b01 	add.w	fp, fp, #1
 8009cd0:	dd06      	ble.n	8009ce0 <__hexnan+0xfc>
 8009cd2:	4544      	cmp	r4, r8
 8009cd4:	d9c3      	bls.n	8009c5e <__hexnan+0x7a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2501      	movs	r5, #1
 8009cda:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cde:	3c04      	subs	r4, #4
 8009ce0:	6822      	ldr	r2, [r4, #0]
 8009ce2:	f000 000f 	and.w	r0, r0, #15
 8009ce6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009cea:	6020      	str	r0, [r4, #0]
 8009cec:	e7b7      	b.n	8009c5e <__hexnan+0x7a>
 8009cee:	2508      	movs	r5, #8
 8009cf0:	e7b5      	b.n	8009c5e <__hexnan+0x7a>
 8009cf2:	9b01      	ldr	r3, [sp, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d0df      	beq.n	8009cb8 <__hexnan+0xd4>
 8009cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfc:	f1c3 0320 	rsb	r3, r3, #32
 8009d00:	40da      	lsrs	r2, r3
 8009d02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d06:	4013      	ands	r3, r2
 8009d08:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d0c:	e7d4      	b.n	8009cb8 <__hexnan+0xd4>
 8009d0e:	3f04      	subs	r7, #4
 8009d10:	e7d2      	b.n	8009cb8 <__hexnan+0xd4>
 8009d12:	2004      	movs	r0, #4
 8009d14:	b007      	add	sp, #28
 8009d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d1a <__ascii_mbtowc>:
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	b901      	cbnz	r1, 8009d20 <__ascii_mbtowc+0x6>
 8009d1e:	a901      	add	r1, sp, #4
 8009d20:	b142      	cbz	r2, 8009d34 <__ascii_mbtowc+0x1a>
 8009d22:	b14b      	cbz	r3, 8009d38 <__ascii_mbtowc+0x1e>
 8009d24:	7813      	ldrb	r3, [r2, #0]
 8009d26:	600b      	str	r3, [r1, #0]
 8009d28:	7812      	ldrb	r2, [r2, #0]
 8009d2a:	1e10      	subs	r0, r2, #0
 8009d2c:	bf18      	it	ne
 8009d2e:	2001      	movne	r0, #1
 8009d30:	b002      	add	sp, #8
 8009d32:	4770      	bx	lr
 8009d34:	4610      	mov	r0, r2
 8009d36:	e7fb      	b.n	8009d30 <__ascii_mbtowc+0x16>
 8009d38:	f06f 0001 	mvn.w	r0, #1
 8009d3c:	e7f8      	b.n	8009d30 <__ascii_mbtowc+0x16>

08009d3e <_realloc_r>:
 8009d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d42:	4680      	mov	r8, r0
 8009d44:	4614      	mov	r4, r2
 8009d46:	460e      	mov	r6, r1
 8009d48:	b921      	cbnz	r1, 8009d54 <_realloc_r+0x16>
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d50:	f7fd bc76 	b.w	8007640 <_malloc_r>
 8009d54:	b92a      	cbnz	r2, 8009d62 <_realloc_r+0x24>
 8009d56:	f7fd fc03 	bl	8007560 <_free_r>
 8009d5a:	4625      	mov	r5, r4
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d62:	f000 f8c6 	bl	8009ef2 <_malloc_usable_size_r>
 8009d66:	4284      	cmp	r4, r0
 8009d68:	4607      	mov	r7, r0
 8009d6a:	d802      	bhi.n	8009d72 <_realloc_r+0x34>
 8009d6c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d70:	d812      	bhi.n	8009d98 <_realloc_r+0x5a>
 8009d72:	4621      	mov	r1, r4
 8009d74:	4640      	mov	r0, r8
 8009d76:	f7fd fc63 	bl	8007640 <_malloc_r>
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d0ed      	beq.n	8009d5c <_realloc_r+0x1e>
 8009d80:	42bc      	cmp	r4, r7
 8009d82:	4622      	mov	r2, r4
 8009d84:	4631      	mov	r1, r6
 8009d86:	bf28      	it	cs
 8009d88:	463a      	movcs	r2, r7
 8009d8a:	f7fc fd67 	bl	800685c <memcpy>
 8009d8e:	4631      	mov	r1, r6
 8009d90:	4640      	mov	r0, r8
 8009d92:	f7fd fbe5 	bl	8007560 <_free_r>
 8009d96:	e7e1      	b.n	8009d5c <_realloc_r+0x1e>
 8009d98:	4635      	mov	r5, r6
 8009d9a:	e7df      	b.n	8009d5c <_realloc_r+0x1e>

08009d9c <__ascii_wctomb>:
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	4608      	mov	r0, r1
 8009da0:	b141      	cbz	r1, 8009db4 <__ascii_wctomb+0x18>
 8009da2:	2aff      	cmp	r2, #255	; 0xff
 8009da4:	d904      	bls.n	8009db0 <__ascii_wctomb+0x14>
 8009da6:	228a      	movs	r2, #138	; 0x8a
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	4770      	bx	lr
 8009db0:	2001      	movs	r0, #1
 8009db2:	700a      	strb	r2, [r1, #0]
 8009db4:	4770      	bx	lr
	...

08009db8 <fiprintf>:
 8009db8:	b40e      	push	{r1, r2, r3}
 8009dba:	b503      	push	{r0, r1, lr}
 8009dbc:	4601      	mov	r1, r0
 8009dbe:	ab03      	add	r3, sp, #12
 8009dc0:	4805      	ldr	r0, [pc, #20]	; (8009dd8 <fiprintf+0x20>)
 8009dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc6:	6800      	ldr	r0, [r0, #0]
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	f7ff f97f 	bl	80090cc <_vfiprintf_r>
 8009dce:	b002      	add	sp, #8
 8009dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd4:	b003      	add	sp, #12
 8009dd6:	4770      	bx	lr
 8009dd8:	2000006c 	.word	0x2000006c

08009ddc <__swhatbuf_r>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	460c      	mov	r4, r1
 8009de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de4:	4615      	mov	r5, r2
 8009de6:	2900      	cmp	r1, #0
 8009de8:	461e      	mov	r6, r3
 8009dea:	b096      	sub	sp, #88	; 0x58
 8009dec:	da0c      	bge.n	8009e08 <__swhatbuf_r+0x2c>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	2100      	movs	r1, #0
 8009df2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009df6:	bf0c      	ite	eq
 8009df8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009dfc:	2340      	movne	r3, #64	; 0x40
 8009dfe:	2000      	movs	r0, #0
 8009e00:	6031      	str	r1, [r6, #0]
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	b016      	add	sp, #88	; 0x58
 8009e06:	bd70      	pop	{r4, r5, r6, pc}
 8009e08:	466a      	mov	r2, sp
 8009e0a:	f000 f849 	bl	8009ea0 <_fstat_r>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	dbed      	blt.n	8009dee <__swhatbuf_r+0x12>
 8009e12:	9901      	ldr	r1, [sp, #4]
 8009e14:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e18:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e1c:	4259      	negs	r1, r3
 8009e1e:	4159      	adcs	r1, r3
 8009e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e24:	e7eb      	b.n	8009dfe <__swhatbuf_r+0x22>

08009e26 <__smakebuf_r>:
 8009e26:	898b      	ldrh	r3, [r1, #12]
 8009e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e2a:	079d      	lsls	r5, r3, #30
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	460c      	mov	r4, r1
 8009e30:	d507      	bpl.n	8009e42 <__smakebuf_r+0x1c>
 8009e32:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	6123      	str	r3, [r4, #16]
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	6163      	str	r3, [r4, #20]
 8009e3e:	b002      	add	sp, #8
 8009e40:	bd70      	pop	{r4, r5, r6, pc}
 8009e42:	466a      	mov	r2, sp
 8009e44:	ab01      	add	r3, sp, #4
 8009e46:	f7ff ffc9 	bl	8009ddc <__swhatbuf_r>
 8009e4a:	9900      	ldr	r1, [sp, #0]
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7fd fbf6 	bl	8007640 <_malloc_r>
 8009e54:	b948      	cbnz	r0, 8009e6a <__smakebuf_r+0x44>
 8009e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e5a:	059a      	lsls	r2, r3, #22
 8009e5c:	d4ef      	bmi.n	8009e3e <__smakebuf_r+0x18>
 8009e5e:	f023 0303 	bic.w	r3, r3, #3
 8009e62:	f043 0302 	orr.w	r3, r3, #2
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	e7e3      	b.n	8009e32 <__smakebuf_r+0xc>
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	6020      	str	r0, [r4, #0]
 8009e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	9b00      	ldr	r3, [sp, #0]
 8009e76:	6120      	str	r0, [r4, #16]
 8009e78:	6163      	str	r3, [r4, #20]
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	b15b      	cbz	r3, 8009e96 <__smakebuf_r+0x70>
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e84:	f000 f81e 	bl	8009ec4 <_isatty_r>
 8009e88:	b128      	cbz	r0, 8009e96 <__smakebuf_r+0x70>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f023 0303 	bic.w	r3, r3, #3
 8009e90:	f043 0301 	orr.w	r3, r3, #1
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	431d      	orrs	r5, r3
 8009e9a:	81a5      	strh	r5, [r4, #12]
 8009e9c:	e7cf      	b.n	8009e3e <__smakebuf_r+0x18>
	...

08009ea0 <_fstat_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4d06      	ldr	r5, [pc, #24]	; (8009ec0 <_fstat_r+0x20>)
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	602b      	str	r3, [r5, #0]
 8009eae:	f7f7 ff42 	bl	8001d36 <_fstat>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d102      	bne.n	8009ebc <_fstat_r+0x1c>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	b103      	cbz	r3, 8009ebc <_fstat_r+0x1c>
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	bd38      	pop	{r3, r4, r5, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000608 	.word	0x20000608

08009ec4 <_isatty_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4d05      	ldr	r5, [pc, #20]	; (8009ee0 <_isatty_r+0x1c>)
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	602b      	str	r3, [r5, #0]
 8009ed0:	f7f7 ff40 	bl	8001d54 <_isatty>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_isatty_r+0x1a>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_isatty_r+0x1a>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	20000608 	.word	0x20000608

08009ee4 <abort>:
 8009ee4:	2006      	movs	r0, #6
 8009ee6:	b508      	push	{r3, lr}
 8009ee8:	f000 f834 	bl	8009f54 <raise>
 8009eec:	2001      	movs	r0, #1
 8009eee:	f7f7 fef0 	bl	8001cd2 <_exit>

08009ef2 <_malloc_usable_size_r>:
 8009ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef6:	1f18      	subs	r0, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bfbc      	itt	lt
 8009efc:	580b      	ldrlt	r3, [r1, r0]
 8009efe:	18c0      	addlt	r0, r0, r3
 8009f00:	4770      	bx	lr

08009f02 <_raise_r>:
 8009f02:	291f      	cmp	r1, #31
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4604      	mov	r4, r0
 8009f08:	460d      	mov	r5, r1
 8009f0a:	d904      	bls.n	8009f16 <_raise_r+0x14>
 8009f0c:	2316      	movs	r3, #22
 8009f0e:	6003      	str	r3, [r0, #0]
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295
 8009f14:	bd38      	pop	{r3, r4, r5, pc}
 8009f16:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f18:	b112      	cbz	r2, 8009f20 <_raise_r+0x1e>
 8009f1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f1e:	b94b      	cbnz	r3, 8009f34 <_raise_r+0x32>
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 f831 	bl	8009f88 <_getpid_r>
 8009f26:	462a      	mov	r2, r5
 8009f28:	4601      	mov	r1, r0
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f30:	f000 b818 	b.w	8009f64 <_kill_r>
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d00a      	beq.n	8009f4e <_raise_r+0x4c>
 8009f38:	1c59      	adds	r1, r3, #1
 8009f3a:	d103      	bne.n	8009f44 <_raise_r+0x42>
 8009f3c:	2316      	movs	r3, #22
 8009f3e:	6003      	str	r3, [r0, #0]
 8009f40:	2001      	movs	r0, #1
 8009f42:	e7e7      	b.n	8009f14 <_raise_r+0x12>
 8009f44:	2400      	movs	r4, #0
 8009f46:	4628      	mov	r0, r5
 8009f48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f4c:	4798      	blx	r3
 8009f4e:	2000      	movs	r0, #0
 8009f50:	e7e0      	b.n	8009f14 <_raise_r+0x12>
	...

08009f54 <raise>:
 8009f54:	4b02      	ldr	r3, [pc, #8]	; (8009f60 <raise+0xc>)
 8009f56:	4601      	mov	r1, r0
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	f7ff bfd2 	b.w	8009f02 <_raise_r>
 8009f5e:	bf00      	nop
 8009f60:	2000006c 	.word	0x2000006c

08009f64 <_kill_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	2300      	movs	r3, #0
 8009f68:	4d06      	ldr	r5, [pc, #24]	; (8009f84 <_kill_r+0x20>)
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	4611      	mov	r1, r2
 8009f70:	602b      	str	r3, [r5, #0]
 8009f72:	f7f7 fe9e 	bl	8001cb2 <_kill>
 8009f76:	1c43      	adds	r3, r0, #1
 8009f78:	d102      	bne.n	8009f80 <_kill_r+0x1c>
 8009f7a:	682b      	ldr	r3, [r5, #0]
 8009f7c:	b103      	cbz	r3, 8009f80 <_kill_r+0x1c>
 8009f7e:	6023      	str	r3, [r4, #0]
 8009f80:	bd38      	pop	{r3, r4, r5, pc}
 8009f82:	bf00      	nop
 8009f84:	20000608 	.word	0x20000608

08009f88 <_getpid_r>:
 8009f88:	f7f7 be8c 	b.w	8001ca4 <_getpid>

08009f8c <_init>:
 8009f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8e:	bf00      	nop
 8009f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f92:	bc08      	pop	{r3}
 8009f94:	469e      	mov	lr, r3
 8009f96:	4770      	bx	lr

08009f98 <_fini>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	bf00      	nop
 8009f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9e:	bc08      	pop	{r3}
 8009fa0:	469e      	mov	lr, r3
 8009fa2:	4770      	bx	lr
